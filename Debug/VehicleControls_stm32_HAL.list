
VehicleControls_stm32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080053e8  080053e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053e8  080053e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08005460  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005460  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011544  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc7  00000000  00000000  000315dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000341a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00034fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197e7  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106e8  00000000  00000000  0004f4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a676  00000000  00000000  0005fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea215  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000450c  00000000  00000000  000ea268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f74 	.word	0x08004f74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f74 	.word	0x08004f74

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <JDY09_StartNewIRQRx>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_StartNewIRQRx(JDY09_t *jdy09)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	// start another IRQ for single sign
	HAL_UART_Receive_IT(jdy09->huart, &(jdy09->RecieveBufferIT), 1);
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	6818      	ldr	r0, [r3, #0]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3324      	adds	r3, #36	; 0x24
 8000170:	2201      	movs	r2, #1
 8000172:	4619      	mov	r1, r3
 8000174:	f002 ffe6 	bl	8003144 <HAL_UART_Receive_IT>
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <JDY09_DisplayTerminal>:
 *
 * @return - void
 */

static void JDY09_DisplayTerminal(char *Msg)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
	...

08000194 <JDY09_Init>:
void JDY09_Init(JDY09_t *jdy09, UART_HandleTypeDef *huart
#if (JDY09_USE_STATE_PIN == 1)
		,GPIO_TypeDef *StateGPIOPort, uint16_t StateGPIOPin
#endif
		)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]

	// init msg
	JDY09_DisplayTerminal("JDY-09 Initializing... \n\r");
 800019e:	4809      	ldr	r0, [pc, #36]	; (80001c4 <JDY09_Init+0x30>)
 80001a0:	f7ff ffee 	bl	8000180 <JDY09_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(jdy09->RingBuffer));
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	3326      	adds	r3, #38	; 0x26
 80001a8:	4618      	mov	r0, r3
 80001aa:	f000 fc9c 	bl	8000ae6 <RB_Flush>

	// Assign uart
	jdy09->huart = huart;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	601a      	str	r2, [r3, #0]
	jdy09->StateGPIOPort = StateGPIOPort;
	jdy09->StatePinNumber = StateGPIOPin;
#endif
	// if irq mode is used for receive
#if (JDY09_UART_RX_IT == 1)
	JDY09_StartNewIRQRx(jdy09);
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f7ff ffd3 	bl	8000160 <JDY09_StartNewIRQRx>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETADRESS);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETBAUDRATE);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETNAME);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETPASSWORD);
#endif
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	08004fcc 	.word	0x08004fcc

080001c8 <JDY09_ClearMsgPendingFlag>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_ClearMsgPendingFlag(JDY09_t *jdy09)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	jdy09->MessagePending = JDY09_NOMESSAGE;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2200      	movs	r2, #0
 80001d4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <JDY09_CheckPendingMessages>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t JDY09_CheckPendingMessages(JDY09_t *jdy09, uint8_t *MsgBuffer)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b084      	sub	sp, #16
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (jdy09->LinesRecieved > 0)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d032      	beq.n	800025e <JDY09_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(jdy09->RingBuffer), &temp);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	3326      	adds	r3, #38	; 0x26
 8000204:	f107 020e 	add.w	r2, r7, #14
 8000208:	4611      	mov	r1, r2
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fc14 	bl	8000a38 <RB_Read>
			if (temp == JDY09_LASTCHARACTER)
 8000210:	7bbb      	ldrb	r3, [r7, #14]
 8000212:	2b0a      	cmp	r3, #10
 8000214:	d10b      	bne.n	800022e <JDY09_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = JDY09_LASTCHARACTER;
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	4413      	add	r3, r2
 800021c:	220a      	movs	r2, #10
 800021e:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	3301      	adds	r3, #1
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	4413      	add	r3, r2
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	e004      	b.n	8000238 <JDY09_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	4413      	add	r3, r2
 8000234:	7bba      	ldrb	r2, [r7, #14]
 8000236:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	3301      	adds	r3, #1
 800023c:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != JDY09_LASTCHARACTER);
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	2b0a      	cmp	r3, #10
 8000242:	d1dd      	bne.n	8000200 <JDY09_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		jdy09->LinesRecieved--;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800024a:	b2db      	uxtb	r3, r3
 800024c:	3b01      	subs	r3, #1
 800024e:	b2da      	uxtb	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		//set up flag that message is ready to parse
		jdy09->MessagePending = JDY09_MESSAGEPENDING;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2201      	movs	r2, #1
 800025a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	}

	// return if flag status
	return jdy09->MessagePending;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
}
 8000264:	4618      	mov	r0, r3
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <JDY09_RxCpltCallbackIT>:
 * @param[*huart] - uart handle
 * @return - void
 */
#if (JDY09_UART_RX_IT == 1)
void JDY09_RxCpltCallbackIT(JDY09_t *jdy09, UART_HandleTypeDef *huart)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]

	//check if IRQ is coming from correct uart
	if (jdy09->huart->Instance == huart->Instance)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d11b      	bne.n	80002bc <JDY09_RxCpltCallbackIT+0x50>
	{
		//write a sign to ring buffer
		RB_Write((&(jdy09->RingBuffer)), jdy09->RecieveBufferIT);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000290:	4619      	mov	r1, r3
 8000292:	4610      	mov	r0, r2
 8000294:	f000 fbfc 	bl	8000a90 <RB_Write>

		// when line is complete -> add 1 to received lines
		if (jdy09->RecieveBufferIT == JDY09_LASTCHARACTER)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800029e:	2b0a      	cmp	r3, #10
 80002a0:	d109      	bne.n	80002b6 <JDY09_RxCpltCallbackIT+0x4a>
		{
			(jdy09->LinesRecieved)++;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	3301      	adds	r3, #1
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

			// if user wants to start irq in this momemnt
#if(JDY09_IRQ_CONTINUOUSSTART == 1)
			JDY09_StartNewIRQRx(jdy09);
#endif
			return;
 80002b4:	e002      	b.n	80002bc <JDY09_RxCpltCallbackIT+0x50>
		}
		// start another IRQ for single sign
		JDY09_StartNewIRQRx(jdy09);
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f7ff ff52 	bl	8000160 <JDY09_StartNewIRQRx>
	}
}
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_DMA_Init+0x28>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <MX_DMA_Init+0x28>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <MX_DMA_Init+0x28>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_GPIO_Init+0x9c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a20      	ldr	r2, [pc, #128]	; (800038c <MX_GPIO_Init+0x9c>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <MX_GPIO_Init+0x9c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_GPIO_Init+0x9c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a1a      	ldr	r2, [pc, #104]	; (800038c <MX_GPIO_Init+0x9c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_GPIO_Init+0x9c>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_COMM_Pin|LED_FRONT1_Pin|LED_FRONT2_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	21e0      	movs	r1, #224	; 0xe0
 8000338:	4815      	ldr	r0, [pc, #84]	; (8000390 <MX_GPIO_Init+0xa0>)
 800033a:	f001 fbe9 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR1_Pin|MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000344:	4813      	ldr	r0, [pc, #76]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000346:	f001 fbe3 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_COMM_Pin|LED_FRONT1_Pin|LED_FRONT2_Pin;
 800034a:	23e0      	movs	r3, #224	; 0xe0
 800034c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	4619      	mov	r1, r3
 8000360:	480b      	ldr	r0, [pc, #44]	; (8000390 <MX_GPIO_Init+0xa0>)
 8000362:	f001 fa5b 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_DIR1_Pin|MOTOR_DIR2_Pin;
 8000366:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800036a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	2301      	movs	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	2302      	movs	r3, #2
 8000376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	f107 0308 	add.w	r3, r7, #8
 800037c:	4619      	mov	r1, r3
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000380:	f001 fa4c 	bl	800181c <HAL_GPIO_Init>

}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	40010800 	.word	0x40010800
 8000394:	40010c00 	.word	0x40010c00

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039e:	f000 febd 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a2:	f000 f86b 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a6:	f7ff ffa3 	bl	80002f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80003aa:	f7ff ff8b 	bl	80002c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003ae:	f000 fde1 	bl	8000f74 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80003b2:	f000 fcdd 	bl	8000d70 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80003b6:	f000 f8a2 	bl	80004fe <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  JDY09_Init(&JDY09_1, &huart1);
 80003ba:	4927      	ldr	r1, [pc, #156]	; (8000458 <main+0xc0>)
 80003bc:	4827      	ldr	r0, [pc, #156]	; (800045c <main+0xc4>)
 80003be:	f7ff fee9 	bl	8000194 <JDY09_Init>
  Motor_Init(&Motor_1, &htim1, TIM_CHANNEL_2);
 80003c2:	2204      	movs	r2, #4
 80003c4:	4926      	ldr	r1, [pc, #152]	; (8000460 <main+0xc8>)
 80003c6:	4827      	ldr	r0, [pc, #156]	; (8000464 <main+0xcc>)
 80003c8:	f000 f998 	bl	80006fc <Motor_Init>
  Servo_Init(&Servo_1, &htim1, TIM_CHANNEL_1);
 80003cc:	2200      	movs	r2, #0
 80003ce:	4924      	ldr	r1, [pc, #144]	; (8000460 <main+0xc8>)
 80003d0:	4825      	ldr	r0, [pc, #148]	; (8000468 <main+0xd0>)
 80003d2:	f000 f9f3 	bl	80007bc <Servo_Init>

  uint8_t AckMsg[8];
  uint8_t Len;
  Len = sprintf((char*) AckMsg, "OKAY\n");
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4924      	ldr	r1, [pc, #144]	; (800046c <main+0xd4>)
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fb40 	bl	8003a60 <siprintf>
 80003e0:	4603      	mov	r3, r0
 80003e2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// check if there is msg - if yes transfer it to a buffer
		if (JDY09_CheckPendingMessages(&JDY09_1,
 80003e4:	4922      	ldr	r1, [pc, #136]	; (8000470 <main+0xd8>)
 80003e6:	481d      	ldr	r0, [pc, #116]	; (800045c <main+0xc4>)
 80003e8:	f7ff fefb 	bl	80001e2 <JDY09_CheckPendingMessages>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d121      	bne.n	8000436 <main+0x9e>
				TransferBuffer) == JDY09_MESSAGEPENDING)
		{
			//clear pending flag
			JDY09_ClearMsgPendingFlag(&JDY09_1);
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <main+0xc4>)
 80003f4:	f7ff fee8 	bl	80001c8 <JDY09_ClearMsgPendingFlag>

			// fetch data from command message
			Parser_Parse(TransferBuffer, &Servo_1, &Motor_1, &ControlLED);
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <main+0xdc>)
 80003fa:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <main+0xcc>)
 80003fc:	491a      	ldr	r1, [pc, #104]	; (8000468 <main+0xd0>)
 80003fe:	481c      	ldr	r0, [pc, #112]	; (8000470 <main+0xd8>)
 8000400:	f000 fa9a 	bl	8000938 <Parser_Parse>

			// control servo
			Servo_Control(&Servo_1);
 8000404:	4818      	ldr	r0, [pc, #96]	; (8000468 <main+0xd0>)
 8000406:	f000 f992 	bl	800072e <Servo_Control>

			// control motor
			Motor_Control(&Motor_1);
 800040a:	4816      	ldr	r0, [pc, #88]	; (8000464 <main+0xcc>)
 800040c:	f000 f8a0 	bl	8000550 <Motor_Control>

			// control LEDs
			LED_Control(&ControlLED);
 8000410:	4818      	ldr	r0, [pc, #96]	; (8000474 <main+0xdc>)
 8000412:	f000 f9ed 	bl	80007f0 <LED_Control>

			// feed communcation timer
			LastMsgTimer = HAL_GetTick();
 8000416:	f000 fed9 	bl	80011cc <HAL_GetTick>
 800041a:	4603      	mov	r3, r0
 800041c:	4a16      	ldr	r2, [pc, #88]	; (8000478 <main+0xe0>)
 800041e:	6013      	str	r3, [r2, #0]

			// send acknowledge message
			HAL_UART_Transmit(&huart1, AckMsg, Len, 1000);
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	b29a      	uxth	r2, r3
 8000424:	1d39      	adds	r1, r7, #4
 8000426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <main+0xc0>)
 800042c:	f002 fdf8 	bl	8003020 <HAL_UART_Transmit>
			
			// start new IRQ
			JDY09_StartNewIRQRx(&JDY09_1);
 8000430:	480a      	ldr	r0, [pc, #40]	; (800045c <main+0xc4>)
 8000432:	f7ff fe95 	bl	8000160 <JDY09_StartNewIRQRx>

		}

		//if there was no message for 3 seconds, shut down motors and LEDs
		if ((HAL_GetTick() - LastMsgTimer) > 3000)
 8000436:	f000 fec9 	bl	80011cc <HAL_GetTick>
 800043a:	4602      	mov	r2, r0
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <main+0xe0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000446:	4293      	cmp	r3, r2
 8000448:	d9cc      	bls.n	80003e4 <main+0x4c>
		{
			Vehicle_Shutdown(&ControlLED, &Servo_1, &Motor_1);
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <main+0xcc>)
 800044c:	4906      	ldr	r1, [pc, #24]	; (8000468 <main+0xd0>)
 800044e:	4809      	ldr	r0, [pc, #36]	; (8000474 <main+0xdc>)
 8000450:	f000 fa0c 	bl	800086c <Vehicle_Shutdown>
		if (JDY09_CheckPendingMessages(&JDY09_1,
 8000454:	e7c6      	b.n	80003e4 <main+0x4c>
 8000456:	bf00      	nop
 8000458:	2000023c 	.word	0x2000023c
 800045c:	2000009c 	.word	0x2000009c
 8000460:	200001b0 	.word	0x200001b0
 8000464:	200001a0 	.word	0x200001a0
 8000468:	20000154 	.word	0x20000154
 800046c:	08005160 	.word	0x08005160
 8000470:	20000160 	.word	0x20000160
 8000474:	20000150 	.word	0x20000150
 8000478:	2000008c 	.word	0x2000008c

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b090      	sub	sp, #64	; 0x40
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f003 fae0 	bl	8003a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	2302      	movs	r3, #2
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a6:	2310      	movs	r3, #16
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004ae:	2300      	movs	r3, #0
 80004b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fb3f 	bl	8001b40 <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004c8:	f000 f83c 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	230f      	movs	r3, #15
 80004ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	2302      	movs	r3, #2
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fdaa 	bl	8002040 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004f2:	f000 f827 	bl	8000544 <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	; 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2025      	movs	r0, #37	; 0x25
 8000508:	f000 ff41 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800050c:	2025      	movs	r0, #37	; 0x25
 800050e:	f000 ff5a 	bl	80013c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	200f      	movs	r0, #15
 8000518:	f000 ff39 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800051c:	200f      	movs	r0, #15
 800051e:	f000 ff52 	bl	80013c6 <HAL_NVIC_EnableIRQ>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
#if (JDY09_UART_RX_IT == 1)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	// Callback from BT module
	JDY09_RxCpltCallbackIT(&JDY09_1, huart);
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <HAL_UART_RxCpltCallback+0x18>)
 8000534:	f7ff fe9a 	bl	800026c <JDY09_RxCpltCallbackIT>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000009c 	.word	0x2000009c

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <Motor_Control>:
 *
 * @param[*Motor] - handler of Motor struct
 * @return - void
 */
void Motor_Control(Motor_t *Motor)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

	if (Motor->ControlOn == 1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7b5b      	ldrb	r3, [r3, #13]
 800055c:	2b01      	cmp	r3, #1
 800055e:	f040 809d 	bne.w	800069c <Motor_Control+0x14c>
	{
		// check if value is not within deadband limits
		if (Motor->PWMCommandNew > MOTOR_DEADBAND_LOW_LIMIT
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	f244 6250 	movw	r2, #18000	; 0x4650
 800056a:	4293      	cmp	r3, r2
 800056c:	d935      	bls.n	80005da <Motor_Control+0x8a>
				&& Motor->PWMCommandNew < MOTOR_DEADBAND_HIGH_LIMIT)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	f245 52ef 	movw	r2, #21999	; 0x55ef
 8000576:	4293      	cmp	r3, r2
 8000578:	d82f      	bhi.n	80005da <Motor_Control+0x8a>
		{
			// if value is in deadband set PWM to 0%
			__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7b1b      	ldrb	r3, [r3, #12]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d105      	bne.n	800058e <Motor_Control+0x3e>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
 800058c:	e018      	b.n	80005c0 <Motor_Control+0x70>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7b1b      	ldrb	r3, [r3, #12]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d105      	bne.n	80005a2 <Motor_Control+0x52>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	6393      	str	r3, [r2, #56]	; 0x38
 80005a0:	e00e      	b.n	80005c0 <Motor_Control+0x70>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7b1b      	ldrb	r3, [r3, #12]
 80005a6:	2b08      	cmp	r3, #8
 80005a8:	d105      	bne.n	80005b6 <Motor_Control+0x66>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80005b4:	e004      	b.n	80005c0 <Motor_Control+0x70>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
			// turn GPIOs to Motor off
			LN298N_MOTOR_OFF();
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	484b      	ldr	r0, [pc, #300]	; (80006f4 <Motor_Control+0x1a4>)
 80005c8:	f001 faa2 	bl	8001b10 <HAL_GPIO_WritePin>
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4848      	ldr	r0, [pc, #288]	; (80006f4 <Motor_Control+0x1a4>)
 80005d4:	f001 fa9c 	bl	8001b10 <HAL_GPIO_WritePin>
 80005d8:	e084      	b.n	80006e4 <Motor_Control+0x194>
		}
		//check if adc value changed by 1%
		else if (abs(
				Motor->PWMCommandNew
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
						- Motor->PWMCommandLast) > MOTOR_RESOLUTION_1PERCENT)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	885b      	ldrh	r3, [r3, #2]
 80005e4:	1ad3      	subs	r3, r2, r3
		else if (abs(
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bfb8      	it	lt
 80005ea:	425b      	neglt	r3, r3
 80005ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80005f0:	dd78      	ble.n	80006e4 <Motor_Control+0x194>
		{
			// deadbands used to avoid soft movements and noise
			if (Motor->PWMCommandNew < MOTOR_DEADBAND_LOW_LIMIT)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	f244 624f 	movw	r2, #17999	; 0x464f
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d813      	bhi.n	8000626 <Motor_Control+0xd6>
			{
				// write gpio to LN298 for backward movement
				LN298N_MOTOR_BACKWARD();
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	483b      	ldr	r0, [pc, #236]	; (80006f4 <Motor_Control+0x1a4>)
 8000606:	f001 fa83 	bl	8001b10 <HAL_GPIO_WritePin>
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000610:	4838      	ldr	r0, [pc, #224]	; (80006f4 <Motor_Control+0x1a4>)
 8000612:	f001 fa7d 	bl	8001b10 <HAL_GPIO_WritePin>
				// even if joystick is moved backward, PWM value has to be more than high deadband
				// beacuse direction is set by GPIO
				// 40000 - newcommand (max speed = 40000 - 0)
				Motor->MotorSpeed = (MOTOR_PWM_COUNTERPERIOD
						- Motor->PWMCommandNew);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	881a      	ldrh	r2, [r3, #0]
 800061a:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <Motor_Control+0x1a8>)
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	b29a      	uxth	r2, r3
				Motor->MotorSpeed = (MOTOR_PWM_COUNTERPERIOD
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	809a      	strh	r2, [r3, #4]
 8000624:	e00f      	b.n	8000646 <Motor_Control+0xf6>
			}
			// forward movement
			else
			{
				// write gpio for forward movement
				LN298N_MOTOR_FORWARD();
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062c:	4831      	ldr	r0, [pc, #196]	; (80006f4 <Motor_Control+0x1a4>)
 800062e:	f001 fa6f 	bl	8001b10 <HAL_GPIO_WritePin>
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	482e      	ldr	r0, [pc, #184]	; (80006f4 <Motor_Control+0x1a4>)
 800063a:	f001 fa69 	bl	8001b10 <HAL_GPIO_WritePin>
				// value from joystick is equal to speed value for forward movement
				Motor->MotorSpeed = Motor->PWMCommandNew;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	881a      	ldrh	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	809a      	strh	r2, [r3, #4]
			}
			__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel,
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7b1b      	ldrb	r3, [r3, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d106      	bne.n	800065c <Motor_Control+0x10c>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	889a      	ldrh	r2, [r3, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
 800065a:	e043      	b.n	80006e4 <Motor_Control+0x194>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7b1b      	ldrb	r3, [r3, #12]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d107      	bne.n	8000674 <Motor_Control+0x124>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	8899      	ldrh	r1, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	460b      	mov	r3, r1
 8000670:	6393      	str	r3, [r2, #56]	; 0x38
 8000672:	e037      	b.n	80006e4 <Motor_Control+0x194>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7b1b      	ldrb	r3, [r3, #12]
 8000678:	2b08      	cmp	r3, #8
 800067a:	d107      	bne.n	800068c <Motor_Control+0x13c>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	8899      	ldrh	r1, [r3, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	460b      	mov	r3, r1
 8000688:	63d3      	str	r3, [r2, #60]	; 0x3c
 800068a:	e02b      	b.n	80006e4 <Motor_Control+0x194>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	8899      	ldrh	r1, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	460b      	mov	r3, r1
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	e023      	b.n	80006e4 <Motor_Control+0x194>
		}
	}
	// if button is not pressed turn off engine and return
	else
	{
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7b1b      	ldrb	r3, [r3, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d105      	bne.n	80006b0 <Motor_Control+0x160>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80006ae:	e01d      	b.n	80006ec <Motor_Control+0x19c>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7b1b      	ldrb	r3, [r3, #12]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d105      	bne.n	80006c4 <Motor_Control+0x174>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	6393      	str	r3, [r2, #56]	; 0x38
		return;
 80006c2:	e013      	b.n	80006ec <Motor_Control+0x19c>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7b1b      	ldrb	r3, [r3, #12]
 80006c8:	2b08      	cmp	r3, #8
 80006ca:	d105      	bne.n	80006d8 <Motor_Control+0x188>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	63d3      	str	r3, [r2, #60]	; 0x3c
		return;
 80006d6:	e009      	b.n	80006ec <Motor_Control+0x19c>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
		return;
 80006e2:	e003      	b.n	80006ec <Motor_Control+0x19c>
	}
	// save value for next cycle to compare
	Motor->PWMCommandLast = Motor->PWMCommandNew;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	881a      	ldrh	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	805a      	strh	r2, [r3, #2]
}
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	ffff9c40 	.word	0xffff9c40

080006fc <Motor_Init>:
 * @param[PWMTimerChannel] - channel definition : TIM_CHANNEL_1
 * @return - void
 */
void Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *PWMTimer,
		uint8_t PWMTimerChannel)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]
	// assign parameters to strcut
	Motor->PWMTimer = PWMTimer;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	609a      	str	r2, [r3, #8]
	Motor->PWMTimerChannel = PWMTimerChannel;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	731a      	strb	r2, [r3, #12]

	// start PWM singal
	HAL_TIM_PWM_Start(Motor->PWMTimer, Motor->PWMTimerChannel);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	689a      	ldr	r2, [r3, #8]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	7b1b      	ldrb	r3, [r3, #12]
 800071e:	4619      	mov	r1, r3
 8000720:	4610      	mov	r0, r2
 8000722:	f001 fecf 	bl	80024c4 <HAL_TIM_PWM_Start>
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <Servo_Control>:
 *
 * @param[*Servo] - handler of Motor struct
 * @return - void
 */
void Servo_Control(Servo_t *Servo)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	// check if button is clicked
	if (Servo->ContorlOn)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7a5b      	ldrb	r3, [r3, #9]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d039      	beq.n	80007b2 <Servo_Control+0x84>
	{
		// move only when value changes by 1 degree
		if (abs(
				Servo->PWMCommandNew
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
						- Servo->PWMCommandLast) > SERVO_RESOLUTION_1DEGREE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	885b      	ldrh	r3, [r3, #2]
 8000748:	1ad3      	subs	r3, r2, r3
		if (abs(
 800074a:	2b00      	cmp	r3, #0
 800074c:	bfb8      	it	lt
 800074e:	425b      	neglt	r3, r3
 8000750:	2b16      	cmp	r3, #22
 8000752:	dd29      	ble.n	80007a8 <Servo_Control+0x7a>
		{
			// write new value to PWM
			__HAL_TIM_SET_COMPARE(Servo->PWMTimer, Servo->PWMTimerChannel,
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7a1b      	ldrb	r3, [r3, #8]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d106      	bne.n	800076a <Servo_Control+0x3c>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
 8000768:	e01e      	b.n	80007a8 <Servo_Control+0x7a>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a1b      	ldrb	r3, [r3, #8]
 800076e:	2b04      	cmp	r3, #4
 8000770:	d107      	bne.n	8000782 <Servo_Control+0x54>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	8819      	ldrh	r1, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	460b      	mov	r3, r1
 800077e:	6393      	str	r3, [r2, #56]	; 0x38
 8000780:	e012      	b.n	80007a8 <Servo_Control+0x7a>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7a1b      	ldrb	r3, [r3, #8]
 8000786:	2b08      	cmp	r3, #8
 8000788:	d107      	bne.n	800079a <Servo_Control+0x6c>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	8819      	ldrh	r1, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	460b      	mov	r3, r1
 8000796:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000798:	e006      	b.n	80007a8 <Servo_Control+0x7a>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	8819      	ldrh	r1, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	460b      	mov	r3, r1
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
		// if button is not pressed return
		return;
	}

	// save value for next cycle to compare
	Servo->PWMCommandLast = Servo->PWMCommandNew;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	805a      	strh	r2, [r3, #2]
 80007b0:	e000      	b.n	80007b4 <Servo_Control+0x86>
		return;
 80007b2:	bf00      	nop
}
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <Servo_Init>:
 * @param[PWMTimerChannel] - channel definition : TIM_CHANNEL_1
 * @return - void
 */
void Servo_Init(Servo_t *Servo, TIM_HandleTypeDef *PWMTimer,
		uint8_t PWMTimerChannel)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	71fb      	strb	r3, [r7, #7]
	// assign parameters to strcut
	Servo->PWMTimer = PWMTimer;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	605a      	str	r2, [r3, #4]
	Servo->PWMTimerChannel = PWMTimerChannel;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	721a      	strb	r2, [r3, #8]

	// start PWM singal
	HAL_TIM_PWM_Start(Servo->PWMTimer, Servo->PWMTimerChannel);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	4619      	mov	r1, r3
 80007e0:	4610      	mov	r0, r2
 80007e2:	f001 fe6f 	bl	80024c4 <HAL_TIM_PWM_Start>
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <LED_Control>:
 *
 * @param[*VehicleLED] - handler of LED struct
 * @return - void
 */
void LED_Control(VehicleLED_t *VehicleLED)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	// led COMM
	if (VehicleLED->ControlWord & (0x01 << LED_COMM_OFFSET))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <LED_Control+0x20>
	{
		HAL_GPIO_WritePin(LED_COMM_GPIO_PORT, LED_COMM_PIN, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2120      	movs	r1, #32
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <LED_Control+0x78>)
 800080a:	f001 f981 	bl	8001b10 <HAL_GPIO_WritePin>
 800080e:	e004      	b.n	800081a <LED_Control+0x2a>

	}
	else
	{
		HAL_GPIO_WritePin(LED_COMM_GPIO_PORT, LED_COMM_PIN, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <LED_Control+0x78>)
 8000816:	f001 f97b 	bl	8001b10 <HAL_GPIO_WritePin>
	}

	// led FRONT1
	if (VehicleLED->ControlWord & (0x01 << LED_FRONT1_OFFSET))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <LED_Control+0x42>
	{
		HAL_GPIO_WritePin(LED_FRONT1_GPIO_PORT, LED_FRONT1_PIN, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <LED_Control+0x78>)
 800082c:	f001 f970 	bl	8001b10 <HAL_GPIO_WritePin>
 8000830:	e004      	b.n	800083c <LED_Control+0x4c>
	}
	else
	{
		HAL_GPIO_WritePin(LED_FRONT1_GPIO_PORT, LED_FRONT1_PIN, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <LED_Control+0x78>)
 8000838:	f001 f96a 	bl	8001b10 <HAL_GPIO_WritePin>
	}

	// led FRONT2
	if (VehicleLED->ControlWord & (0x01 << LED_FRONT2_OFFSET))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <LED_Control+0x64>
	{
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <LED_Control+0x78>)
 800084e:	f001 f95f 	bl	8001b10 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_RESET);
	}
}
 8000852:	e004      	b.n	800085e <LED_Control+0x6e>
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <LED_Control+0x78>)
 800085a:	f001 f959 	bl	8001b10 <HAL_GPIO_WritePin>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010800 	.word	0x40010800

0800086c <Vehicle_Shutdown>:

void Vehicle_Shutdown(VehicleLED_t *VehicleLED, Servo_t *Servo, Motor_t *Motor)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]

		// turn off LEDs
		HAL_GPIO_WritePin(LED_COMM_GPIO_PORT, LED_COMM_PIN, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2120      	movs	r1, #32
 800087c:	482d      	ldr	r0, [pc, #180]	; (8000934 <Vehicle_Shutdown+0xc8>)
 800087e:	f001 f947 	bl	8001b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_FRONT1_GPIO_PORT, LED_FRONT1_PIN, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	482b      	ldr	r0, [pc, #172]	; (8000934 <Vehicle_Shutdown+0xc8>)
 8000888:	f001 f942 	bl	8001b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	4828      	ldr	r0, [pc, #160]	; (8000934 <Vehicle_Shutdown+0xc8>)
 8000892:	f001 f93d 	bl	8001b10 <HAL_GPIO_WritePin>

		//set servo to middle position
		__HAL_TIM_SET_COMPARE(Servo->PWMTimer, Servo->PWMTimerChannel,
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	7a1b      	ldrb	r3, [r3, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d106      	bne.n	80008ac <Vehicle_Shutdown+0x40>
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f640 32a4 	movw	r2, #2980	; 0xba4
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
 80008aa:	e01b      	b.n	80008e4 <Vehicle_Shutdown+0x78>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	7a1b      	ldrb	r3, [r3, #8]
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d106      	bne.n	80008c2 <Vehicle_Shutdown+0x56>
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	f640 33a4 	movw	r3, #2980	; 0xba4
 80008be:	6393      	str	r3, [r2, #56]	; 0x38
 80008c0:	e010      	b.n	80008e4 <Vehicle_Shutdown+0x78>
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	7a1b      	ldrb	r3, [r3, #8]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d106      	bne.n	80008d8 <Vehicle_Shutdown+0x6c>
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	f640 33a4 	movw	r3, #2980	; 0xba4
 80008d4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008d6:	e005      	b.n	80008e4 <Vehicle_Shutdown+0x78>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	f640 33a4 	movw	r3, #2980	; 0xba4
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
				(SERVO_LOW_LIMIT + SERVO_HIGH_LIMIT)/2);

		//turn off motor
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7b1b      	ldrb	r3, [r3, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <Vehicle_Shutdown+0x8c>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34

}
 80008f6:	e018      	b.n	800092a <Vehicle_Shutdown+0xbe>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7b1b      	ldrb	r3, [r3, #12]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d105      	bne.n	800090c <Vehicle_Shutdown+0xa0>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	6393      	str	r3, [r2, #56]	; 0x38
}
 800090a:	e00e      	b.n	800092a <Vehicle_Shutdown+0xbe>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7b1b      	ldrb	r3, [r3, #12]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d105      	bne.n	8000920 <Vehicle_Shutdown+0xb4>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	2300      	movs	r3, #0
 800091c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800091e:	e004      	b.n	800092a <Vehicle_Shutdown+0xbe>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	2300      	movs	r3, #0
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010800 	.word	0x40010800

08000938 <Parser_Parse>:
/*
 * @ function parse message and start command procedures
 */
uint8_t Parser_Parse(uint8_t *ParseBuffer, Servo_t *ServoX, Motor_t *MotorY,
		VehicleLED_t *VehicleLEDs)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
	uint8_t *ParsePointer;

	ParsePointer = (uint8_t*)(strtok((char*)ParseBuffer, ";"));
 8000946:	4939      	ldr	r1, [pc, #228]	; (8000a2c <Parser_Parse+0xf4>)
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f003 f8a9 	bl	8003aa0 <strtok>
 800094e:	6178      	str	r0, [r7, #20]

	if(strcmp((char*)ParsePointer,"ACK") == 0)
 8000950:	4937      	ldr	r1, [pc, #220]	; (8000a30 <Parser_Parse+0xf8>)
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f7ff fbfa 	bl	800014c <strcmp>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d160      	bne.n	8000a20 <Parser_Parse+0xe8>
	{
		// light up green led
		VehicleLEDs->ControlWord |= (0x01 << LED_COMM_OFFSET);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	701a      	strb	r2, [r3, #0]
		// write servo position
		ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 800096c:	492f      	ldr	r1, [pc, #188]	; (8000a2c <Parser_Parse+0xf4>)
 800096e:	2000      	movs	r0, #0
 8000970:	f003 f896 	bl	8003aa0 <strtok>
 8000974:	6178      	str	r0, [r7, #20]
		ServoX->PWMCommandNew = atoi((const char*) ParsePointer);
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f003 f83c 	bl	80039f4 <atoi>
 800097c:	4603      	mov	r3, r0
 800097e:	b29a      	uxth	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	801a      	strh	r2, [r3, #0]

		// write motor speed
		ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 8000984:	4929      	ldr	r1, [pc, #164]	; (8000a2c <Parser_Parse+0xf4>)
 8000986:	2000      	movs	r0, #0
 8000988:	f003 f88a 	bl	8003aa0 <strtok>
 800098c:	6178      	str	r0, [r7, #20]
		MotorY->PWMCommandNew = atoi((const char*) ParsePointer);
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f003 f830 	bl	80039f4 <atoi>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	801a      	strh	r2, [r3, #0]

		ParsePointer = (uint8_t*) (strtok(NULL, ";"));
 800099c:	4923      	ldr	r1, [pc, #140]	; (8000a2c <Parser_Parse+0xf4>)
 800099e:	2000      	movs	r0, #0
 80009a0:	f003 f87e 	bl	8003aa0 <strtok>
 80009a4:	6178      	str	r0, [r7, #20]
		if (strcmp((char*) ParsePointer, "1") == 0)
 80009a6:	4923      	ldr	r1, [pc, #140]	; (8000a34 <Parser_Parse+0xfc>)
 80009a8:	6978      	ldr	r0, [r7, #20]
 80009aa:	f7ff fbcf 	bl	800014c <strcmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10e      	bne.n	80009d2 <Parser_Parse+0x9a>
		{
			// set lights on
			VehicleLEDs->ControlWord |= (0x01 << LED_FRONT1_OFFSET);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	701a      	strb	r2, [r3, #0]
			VehicleLEDs->ControlWord |= (0x01 << LED_FRONT2_OFFSET);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	e00d      	b.n	80009ee <Parser_Parse+0xb6>
		}
		else
		{
			// reset lights
			VehicleLEDs->ControlWord &= ~(0x01 << LED_FRONT1_OFFSET);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	f023 0302 	bic.w	r3, r3, #2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	701a      	strb	r2, [r3, #0]
			VehicleLEDs->ControlWord &= ~(0x01 << LED_FRONT2_OFFSET);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f023 0304 	bic.w	r3, r3, #4
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	701a      	strb	r2, [r3, #0]
		}

		// check if button motor on is pressed
		// if yes allow movement of servo and motor
		ParsePointer = (uint8_t*) (strtok(NULL, ";"));
 80009ee:	490f      	ldr	r1, [pc, #60]	; (8000a2c <Parser_Parse+0xf4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f003 f855 	bl	8003aa0 <strtok>
 80009f6:	6178      	str	r0, [r7, #20]
		if (strcmp((char*) ParsePointer, "1") == 0)
 80009f8:	490e      	ldr	r1, [pc, #56]	; (8000a34 <Parser_Parse+0xfc>)
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff fba6 	bl	800014c <strcmp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d106      	bne.n	8000a14 <Parser_Parse+0xdc>
		{
			ServoX->ContorlOn = 1;
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	725a      	strb	r2, [r3, #9]
			MotorY->ControlOn = 1;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	735a      	strb	r2, [r3, #13]
 8000a12:	e005      	b.n	8000a20 <Parser_Parse+0xe8>
		}
		else
		{
			ServoX->ContorlOn = 0;
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	2200      	movs	r2, #0
 8000a18:	725a      	strb	r2, [r3, #9]
			MotorY->ControlOn = 0;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	735a      	strb	r2, [r3, #13]
		}
	}

	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08005168 	.word	0x08005168
 8000a30:	0800516c 	.word	0x0800516c
 8000a34:	08005170 	.word	0x08005170

08000a38 <RB_Read>:
 */

#include "ringbuffer.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d101      	bne.n	8000a56 <RB_Read+0x1e>
	{
		return RB_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e017      	b.n	8000a86 <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	5c9a      	ldrb	r2, [r3, r2]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	425a      	negs	r2, r3
 8000a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000a78:	bf58      	it	pl
 8000a7a:	4253      	negpl	r3, r2
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	425a      	negs	r2, r3
 8000aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000aae:	bf58      	it	pl
 8000ab0:	4253      	negpl	r3, r2
 8000ab2:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000aba:	89fa      	ldrh	r2, [r7, #14]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d101      	bne.n	8000ac4 <RB_Write+0x34>
	{
		return RB_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e00b      	b.n	8000adc <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000aca:	4619      	mov	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	89fa      	ldrh	r2, [r7, #14]
 8000ad6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_MspInit+0x60>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_MspInit+0x60>)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 faf9 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <DMA1_Channel5_IRQHandler+0x10>)
 8000bc2:	f000 fd25 	bl	8001610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001f8 	.word	0x200001f8

08000bd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART1_IRQHandler+0x10>)
 8000bd6:	f002 fae5 	bl	80031a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000023c 	.word	0x2000023c

08000be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	return 1;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <_kill>:

int _kill(int pid, int sig)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bfc:	f002 fefe 	bl	80039fc <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2216      	movs	r2, #22
 8000c04:	601a      	str	r2, [r3, #0]
	return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_exit>:

void _exit (int status)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffe7 	bl	8000bf2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c24:	e7fe      	b.n	8000c24 <_exit+0x12>

08000c26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e00a      	b.n	8000c4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c38:	f3af 8000 	nop.w
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	60ba      	str	r2, [r7, #8]
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbf0      	blt.n	8000c38 <_read+0x12>
	}

return len;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e009      	b.n	8000c86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	60ba      	str	r2, [r7, #8]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbf1      	blt.n	8000c72 <_write+0x12>
	}
	return len;
 8000c8e:	687b      	ldr	r3, [r7, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_close>:

int _close(int file)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	return -1;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <_isatty>:

int _isatty(int file)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f002 fe68 	bl	80039fc <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20002800 	.word	0x20002800
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000090 	.word	0x20000090
 8000d60:	20000298 	.word	0x20000298

08000d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b096      	sub	sp, #88	; 0x58
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2220      	movs	r2, #32
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 fe51 	bl	8003a50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dae:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000db0:	4a46      	ldr	r2, [pc, #280]	; (8000ecc <MX_TIM1_Init+0x15c>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000db4:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000db6:	221f      	movs	r2, #31
 8000db8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8000dc0:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000dc2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dce:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dda:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000ddc:	f001 faca 	bl	8002374 <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000de6:	f7ff fbad 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df4:	4619      	mov	r1, r3
 8000df6:	4834      	ldr	r0, [pc, #208]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000df8:	f001 fcbe 	bl	8002778 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e02:	f7ff fb9f 	bl	8000544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000e08:	f001 fb03 	bl	8002412 <HAL_TIM_PWM_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e12:	f7ff fb97 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e22:	4619      	mov	r1, r3
 8000e24:	4828      	ldr	r0, [pc, #160]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000e26:	f002 f805 	bl	8002e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e30:	f7ff fb88 	bl	8000544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e34:	2360      	movs	r3, #96	; 0x60
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 8000e38:	23c8      	movs	r3, #200	; 0xc8
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e40:	2300      	movs	r3, #0
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000e5a:	f001 fbcf 	bl	80025fc <HAL_TIM_PWM_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e64:	f7ff fb6e 	bl	8000544 <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 8000e68:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	2204      	movs	r2, #4
 8000e74:	4619      	mov	r1, r3
 8000e76:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000e78:	f001 fbc0 	bl	80025fc <HAL_TIM_PWM_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e82:	f7ff fb5f 	bl	8000544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000eaa:	f002 f81b 	bl	8002ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000eb4:	f7ff fb46 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_TIM1_Init+0x158>)
 8000eba:	f000 f827 	bl	8000f0c <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3758      	adds	r7, #88	; 0x58
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001b0 	.word	0x200001b0
 8000ecc:	40012c00 	.word	0x40012c00

08000ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_TIM_Base_MspInit+0x34>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10b      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_TIM_Base_MspInit+0x38>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_TIM_MspPostInit+0x5c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d118      	bne.n	8000f5e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_TIM_MspPostInit+0x60>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_TIM_MspPostInit+0x60>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_TIM_MspPostInit+0x60>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_TIM_MspPostInit+0x64>)
 8000f5a:	f000 fc5f 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40012c00 	.word	0x40012c00
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800

08000f74 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART1_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f80:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fac:	f001 ffeb 	bl	8002f86 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f7ff fac5 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000023c 	.word	0x2000023c
 8000fc4:	40013800 	.word	0x40013800

08000fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <HAL_UART_MspInit+0xf0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d163      	bne.n	80010b0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <HAL_UART_MspInit+0xf4>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a33      	ldr	r2, [pc, #204]	; (80010bc <HAL_UART_MspInit+0xf4>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <HAL_UART_MspInit+0xf4>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <HAL_UART_MspInit+0xf4>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <HAL_UART_MspInit+0xf4>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_UART_MspInit+0xf4>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4825      	ldr	r0, [pc, #148]	; (80010c0 <HAL_UART_MspInit+0xf8>)
 800102c:	f000 fbf6 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	481f      	ldr	r0, [pc, #124]	; (80010c0 <HAL_UART_MspInit+0xf8>)
 8001044:	f000 fbea 	bl	800181c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <HAL_UART_MspInit+0xfc>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_UART_MspInit+0xfc>)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UART_MspInit+0x100>)
 8001066:	4a19      	ldr	r2, [pc, #100]	; (80010cc <HAL_UART_MspInit+0x104>)
 8001068:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_UART_MspInit+0x100>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UART_MspInit+0x100>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_UART_MspInit+0x100>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_UART_MspInit+0x100>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_UART_MspInit+0x100>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_UART_MspInit+0x100>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_UART_MspInit+0x100>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <HAL_UART_MspInit+0x100>)
 8001096:	f000 f9b1 	bl	80013fc <HAL_DMA_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 80010a0:	f7ff fa50 	bl	8000544 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_UART_MspInit+0x100>)
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_UART_MspInit+0x100>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40010000 	.word	0x40010000
 80010c8:	200001f8 	.word	0x200001f8
 80010cc:	40020058 	.word	0x40020058

080010d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010f6:	f7ff fe35 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 fc85 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fe:	f7ff f94b 	bl	8000398 <main>
  bx lr
 8001102:	4770      	bx	lr
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800110c:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 8001110:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001114:	20000294 	.word	0x20000294

08001118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f923 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fce6 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f93b 	bl	80013e2 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f903 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x20>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x20>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000280 	.word	0x20000280

080011cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <HAL_GetTick+0x10>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000280 	.word	0x20000280

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4906      	ldr	r1, [pc, #24]	; (8001278 <__NVIC_EnableIRQ+0x34>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff90 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff2d 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff42 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff90 	bl	80012d0 <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5f 	bl	800127c <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff35 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffa2 	bl	8001334 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e043      	b.n	800149a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_DMA_Init+0xa8>)
 800141a:	4413      	add	r3, r2
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <HAL_DMA_Init+0xac>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	009a      	lsls	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <HAL_DMA_Init+0xb0>)
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001446:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800144a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	bffdfff8 	.word	0xbffdfff8
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	40020000 	.word	0x40020000

080014b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d008      	beq.n	80014d8 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e020      	b.n	800151a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020e 	bic.w	r2, r2, #14
 80014e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001536:	2b02      	cmp	r3, #2
 8001538:	d005      	beq.n	8001546 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2204      	movs	r2, #4
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e051      	b.n	80015ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 020e 	bic.w	r2, r2, #14
 8001554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0201 	bic.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <HAL_DMA_Abort_IT+0xd0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d029      	beq.n	80015c4 <HAL_DMA_Abort_IT+0xa0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <HAL_DMA_Abort_IT+0xd4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d022      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x9c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <HAL_DMA_Abort_IT+0xd8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d01a      	beq.n	80015ba <HAL_DMA_Abort_IT+0x96>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_DMA_Abort_IT+0xdc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d012      	beq.n	80015b4 <HAL_DMA_Abort_IT+0x90>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_DMA_Abort_IT+0xe0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00a      	beq.n	80015ae <HAL_DMA_Abort_IT+0x8a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <HAL_DMA_Abort_IT+0xe4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <HAL_DMA_Abort_IT+0x84>
 80015a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015a6:	e00e      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ac:	e00b      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b2:	e008      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	e005      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	e002      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015c0:	2310      	movs	r3, #16
 80015c2:	e000      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015c4:	2301      	movs	r3, #1
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_DMA_Abort_IT+0xe8>)
 80015c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	4798      	blx	r3
    } 
  }
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40020008 	.word	0x40020008
 80015f8:	4002001c 	.word	0x4002001c
 80015fc:	40020030 	.word	0x40020030
 8001600:	40020044 	.word	0x40020044
 8001604:	40020058 	.word	0x40020058
 8001608:	4002006c 	.word	0x4002006c
 800160c:	40020000 	.word	0x40020000

08001610 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	2204      	movs	r2, #4
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d04f      	beq.n	80016d8 <HAL_DMA_IRQHandler+0xc8>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d04a      	beq.n	80016d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0204 	bic.w	r2, r2, #4
 800165e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a66      	ldr	r2, [pc, #408]	; (8001800 <HAL_DMA_IRQHandler+0x1f0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d029      	beq.n	80016be <HAL_DMA_IRQHandler+0xae>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a65      	ldr	r2, [pc, #404]	; (8001804 <HAL_DMA_IRQHandler+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <HAL_DMA_IRQHandler+0xaa>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a63      	ldr	r2, [pc, #396]	; (8001808 <HAL_DMA_IRQHandler+0x1f8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01a      	beq.n	80016b4 <HAL_DMA_IRQHandler+0xa4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a62      	ldr	r2, [pc, #392]	; (800180c <HAL_DMA_IRQHandler+0x1fc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d012      	beq.n	80016ae <HAL_DMA_IRQHandler+0x9e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a60      	ldr	r2, [pc, #384]	; (8001810 <HAL_DMA_IRQHandler+0x200>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00a      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x98>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a5f      	ldr	r2, [pc, #380]	; (8001814 <HAL_DMA_IRQHandler+0x204>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d102      	bne.n	80016a2 <HAL_DMA_IRQHandler+0x92>
 800169c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a0:	e00e      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016a6:	e00b      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016ac:	e008      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b2:	e005      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b8:	e002      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	e000      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016be:	2304      	movs	r3, #4
 80016c0:	4a55      	ldr	r2, [pc, #340]	; (8001818 <HAL_DMA_IRQHandler+0x208>)
 80016c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8094 	beq.w	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016d6:	e08e      	b.n	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	2202      	movs	r2, #2
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d056      	beq.n	8001796 <HAL_DMA_IRQHandler+0x186>
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d051      	beq.n	8001796 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10b      	bne.n	8001718 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020a 	bic.w	r2, r2, #10
 800170e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a38      	ldr	r2, [pc, #224]	; (8001800 <HAL_DMA_IRQHandler+0x1f0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d029      	beq.n	8001776 <HAL_DMA_IRQHandler+0x166>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a37      	ldr	r2, [pc, #220]	; (8001804 <HAL_DMA_IRQHandler+0x1f4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d022      	beq.n	8001772 <HAL_DMA_IRQHandler+0x162>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_DMA_IRQHandler+0x1f8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0x15c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a34      	ldr	r2, [pc, #208]	; (800180c <HAL_DMA_IRQHandler+0x1fc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d012      	beq.n	8001766 <HAL_DMA_IRQHandler+0x156>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_DMA_IRQHandler+0x200>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00a      	beq.n	8001760 <HAL_DMA_IRQHandler+0x150>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_DMA_IRQHandler+0x204>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <HAL_DMA_IRQHandler+0x14a>
 8001754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001758:	e00e      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 800175a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175e:	e00b      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001764:	e008      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	e005      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 800176c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001770:	e002      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001772:	2320      	movs	r3, #32
 8001774:	e000      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001776:	2302      	movs	r3, #2
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_DMA_IRQHandler+0x208>)
 800177a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d034      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001794:	e02f      	b.n	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2208      	movs	r2, #8
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d028      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x1e8>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020e 	bic.w	r2, r2, #14
 80017be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
    }
  }
  return;
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
}
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020008 	.word	0x40020008
 8001804:	4002001c 	.word	0x4002001c
 8001808:	40020030 	.word	0x40020030
 800180c:	40020044 	.word	0x40020044
 8001810:	40020058 	.word	0x40020058
 8001814:	4002006c 	.word	0x4002006c
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b08b      	sub	sp, #44	; 0x2c
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	e148      	b.n	8001ac2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001830:	2201      	movs	r2, #1
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	429a      	cmp	r2, r3
 800184a:	f040 8137 	bne.w	8001abc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4aa3      	ldr	r2, [pc, #652]	; (8001ae0 <HAL_GPIO_Init+0x2c4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d05e      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001858:	4aa1      	ldr	r2, [pc, #644]	; (8001ae0 <HAL_GPIO_Init+0x2c4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d875      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 800185e:	4aa1      	ldr	r2, [pc, #644]	; (8001ae4 <HAL_GPIO_Init+0x2c8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d058      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001864:	4a9f      	ldr	r2, [pc, #636]	; (8001ae4 <HAL_GPIO_Init+0x2c8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d86f      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 800186a:	4a9f      	ldr	r2, [pc, #636]	; (8001ae8 <HAL_GPIO_Init+0x2cc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d052      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001870:	4a9d      	ldr	r2, [pc, #628]	; (8001ae8 <HAL_GPIO_Init+0x2cc>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d869      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 8001876:	4a9d      	ldr	r2, [pc, #628]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d04c      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 800187c:	4a9b      	ldr	r2, [pc, #620]	; (8001aec <HAL_GPIO_Init+0x2d0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d863      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 8001882:	4a9b      	ldr	r2, [pc, #620]	; (8001af0 <HAL_GPIO_Init+0x2d4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d046      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
 8001888:	4a99      	ldr	r2, [pc, #612]	; (8001af0 <HAL_GPIO_Init+0x2d4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d85d      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 800188e:	2b12      	cmp	r3, #18
 8001890:	d82a      	bhi.n	80018e8 <HAL_GPIO_Init+0xcc>
 8001892:	2b12      	cmp	r3, #18
 8001894:	d859      	bhi.n	800194a <HAL_GPIO_Init+0x12e>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <HAL_GPIO_Init+0x80>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	08001917 	.word	0x08001917
 80018a0:	080018f1 	.word	0x080018f1
 80018a4:	08001903 	.word	0x08001903
 80018a8:	08001945 	.word	0x08001945
 80018ac:	0800194b 	.word	0x0800194b
 80018b0:	0800194b 	.word	0x0800194b
 80018b4:	0800194b 	.word	0x0800194b
 80018b8:	0800194b 	.word	0x0800194b
 80018bc:	0800194b 	.word	0x0800194b
 80018c0:	0800194b 	.word	0x0800194b
 80018c4:	0800194b 	.word	0x0800194b
 80018c8:	0800194b 	.word	0x0800194b
 80018cc:	0800194b 	.word	0x0800194b
 80018d0:	0800194b 	.word	0x0800194b
 80018d4:	0800194b 	.word	0x0800194b
 80018d8:	0800194b 	.word	0x0800194b
 80018dc:	0800194b 	.word	0x0800194b
 80018e0:	080018f9 	.word	0x080018f9
 80018e4:	0800190d 	.word	0x0800190d
 80018e8:	4a82      	ldr	r2, [pc, #520]	; (8001af4 <HAL_GPIO_Init+0x2d8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ee:	e02c      	b.n	800194a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e029      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	3304      	adds	r3, #4
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e024      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	3308      	adds	r3, #8
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e01f      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	330c      	adds	r3, #12
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e01a      	b.n	800194c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800191e:	2304      	movs	r3, #4
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e013      	b.n	800194c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800192c:	2308      	movs	r3, #8
 800192e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	611a      	str	r2, [r3, #16]
          break;
 8001936:	e009      	b.n	800194c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	615a      	str	r2, [r3, #20]
          break;
 8001942:	e003      	b.n	800194c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x130>
          break;
 800194a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2bff      	cmp	r3, #255	; 0xff
 8001950:	d801      	bhi.n	8001956 <HAL_GPIO_Init+0x13a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	e001      	b.n	800195a <HAL_GPIO_Init+0x13e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3304      	adds	r3, #4
 800195a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2bff      	cmp	r3, #255	; 0xff
 8001960:	d802      	bhi.n	8001968 <HAL_GPIO_Init+0x14c>
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0x152>
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3b08      	subs	r3, #8
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	210f      	movs	r1, #15
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	6a39      	ldr	r1, [r7, #32]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8090 	beq.w	8001abc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800199c:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b4:	4a51      	ldr	r2, [pc, #324]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00d      	beq.n	80019fc <HAL_GPIO_Init+0x1e0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a48      	ldr	r2, [pc, #288]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_Init+0x1dc>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a47      	ldr	r2, [pc, #284]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_GPIO_Init+0x1d8>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e004      	b.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019f4:	2303      	movs	r3, #3
 80019f6:	e002      	b.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019fc:	2300      	movs	r3, #0
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4093      	lsls	r3, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a0e:	493b      	ldr	r1, [pc, #236]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4937      	ldr	r1, [pc, #220]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4933      	ldr	r1, [pc, #204]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a50:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	492d      	ldr	r1, [pc, #180]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4929      	ldr	r1, [pc, #164]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	4923      	ldr	r1, [pc, #140]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	491f      	ldr	r1, [pc, #124]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4919      	ldr	r1, [pc, #100]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4915      	ldr	r1, [pc, #84]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	3301      	adds	r3, #1
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f47f aeaf 	bne.w	8001830 <HAL_GPIO_Init+0x14>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	372c      	adds	r7, #44	; 0x2c
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	10320000 	.word	0x10320000
 8001ae4:	10310000 	.word	0x10310000
 8001ae8:	10220000 	.word	0x10220000
 8001aec:	10210000 	.word	0x10210000
 8001af0:	10120000 	.word	0x10120000
 8001af4:	10110000 	.word	0x10110000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e26c      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d112      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x12c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d168      	bne.n	8001c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e246      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x76>
 8001ba8:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a7f      	ldr	r2, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e02e      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xbc>
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a71      	ldr	r2, [pc, #452]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6e      	ldr	r2, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a67      	ldr	r2, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fad6 	bl	80011cc <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fad2 	bl	80011cc <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1fa      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe4>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fac2 	bl	80011cc <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fabe 	bl	80011cc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1e6      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x10c>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1ba      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4939      	ldr	r1, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	e03a      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fa77 	bl	80011cc <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fa73 	bl	80011cc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e19b      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fa56 	bl	80011cc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff fa52 	bl	80011cc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e17a      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d019      	beq.n	8001d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fa36 	bl	80011cc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff fa32 	bl	80011cc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e15a      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 fad8 	bl	8002338 <RCC_Delay>
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fa1c 	bl	80011cc <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fa18 	bl	80011cc <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d908      	bls.n	8001db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e140      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	42420000 	.word	0x42420000
 8001db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e9      	bne.n	8001d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a6 	beq.w	8001f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b97      	ldr	r3, [pc, #604]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b94      	ldr	r3, [pc, #592]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a93      	ldr	r2, [pc, #588]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b91      	ldr	r3, [pc, #580]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b8e      	ldr	r3, [pc, #568]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8a      	ldr	r2, [pc, #552]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7ff f9d9 	bl	80011cc <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7ff f9d5 	bl	80011cc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0fd      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x312>
 8001e44:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e02d      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x334>
 8001e5a:	4b76      	ldr	r3, [pc, #472]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a75      	ldr	r2, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a72      	ldr	r2, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	e01c      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x356>
 8001e7c:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a6c      	ldr	r2, [pc, #432]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a66      	ldr	r2, [pc, #408]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a63      	ldr	r2, [pc, #396]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff f989 	bl	80011cc <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7ff f985 	bl	80011cc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0ab      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ee      	beq.n	8001ebe <HAL_RCC_OscConfig+0x37e>
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f973 	bl	80011cc <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7ff f96f 	bl	80011cc <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e095      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ee      	bne.n	8001eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a47      	ldr	r2, [pc, #284]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8081 	beq.w	800202a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d061      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d146      	bne.n	8001fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff f943 	bl	80011cc <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff f93f 	bl	80011cc <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e067      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	492d      	ldr	r1, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a19      	ldr	r1, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	430b      	orrs	r3, r1
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f913 	bl	80011cc <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff f90f 	bl	80011cc <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e037      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x46a>
 8001fc8:	e02f      	b.n	800202a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f8fc 	bl	80011cc <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff f8f8 	bl	80011cc <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e020      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x498>
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e013      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	42420060 	.word	0x42420060

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4965      	ldr	r1, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff f84c 	bl	80011cc <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f848 	bl	80011cc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe ffaa 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	08005184 	.word	0x08005184
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b490      	push	{r4, r7}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800221c:	1d3c      	adds	r4, r7, #4
 800221e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002224:	f240 2301 	movw	r3, #513	; 0x201
 8002228:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x46>
 8002252:	e02d      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	e02d      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002266:	4413      	add	r3, r2
 8002268:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800226c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c5b      	lsrs	r3, r3, #17
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002286:	4413      	add	r3, r2
 8002288:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800228c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002292:	fb02 f203 	mul.w	r2, r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	e004      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	623b      	str	r3, [r7, #32]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b2:	623b      	str	r3, [r7, #32]
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc90      	pop	{r4, r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	08005174 	.word	0x08005174
 80022c8:	40021000 	.word	0x40021000
 80022cc:	007a1200 	.word	0x007a1200
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff2 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	08005194 	.word	0x08005194

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffde 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0adb      	lsrs	r3, r3, #11
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08005194 	.word	0x08005194

08002338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <RCC_Delay+0x34>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <RCC_Delay+0x38>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002354:	bf00      	nop
  }
  while (Delay --);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	60fa      	str	r2, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <RCC_Delay+0x1c>
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	20000000 	.word	0x20000000
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e041      	b.n	800240a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fd98 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f000 faa4 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e041      	b.n	80024a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d106      	bne.n	800243e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f839 	bl	80024b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	4619      	mov	r1, r3
 8002450:	4610      	mov	r0, r2
 8002452:	f000 fa55 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_TIM_PWM_Start+0x24>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e022      	b.n	800252e <HAL_TIM_PWM_Start+0x6a>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d109      	bne.n	8002502 <HAL_TIM_PWM_Start+0x3e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e015      	b.n	800252e <HAL_TIM_PWM_Start+0x6a>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d109      	bne.n	800251c <HAL_TIM_PWM_Start+0x58>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e008      	b.n	800252e <HAL_TIM_PWM_Start+0x6a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e059      	b.n	80025ea <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <HAL_TIM_PWM_Start+0x82>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002544:	e013      	b.n	800256e <HAL_TIM_PWM_Start+0xaa>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d104      	bne.n	8002556 <HAL_TIM_PWM_Start+0x92>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002554:	e00b      	b.n	800256e <HAL_TIM_PWM_Start+0xaa>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d104      	bne.n	8002566 <HAL_TIM_PWM_Start+0xa2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002564:	e003      	b.n	800256e <HAL_TIM_PWM_Start+0xaa>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2201      	movs	r2, #1
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fc38 	bl	8002dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_TIM_PWM_Start+0x130>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d107      	bne.n	8002596 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_TIM_PWM_Start+0x130>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_TIM_PWM_Start+0xf0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a8:	d004      	beq.n	80025b4 <HAL_TIM_PWM_Start+0xf0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <HAL_TIM_PWM_Start+0x134>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d111      	bne.n	80025d8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d010      	beq.n	80025e8 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d6:	e007      	b.n	80025e8 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400

080025fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002612:	2302      	movs	r3, #2
 8002614:	e0ac      	b.n	8002770 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	f200 809f 	bhi.w	8002764 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002661 	.word	0x08002661
 8002630:	08002765 	.word	0x08002765
 8002634:	08002765 	.word	0x08002765
 8002638:	08002765 	.word	0x08002765
 800263c:	080026a1 	.word	0x080026a1
 8002640:	08002765 	.word	0x08002765
 8002644:	08002765 	.word	0x08002765
 8002648:	08002765 	.word	0x08002765
 800264c:	080026e3 	.word	0x080026e3
 8002650:	08002765 	.word	0x08002765
 8002654:	08002765 	.word	0x08002765
 8002658:	08002765 	.word	0x08002765
 800265c:	08002723 	.word	0x08002723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f9a2 	bl	80029b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6999      	ldr	r1, [r3, #24]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	619a      	str	r2, [r3, #24]
      break;
 800269e:	e062      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f9e8 	bl	8002a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6999      	ldr	r1, [r3, #24]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	021a      	lsls	r2, r3, #8
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	619a      	str	r2, [r3, #24]
      break;
 80026e0:	e041      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fa31 	bl	8002b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0208 	orr.w	r2, r2, #8
 80026fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0204 	bic.w	r2, r2, #4
 800270c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69d9      	ldr	r1, [r3, #28]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	61da      	str	r2, [r3, #28]
      break;
 8002720:	e021      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa7b 	bl	8002c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	021a      	lsls	r2, r3, #8
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	61da      	str	r2, [r3, #28]
      break;
 8002762:	e000      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_TIM_ConfigClockSource+0x18>
 800278c:	2302      	movs	r3, #2
 800278e:	e0b3      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x180>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c8:	d03e      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0xd0>
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ce:	f200 8087 	bhi.w	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d6:	f000 8085 	beq.w	80028e4 <HAL_TIM_ConfigClockSource+0x16c>
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	d87f      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 80027e0:	2b70      	cmp	r3, #112	; 0x70
 80027e2:	d01a      	beq.n	800281a <HAL_TIM_ConfigClockSource+0xa2>
 80027e4:	2b70      	cmp	r3, #112	; 0x70
 80027e6:	d87b      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 80027e8:	2b60      	cmp	r3, #96	; 0x60
 80027ea:	d050      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x116>
 80027ec:	2b60      	cmp	r3, #96	; 0x60
 80027ee:	d877      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 80027f0:	2b50      	cmp	r3, #80	; 0x50
 80027f2:	d03c      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xf6>
 80027f4:	2b50      	cmp	r3, #80	; 0x50
 80027f6:	d873      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d058      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x136>
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d86f      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 8002800:	2b30      	cmp	r3, #48	; 0x30
 8002802:	d064      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x156>
 8002804:	2b30      	cmp	r3, #48	; 0x30
 8002806:	d86b      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 8002808:	2b20      	cmp	r3, #32
 800280a:	d060      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x156>
 800280c:	2b20      	cmp	r3, #32
 800280e:	d867      	bhi.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d05c      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x156>
 8002814:	2b10      	cmp	r3, #16
 8002816:	d05a      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002818:	e062      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6899      	ldr	r1, [r3, #8]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f000 fac0 	bl	8002dae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800283c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	609a      	str	r2, [r3, #8]
      break;
 8002846:	e04e      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f000 faa9 	bl	8002dae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286a:	609a      	str	r2, [r3, #8]
      break;
 800286c:	e03b      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 fa20 	bl	8002cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2150      	movs	r1, #80	; 0x50
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fa77 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 800288c:	e02b      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f000 fa3e 	bl	8002d1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2160      	movs	r1, #96	; 0x60
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fa67 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 80028ac:	e01b      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 fa00 	bl	8002cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fa57 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 80028cc:	e00b      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f000 fa4e 	bl	8002d7a <TIM_ITRx_SetConfig>
        break;
 80028de:	e002      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028e0:	bf00      	nop
 80028e2:	e000      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <TIM_Base_SetConfig+0xa8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x28>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x28>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a22      	ldr	r2, [pc, #136]	; (80029ac <TIM_Base_SetConfig+0xac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <TIM_Base_SetConfig+0xa8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <TIM_Base_SetConfig+0xac>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <TIM_Base_SetConfig+0xa8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	615a      	str	r2, [r3, #20]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400

080029b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0201 	bic.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 0302 	bic.w	r3, r3, #2
 80029f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <TIM_OC1_SetConfig+0xc8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10c      	bne.n	8002a26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0308 	bic.w	r3, r3, #8
 8002a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <TIM_OC1_SetConfig+0xc8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d111      	bne.n	8002a52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40012c00 	.word	0x40012c00

08002a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0210 	bic.w	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f023 0320 	bic.w	r3, r3, #32
 8002ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <TIM_OC2_SetConfig+0xd0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10d      	bne.n	8002af8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <TIM_OC2_SetConfig+0xd0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d113      	bne.n	8002b28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	40012c00 	.word	0x40012c00

08002b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <TIM_OC3_SetConfig+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10d      	bne.n	8002bca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <TIM_OC3_SetConfig+0xd0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d113      	bne.n	8002bfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40012c00 	.word	0x40012c00

08002c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	031b      	lsls	r3, r3, #12
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <TIM_OC4_SetConfig+0x98>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d109      	bne.n	8002c98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00

08002cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0201 	bic.w	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 030a 	bic.w	r3, r3, #10
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f023 0210 	bic.w	r2, r3, #16
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	031b      	lsls	r3, r3, #12
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	621a      	str	r2, [r3, #32]
}
 8002d70:	bf00      	nop
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f043 0307 	orr.w	r3, r3, #7
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b087      	sub	sp, #28
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	021a      	lsls	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	609a      	str	r2, [r3, #8]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2201      	movs	r2, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e041      	b.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d004      	beq.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10c      	bne.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e03d      	b.n	8002f7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e03f      	b.n	8003018 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fe f80b 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2224      	movs	r2, #36	; 0x24
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fc84 	bl	80038d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b20      	cmp	r3, #32
 800303e:	d17c      	bne.n	800313a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_UART_Transmit+0x2c>
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e075      	b.n	800313c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_UART_Transmit+0x3e>
 800305a:	2302      	movs	r3, #2
 800305c:	e06e      	b.n	800313c <HAL_UART_Transmit+0x11c>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2221      	movs	r2, #33	; 0x21
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003074:	f7fe f8aa 	bl	80011cc <HAL_GetTick>
 8003078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	d108      	bne.n	80030a2 <HAL_UART_Transmit+0x82>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e003      	b.n	80030aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030b2:	e02a      	b.n	800310a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fa37 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e036      	b.n	800313c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	3302      	adds	r3, #2
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e007      	b.n	80030fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	781a      	ldrb	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1cf      	bne.n	80030b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2200      	movs	r2, #0
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fa07 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e006      	b.n	800313c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	d11d      	bne.n	800319a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_Receive_IT+0x26>
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e016      	b.n	800319c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_UART_Receive_IT+0x38>
 8003178:	2302      	movs	r3, #2
 800317a:	e00f      	b.n	800319c <HAL_UART_Receive_IT+0x58>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	461a      	mov	r2, r3
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fa18 	bl	80035c6 <UART_Start_Receive_IT>
 8003196:	4603      	mov	r3, r0
 8003198:	e000      	b.n	800319c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800319a:	2302      	movs	r3, #2
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_UART_IRQHandler+0x52>
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fac9 	bl	8003786 <UART_Receive_IT>
      return;
 80031f4:	e17b      	b.n	80034ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80b1 	beq.w	8003360 <HAL_UART_IRQHandler+0x1bc>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_UART_IRQHandler+0x70>
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80a6 	beq.w	8003360 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_UART_IRQHandler+0x90>
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_UART_IRQHandler+0xb0>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0202 	orr.w	r2, r3, #2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_UART_IRQHandler+0xd0>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <HAL_UART_IRQHandler+0xfa>
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <HAL_UART_IRQHandler+0xee>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0208 	orr.w	r2, r3, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 811e 	beq.w	80034e4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_UART_IRQHandler+0x11e>
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fa62 	bl	8003786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <HAL_UART_IRQHandler+0x146>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d031      	beq.n	800334e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9a4 	bl	8003638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d023      	beq.n	8003346 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	2b00      	cmp	r3, #0
 8003314:	d013      	beq.n	800333e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	4a76      	ldr	r2, [pc, #472]	; (80034f4 <HAL_UART_IRQHandler+0x350>)
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f8fe 	bl	8001524 <HAL_DMA_Abort_IT>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003338:	4610      	mov	r0, r2
 800333a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	e00e      	b.n	800335c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8e3 	bl	800350a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	e00a      	b.n	800335c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8df 	bl	800350a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	e006      	b.n	800335c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8db 	bl	800350a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800335a:	e0c3      	b.n	80034e4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	bf00      	nop
    return;
 800335e:	e0c1      	b.n	80034e4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 80a1 	bne.w	80034ac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 809b 	beq.w	80034ac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8095 	beq.w	80034ac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d04e      	beq.n	8003444 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80033b0:	8a3b      	ldrh	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8098 	beq.w	80034e8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033bc:	8a3a      	ldrh	r2, [r7, #16]
 80033be:	429a      	cmp	r2, r3
 80033c0:	f080 8092 	bcs.w	80034e8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8a3a      	ldrh	r2, [r7, #16]
 80033c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d02b      	beq.n	800342c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033e2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003402:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0210 	bic.w	r2, r2, #16
 8003420:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe f842 	bl	80014b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003434:	b29b      	uxth	r3, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	b29b      	uxth	r3, r3
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f86d 	bl	800351c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003442:	e051      	b.n	80034e8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800344c:	b29b      	uxth	r3, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d047      	beq.n	80034ec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800345c:	8a7b      	ldrh	r3, [r7, #18]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d044      	beq.n	80034ec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003470:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0210 	bic.w	r2, r2, #16
 800349e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034a0:	8a7b      	ldrh	r3, [r7, #18]
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f839 	bl	800351c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034aa:	e01f      	b.n	80034ec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_UART_IRQHandler+0x324>
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8f9 	bl	80036b8 <UART_Transmit_IT>
    return;
 80034c6:	e012      	b.n	80034ee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <HAL_UART_IRQHandler+0x34a>
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f93a 	bl	8003756 <UART_EndTransmit_IT>
    return;
 80034e2:	e004      	b.n	80034ee <HAL_UART_IRQHandler+0x34a>
    return;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <HAL_UART_IRQHandler+0x34a>
      return;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_UART_IRQHandler+0x34a>
      return;
 80034ec:	bf00      	nop
  }
}
 80034ee:	3728      	adds	r7, #40	; 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	08003691 	.word	0x08003691

080034f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003542:	e02c      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d028      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x30>
 8003552:	f7fd fe3b 	bl	80011cc <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	429a      	cmp	r2, r3
 8003560:	d21d      	bcs.n	800359e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003570:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00f      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d0c3      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	4613      	mov	r3, r2
 80035d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2222      	movs	r2, #34	; 0x22
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0220 	orr.w	r2, r2, #32
 800362a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800364e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0210 	bic.w	r2, r2, #16
 8003676:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff ff2d 	bl	800350a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b21      	cmp	r3, #33	; 0x21
 80036ca:	d13e      	bne.n	800374a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d114      	bne.n	8003700 <UART_Transmit_IT+0x48>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d110      	bne.n	8003700 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	1c9a      	adds	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]
 80036fe:	e008      	b.n	8003712 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6211      	str	r1, [r2, #32]
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29b      	uxth	r3, r3
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4619      	mov	r1, r3
 8003720:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003734:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003744:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff febe 	bl	80034f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b22      	cmp	r3, #34	; 0x22
 8003798:	f040 8099 	bne.w	80038ce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a4:	d117      	bne.n	80037d6 <UART_Receive_IT+0x50>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d113      	bne.n	80037d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
 80037d4:	e026      	b.n	8003824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d007      	beq.n	80037fa <UART_Receive_IT+0x74>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <UART_Receive_IT+0x82>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e008      	b.n	800381a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003814:	b2da      	uxtb	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29b      	uxth	r3, r3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4619      	mov	r1, r3
 8003832:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	d148      	bne.n	80038ca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0220 	bic.w	r2, r2, #32
 8003846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b01      	cmp	r3, #1
 8003876:	d123      	bne.n	80038c0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0210 	bic.w	r2, r2, #16
 800388c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d10a      	bne.n	80038b2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fe2f 	bl	800351c <HAL_UARTEx_RxEventCallback>
 80038be:	e002      	b.n	80038c6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fc fe31 	bl	8000528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e002      	b.n	80038d0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003912:	f023 030c 	bic.w	r3, r3, #12
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	430b      	orrs	r3, r1
 800391e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <UART_SetConfig+0x114>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003940:	f7fe fce6 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	e002      	b.n	800394e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7fe fcce 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 800394c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <UART_SetConfig+0x118>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	0119      	lsls	r1, r3, #4
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009a      	lsls	r2, r3, #2
 8003978:	441a      	add	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	fbb2 f2f3 	udiv	r2, r2, r3
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <UART_SetConfig+0x118>)
 8003986:	fba3 0302 	umull	r0, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2064      	movs	r0, #100	; 0x64
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	3332      	adds	r3, #50	; 0x32
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <UART_SetConfig+0x118>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a4:	4419      	add	r1, r3
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009a      	lsls	r2, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <UART_SetConfig+0x118>)
 80039be:	fba3 0302 	umull	r0, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2064      	movs	r0, #100	; 0x64
 80039c6:	fb00 f303 	mul.w	r3, r0, r3
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	3332      	adds	r3, #50	; 0x32
 80039d0:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <UART_SetConfig+0x118>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	440a      	add	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40013800 	.word	0x40013800
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <atoi>:
 80039f4:	220a      	movs	r2, #10
 80039f6:	2100      	movs	r1, #0
 80039f8:	f000 b934 	b.w	8003c64 <strtol>

080039fc <__errno>:
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <__errno+0x8>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2000000c 	.word	0x2000000c

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	2600      	movs	r6, #0
 8003a0c:	4d0c      	ldr	r5, [pc, #48]	; (8003a40 <__libc_init_array+0x38>)
 8003a0e:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <__libc_init_array+0x3c>)
 8003a10:	1b64      	subs	r4, r4, r5
 8003a12:	10a4      	asrs	r4, r4, #2
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	f001 faac 	bl	8004f74 <_init>
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	4d0a      	ldr	r5, [pc, #40]	; (8003a48 <__libc_init_array+0x40>)
 8003a20:	4c0a      	ldr	r4, [pc, #40]	; (8003a4c <__libc_init_array+0x44>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	080053e8 	.word	0x080053e8
 8003a44:	080053e8 	.word	0x080053e8
 8003a48:	080053e8 	.word	0x080053e8
 8003a4c:	080053ec 	.word	0x080053ec

08003a50 <memset>:
 8003a50:	4603      	mov	r3, r0
 8003a52:	4402      	add	r2, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d100      	bne.n	8003a5a <memset+0xa>
 8003a58:	4770      	bx	lr
 8003a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5e:	e7f9      	b.n	8003a54 <memset+0x4>

08003a60 <siprintf>:
 8003a60:	b40e      	push	{r1, r2, r3}
 8003a62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a66:	b500      	push	{lr}
 8003a68:	b09c      	sub	sp, #112	; 0x70
 8003a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a6c:	9002      	str	r0, [sp, #8]
 8003a6e:	9006      	str	r0, [sp, #24]
 8003a70:	9107      	str	r1, [sp, #28]
 8003a72:	9104      	str	r1, [sp, #16]
 8003a74:	4808      	ldr	r0, [pc, #32]	; (8003a98 <siprintf+0x38>)
 8003a76:	4909      	ldr	r1, [pc, #36]	; (8003a9c <siprintf+0x3c>)
 8003a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a7c:	9105      	str	r1, [sp, #20]
 8003a7e:	6800      	ldr	r0, [r0, #0]
 8003a80:	a902      	add	r1, sp, #8
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	f000 fa32 	bl	8003eec <_svfiprintf_r>
 8003a88:	2200      	movs	r2, #0
 8003a8a:	9b02      	ldr	r3, [sp, #8]
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	b01c      	add	sp, #112	; 0x70
 8003a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a94:	b003      	add	sp, #12
 8003a96:	4770      	bx	lr
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	ffff0208 	.word	0xffff0208

08003aa0 <strtok>:
 8003aa0:	4b16      	ldr	r3, [pc, #88]	; (8003afc <strtok+0x5c>)
 8003aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa6:	681f      	ldr	r7, [r3, #0]
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003aac:	460e      	mov	r6, r1
 8003aae:	b9ec      	cbnz	r4, 8003aec <strtok+0x4c>
 8003ab0:	2050      	movs	r0, #80	; 0x50
 8003ab2:	f000 f911 	bl	8003cd8 <malloc>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	65b8      	str	r0, [r7, #88]	; 0x58
 8003aba:	b920      	cbnz	r0, 8003ac6 <strtok+0x26>
 8003abc:	2157      	movs	r1, #87	; 0x57
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <strtok+0x60>)
 8003ac0:	4810      	ldr	r0, [pc, #64]	; (8003b04 <strtok+0x64>)
 8003ac2:	f000 f8d9 	bl	8003c78 <__assert_func>
 8003ac6:	e9c0 4400 	strd	r4, r4, [r0]
 8003aca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ace:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003ad2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ad6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003ada:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ade:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003ae2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003ae6:	6184      	str	r4, [r0, #24]
 8003ae8:	7704      	strb	r4, [r0, #28]
 8003aea:	6244      	str	r4, [r0, #36]	; 0x24
 8003aec:	4631      	mov	r1, r6
 8003aee:	4628      	mov	r0, r5
 8003af0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003af2:	2301      	movs	r3, #1
 8003af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003af8:	f000 b806 	b.w	8003b08 <__strtok_r>
 8003afc:	2000000c 	.word	0x2000000c
 8003b00:	080051a0 	.word	0x080051a0
 8003b04:	080051b7 	.word	0x080051b7

08003b08 <__strtok_r>:
 8003b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0a:	b908      	cbnz	r0, 8003b10 <__strtok_r+0x8>
 8003b0c:	6810      	ldr	r0, [r2, #0]
 8003b0e:	b188      	cbz	r0, 8003b34 <__strtok_r+0x2c>
 8003b10:	4604      	mov	r4, r0
 8003b12:	460f      	mov	r7, r1
 8003b14:	4620      	mov	r0, r4
 8003b16:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003b1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003b1e:	b91e      	cbnz	r6, 8003b28 <__strtok_r+0x20>
 8003b20:	b965      	cbnz	r5, 8003b3c <__strtok_r+0x34>
 8003b22:	4628      	mov	r0, r5
 8003b24:	6015      	str	r5, [r2, #0]
 8003b26:	e005      	b.n	8003b34 <__strtok_r+0x2c>
 8003b28:	42b5      	cmp	r5, r6
 8003b2a:	d1f6      	bne.n	8003b1a <__strtok_r+0x12>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <__strtok_r+0xa>
 8003b30:	6014      	str	r4, [r2, #0]
 8003b32:	7003      	strb	r3, [r0, #0]
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	461c      	mov	r4, r3
 8003b38:	e00c      	b.n	8003b54 <__strtok_r+0x4c>
 8003b3a:	b915      	cbnz	r5, 8003b42 <__strtok_r+0x3a>
 8003b3c:	460e      	mov	r6, r1
 8003b3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b42:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003b46:	42ab      	cmp	r3, r5
 8003b48:	d1f7      	bne.n	8003b3a <__strtok_r+0x32>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f3      	beq.n	8003b36 <__strtok_r+0x2e>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003b54:	6014      	str	r4, [r2, #0]
 8003b56:	e7ed      	b.n	8003b34 <__strtok_r+0x2c>

08003b58 <_strtol_l.isra.0>:
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5e:	4686      	mov	lr, r0
 8003b60:	d001      	beq.n	8003b66 <_strtol_l.isra.0+0xe>
 8003b62:	2b24      	cmp	r3, #36	; 0x24
 8003b64:	d906      	bls.n	8003b74 <_strtol_l.isra.0+0x1c>
 8003b66:	f7ff ff49 	bl	80039fc <__errno>
 8003b6a:	2316      	movs	r3, #22
 8003b6c:	6003      	str	r3, [r0, #0]
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	468c      	mov	ip, r1
 8003b76:	4e3a      	ldr	r6, [pc, #232]	; (8003c60 <_strtol_l.isra.0+0x108>)
 8003b78:	4660      	mov	r0, ip
 8003b7a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003b7e:	5da5      	ldrb	r5, [r4, r6]
 8003b80:	f015 0508 	ands.w	r5, r5, #8
 8003b84:	d1f8      	bne.n	8003b78 <_strtol_l.isra.0+0x20>
 8003b86:	2c2d      	cmp	r4, #45	; 0x2d
 8003b88:	d133      	bne.n	8003bf2 <_strtol_l.isra.0+0x9a>
 8003b8a:	f04f 0801 	mov.w	r8, #1
 8003b8e:	f89c 4000 	ldrb.w	r4, [ip]
 8003b92:	f100 0c02 	add.w	ip, r0, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d05d      	beq.n	8003c56 <_strtol_l.isra.0+0xfe>
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d10c      	bne.n	8003bb8 <_strtol_l.isra.0+0x60>
 8003b9e:	2c30      	cmp	r4, #48	; 0x30
 8003ba0:	d10a      	bne.n	8003bb8 <_strtol_l.isra.0+0x60>
 8003ba2:	f89c 0000 	ldrb.w	r0, [ip]
 8003ba6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003baa:	2858      	cmp	r0, #88	; 0x58
 8003bac:	d14e      	bne.n	8003c4c <_strtol_l.isra.0+0xf4>
 8003bae:	2310      	movs	r3, #16
 8003bb0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003bb4:	f10c 0c02 	add.w	ip, ip, #2
 8003bb8:	2500      	movs	r5, #0
 8003bba:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8003bbe:	3f01      	subs	r7, #1
 8003bc0:	fbb7 f9f3 	udiv	r9, r7, r3
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	fb03 7a19 	mls	sl, r3, r9, r7
 8003bca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003bce:	2e09      	cmp	r6, #9
 8003bd0:	d818      	bhi.n	8003c04 <_strtol_l.isra.0+0xac>
 8003bd2:	4634      	mov	r4, r6
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	dd24      	ble.n	8003c22 <_strtol_l.isra.0+0xca>
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	db1f      	blt.n	8003c1c <_strtol_l.isra.0+0xc4>
 8003bdc:	4581      	cmp	r9, r0
 8003bde:	d31d      	bcc.n	8003c1c <_strtol_l.isra.0+0xc4>
 8003be0:	d101      	bne.n	8003be6 <_strtol_l.isra.0+0x8e>
 8003be2:	45a2      	cmp	sl, r4
 8003be4:	db1a      	blt.n	8003c1c <_strtol_l.isra.0+0xc4>
 8003be6:	2501      	movs	r5, #1
 8003be8:	fb00 4003 	mla	r0, r0, r3, r4
 8003bec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003bf0:	e7eb      	b.n	8003bca <_strtol_l.isra.0+0x72>
 8003bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8003bf4:	bf08      	it	eq
 8003bf6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003bfa:	46a8      	mov	r8, r5
 8003bfc:	bf08      	it	eq
 8003bfe:	f100 0c02 	addeq.w	ip, r0, #2
 8003c02:	e7c8      	b.n	8003b96 <_strtol_l.isra.0+0x3e>
 8003c04:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003c08:	2e19      	cmp	r6, #25
 8003c0a:	d801      	bhi.n	8003c10 <_strtol_l.isra.0+0xb8>
 8003c0c:	3c37      	subs	r4, #55	; 0x37
 8003c0e:	e7e1      	b.n	8003bd4 <_strtol_l.isra.0+0x7c>
 8003c10:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003c14:	2e19      	cmp	r6, #25
 8003c16:	d804      	bhi.n	8003c22 <_strtol_l.isra.0+0xca>
 8003c18:	3c57      	subs	r4, #87	; 0x57
 8003c1a:	e7db      	b.n	8003bd4 <_strtol_l.isra.0+0x7c>
 8003c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c20:	e7e4      	b.n	8003bec <_strtol_l.isra.0+0x94>
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	da08      	bge.n	8003c38 <_strtol_l.isra.0+0xe0>
 8003c26:	2322      	movs	r3, #34	; 0x22
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f8ce 3000 	str.w	r3, [lr]
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	d09e      	beq.n	8003b70 <_strtol_l.isra.0+0x18>
 8003c32:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003c36:	e007      	b.n	8003c48 <_strtol_l.isra.0+0xf0>
 8003c38:	f1b8 0f00 	cmp.w	r8, #0
 8003c3c:	d000      	beq.n	8003c40 <_strtol_l.isra.0+0xe8>
 8003c3e:	4240      	negs	r0, r0
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	d095      	beq.n	8003b70 <_strtol_l.isra.0+0x18>
 8003c44:	2d00      	cmp	r5, #0
 8003c46:	d1f4      	bne.n	8003c32 <_strtol_l.isra.0+0xda>
 8003c48:	6011      	str	r1, [r2, #0]
 8003c4a:	e791      	b.n	8003b70 <_strtol_l.isra.0+0x18>
 8003c4c:	2430      	movs	r4, #48	; 0x30
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1b2      	bne.n	8003bb8 <_strtol_l.isra.0+0x60>
 8003c52:	2308      	movs	r3, #8
 8003c54:	e7b0      	b.n	8003bb8 <_strtol_l.isra.0+0x60>
 8003c56:	2c30      	cmp	r4, #48	; 0x30
 8003c58:	d0a3      	beq.n	8003ba2 <_strtol_l.isra.0+0x4a>
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	e7ac      	b.n	8003bb8 <_strtol_l.isra.0+0x60>
 8003c5e:	bf00      	nop
 8003c60:	08005255 	.word	0x08005255

08003c64 <strtol>:
 8003c64:	4613      	mov	r3, r2
 8003c66:	460a      	mov	r2, r1
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4802      	ldr	r0, [pc, #8]	; (8003c74 <strtol+0x10>)
 8003c6c:	6800      	ldr	r0, [r0, #0]
 8003c6e:	f7ff bf73 	b.w	8003b58 <_strtol_l.isra.0>
 8003c72:	bf00      	nop
 8003c74:	2000000c 	.word	0x2000000c

08003c78 <__assert_func>:
 8003c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <__assert_func+0x2c>)
 8003c80:	4605      	mov	r5, r0
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68d8      	ldr	r0, [r3, #12]
 8003c86:	b14c      	cbz	r4, 8003c9c <__assert_func+0x24>
 8003c88:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <__assert_func+0x30>)
 8003c8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c8e:	9100      	str	r1, [sp, #0]
 8003c90:	462b      	mov	r3, r5
 8003c92:	4906      	ldr	r1, [pc, #24]	; (8003cac <__assert_func+0x34>)
 8003c94:	f000 f80e 	bl	8003cb4 <fiprintf>
 8003c98:	f000 fde6 	bl	8004868 <abort>
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <__assert_func+0x38>)
 8003c9e:	461c      	mov	r4, r3
 8003ca0:	e7f3      	b.n	8003c8a <__assert_func+0x12>
 8003ca2:	bf00      	nop
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	08005218 	.word	0x08005218
 8003cac:	08005225 	.word	0x08005225
 8003cb0:	08005253 	.word	0x08005253

08003cb4 <fiprintf>:
 8003cb4:	b40e      	push	{r1, r2, r3}
 8003cb6:	b503      	push	{r0, r1, lr}
 8003cb8:	4601      	mov	r1, r0
 8003cba:	ab03      	add	r3, sp, #12
 8003cbc:	4805      	ldr	r0, [pc, #20]	; (8003cd4 <fiprintf+0x20>)
 8003cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc2:	6800      	ldr	r0, [r0, #0]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	f000 fa39 	bl	800413c <_vfiprintf_r>
 8003cca:	b002      	add	sp, #8
 8003ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd0:	b003      	add	sp, #12
 8003cd2:	4770      	bx	lr
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <malloc>:
 8003cd8:	4b02      	ldr	r3, [pc, #8]	; (8003ce4 <malloc+0xc>)
 8003cda:	4601      	mov	r1, r0
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	f000 b84f 	b.w	8003d80 <_malloc_r>
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c

08003ce8 <_free_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4605      	mov	r5, r0
 8003cec:	2900      	cmp	r1, #0
 8003cee:	d043      	beq.n	8003d78 <_free_r+0x90>
 8003cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf4:	1f0c      	subs	r4, r1, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bfb8      	it	lt
 8003cfa:	18e4      	addlt	r4, r4, r3
 8003cfc:	f001 f810 	bl	8004d20 <__malloc_lock>
 8003d00:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <_free_r+0x94>)
 8003d02:	6813      	ldr	r3, [r2, #0]
 8003d04:	4610      	mov	r0, r2
 8003d06:	b933      	cbnz	r3, 8003d16 <_free_r+0x2e>
 8003d08:	6063      	str	r3, [r4, #4]
 8003d0a:	6014      	str	r4, [r2, #0]
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d12:	f001 b80b 	b.w	8004d2c <__malloc_unlock>
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	d90a      	bls.n	8003d30 <_free_r+0x48>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	1862      	adds	r2, r4, r1
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bf01      	itttt	eq
 8003d22:	681a      	ldreq	r2, [r3, #0]
 8003d24:	685b      	ldreq	r3, [r3, #4]
 8003d26:	1852      	addeq	r2, r2, r1
 8003d28:	6022      	streq	r2, [r4, #0]
 8003d2a:	6063      	str	r3, [r4, #4]
 8003d2c:	6004      	str	r4, [r0, #0]
 8003d2e:	e7ed      	b.n	8003d0c <_free_r+0x24>
 8003d30:	461a      	mov	r2, r3
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	b10b      	cbz	r3, 8003d3a <_free_r+0x52>
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	d9fa      	bls.n	8003d30 <_free_r+0x48>
 8003d3a:	6811      	ldr	r1, [r2, #0]
 8003d3c:	1850      	adds	r0, r2, r1
 8003d3e:	42a0      	cmp	r0, r4
 8003d40:	d10b      	bne.n	8003d5a <_free_r+0x72>
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	4401      	add	r1, r0
 8003d46:	1850      	adds	r0, r2, r1
 8003d48:	4283      	cmp	r3, r0
 8003d4a:	6011      	str	r1, [r2, #0]
 8003d4c:	d1de      	bne.n	8003d0c <_free_r+0x24>
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4401      	add	r1, r0
 8003d54:	6011      	str	r1, [r2, #0]
 8003d56:	6053      	str	r3, [r2, #4]
 8003d58:	e7d8      	b.n	8003d0c <_free_r+0x24>
 8003d5a:	d902      	bls.n	8003d62 <_free_r+0x7a>
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	e7d4      	b.n	8003d0c <_free_r+0x24>
 8003d62:	6820      	ldr	r0, [r4, #0]
 8003d64:	1821      	adds	r1, r4, r0
 8003d66:	428b      	cmp	r3, r1
 8003d68:	bf01      	itttt	eq
 8003d6a:	6819      	ldreq	r1, [r3, #0]
 8003d6c:	685b      	ldreq	r3, [r3, #4]
 8003d6e:	1809      	addeq	r1, r1, r0
 8003d70:	6021      	streq	r1, [r4, #0]
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	6054      	str	r4, [r2, #4]
 8003d76:	e7c9      	b.n	8003d0c <_free_r+0x24>
 8003d78:	bd38      	pop	{r3, r4, r5, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000094 	.word	0x20000094

08003d80 <_malloc_r>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	1ccd      	adds	r5, r1, #3
 8003d84:	f025 0503 	bic.w	r5, r5, #3
 8003d88:	3508      	adds	r5, #8
 8003d8a:	2d0c      	cmp	r5, #12
 8003d8c:	bf38      	it	cc
 8003d8e:	250c      	movcc	r5, #12
 8003d90:	2d00      	cmp	r5, #0
 8003d92:	4606      	mov	r6, r0
 8003d94:	db01      	blt.n	8003d9a <_malloc_r+0x1a>
 8003d96:	42a9      	cmp	r1, r5
 8003d98:	d903      	bls.n	8003da2 <_malloc_r+0x22>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	2000      	movs	r0, #0
 8003da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da2:	f000 ffbd 	bl	8004d20 <__malloc_lock>
 8003da6:	4921      	ldr	r1, [pc, #132]	; (8003e2c <_malloc_r+0xac>)
 8003da8:	680a      	ldr	r2, [r1, #0]
 8003daa:	4614      	mov	r4, r2
 8003dac:	b99c      	cbnz	r4, 8003dd6 <_malloc_r+0x56>
 8003dae:	4f20      	ldr	r7, [pc, #128]	; (8003e30 <_malloc_r+0xb0>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	b923      	cbnz	r3, 8003dbe <_malloc_r+0x3e>
 8003db4:	4621      	mov	r1, r4
 8003db6:	4630      	mov	r0, r6
 8003db8:	f000 fc86 	bl	80046c8 <_sbrk_r>
 8003dbc:	6038      	str	r0, [r7, #0]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f000 fc81 	bl	80046c8 <_sbrk_r>
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	d123      	bne.n	8003e12 <_malloc_r+0x92>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	4630      	mov	r0, r6
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	f000 ffac 	bl	8004d2c <__malloc_unlock>
 8003dd4:	e7e3      	b.n	8003d9e <_malloc_r+0x1e>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	1b5b      	subs	r3, r3, r5
 8003dda:	d417      	bmi.n	8003e0c <_malloc_r+0x8c>
 8003ddc:	2b0b      	cmp	r3, #11
 8003dde:	d903      	bls.n	8003de8 <_malloc_r+0x68>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	441c      	add	r4, r3
 8003de4:	6025      	str	r5, [r4, #0]
 8003de6:	e004      	b.n	8003df2 <_malloc_r+0x72>
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	42a2      	cmp	r2, r4
 8003dec:	bf0c      	ite	eq
 8003dee:	600b      	streq	r3, [r1, #0]
 8003df0:	6053      	strne	r3, [r2, #4]
 8003df2:	4630      	mov	r0, r6
 8003df4:	f000 ff9a 	bl	8004d2c <__malloc_unlock>
 8003df8:	f104 000b 	add.w	r0, r4, #11
 8003dfc:	1d23      	adds	r3, r4, #4
 8003dfe:	f020 0007 	bic.w	r0, r0, #7
 8003e02:	1ac2      	subs	r2, r0, r3
 8003e04:	d0cc      	beq.n	8003da0 <_malloc_r+0x20>
 8003e06:	1a1b      	subs	r3, r3, r0
 8003e08:	50a3      	str	r3, [r4, r2]
 8003e0a:	e7c9      	b.n	8003da0 <_malloc_r+0x20>
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	6864      	ldr	r4, [r4, #4]
 8003e10:	e7cc      	b.n	8003dac <_malloc_r+0x2c>
 8003e12:	1cc4      	adds	r4, r0, #3
 8003e14:	f024 0403 	bic.w	r4, r4, #3
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d0e3      	beq.n	8003de4 <_malloc_r+0x64>
 8003e1c:	1a21      	subs	r1, r4, r0
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 fc52 	bl	80046c8 <_sbrk_r>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d1dd      	bne.n	8003de4 <_malloc_r+0x64>
 8003e28:	e7cf      	b.n	8003dca <_malloc_r+0x4a>
 8003e2a:	bf00      	nop
 8003e2c:	20000094 	.word	0x20000094
 8003e30:	20000098 	.word	0x20000098

08003e34 <__ssputs_r>:
 8003e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	688e      	ldr	r6, [r1, #8]
 8003e3a:	4682      	mov	sl, r0
 8003e3c:	429e      	cmp	r6, r3
 8003e3e:	460c      	mov	r4, r1
 8003e40:	4690      	mov	r8, r2
 8003e42:	461f      	mov	r7, r3
 8003e44:	d838      	bhi.n	8003eb8 <__ssputs_r+0x84>
 8003e46:	898a      	ldrh	r2, [r1, #12]
 8003e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e4c:	d032      	beq.n	8003eb4 <__ssputs_r+0x80>
 8003e4e:	6825      	ldr	r5, [r4, #0]
 8003e50:	6909      	ldr	r1, [r1, #16]
 8003e52:	3301      	adds	r3, #1
 8003e54:	eba5 0901 	sub.w	r9, r5, r1
 8003e58:	6965      	ldr	r5, [r4, #20]
 8003e5a:	444b      	add	r3, r9
 8003e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e64:	106d      	asrs	r5, r5, #1
 8003e66:	429d      	cmp	r5, r3
 8003e68:	bf38      	it	cc
 8003e6a:	461d      	movcc	r5, r3
 8003e6c:	0553      	lsls	r3, r2, #21
 8003e6e:	d531      	bpl.n	8003ed4 <__ssputs_r+0xa0>
 8003e70:	4629      	mov	r1, r5
 8003e72:	f7ff ff85 	bl	8003d80 <_malloc_r>
 8003e76:	4606      	mov	r6, r0
 8003e78:	b950      	cbnz	r0, 8003e90 <__ssputs_r+0x5c>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	f8ca 3000 	str.w	r3, [sl]
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8a:	81a3      	strh	r3, [r4, #12]
 8003e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e90:	464a      	mov	r2, r9
 8003e92:	6921      	ldr	r1, [r4, #16]
 8003e94:	f000 ff1c 	bl	8004cd0 <memcpy>
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	6126      	str	r6, [r4, #16]
 8003ea6:	444e      	add	r6, r9
 8003ea8:	6026      	str	r6, [r4, #0]
 8003eaa:	463e      	mov	r6, r7
 8003eac:	6165      	str	r5, [r4, #20]
 8003eae:	eba5 0509 	sub.w	r5, r5, r9
 8003eb2:	60a5      	str	r5, [r4, #8]
 8003eb4:	42be      	cmp	r6, r7
 8003eb6:	d900      	bls.n	8003eba <__ssputs_r+0x86>
 8003eb8:	463e      	mov	r6, r7
 8003eba:	4632      	mov	r2, r6
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	6820      	ldr	r0, [r4, #0]
 8003ec0:	f000 ff14 	bl	8004cec <memmove>
 8003ec4:	68a3      	ldr	r3, [r4, #8]
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	1b9b      	subs	r3, r3, r6
 8003eca:	4432      	add	r2, r6
 8003ecc:	2000      	movs	r0, #0
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	6022      	str	r2, [r4, #0]
 8003ed2:	e7db      	b.n	8003e8c <__ssputs_r+0x58>
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	f000 ff2f 	bl	8004d38 <_realloc_r>
 8003eda:	4606      	mov	r6, r0
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d1e1      	bne.n	8003ea4 <__ssputs_r+0x70>
 8003ee0:	4650      	mov	r0, sl
 8003ee2:	6921      	ldr	r1, [r4, #16]
 8003ee4:	f7ff ff00 	bl	8003ce8 <_free_r>
 8003ee8:	e7c7      	b.n	8003e7a <__ssputs_r+0x46>
	...

08003eec <_svfiprintf_r>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	4698      	mov	r8, r3
 8003ef2:	898b      	ldrh	r3, [r1, #12]
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	460d      	mov	r5, r1
 8003efa:	4614      	mov	r4, r2
 8003efc:	b09d      	sub	sp, #116	; 0x74
 8003efe:	d50e      	bpl.n	8003f1e <_svfiprintf_r+0x32>
 8003f00:	690b      	ldr	r3, [r1, #16]
 8003f02:	b963      	cbnz	r3, 8003f1e <_svfiprintf_r+0x32>
 8003f04:	2140      	movs	r1, #64	; 0x40
 8003f06:	f7ff ff3b 	bl	8003d80 <_malloc_r>
 8003f0a:	6028      	str	r0, [r5, #0]
 8003f0c:	6128      	str	r0, [r5, #16]
 8003f0e:	b920      	cbnz	r0, 8003f1a <_svfiprintf_r+0x2e>
 8003f10:	230c      	movs	r3, #12
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	e0d1      	b.n	80040be <_svfiprintf_r+0x1d2>
 8003f1a:	2340      	movs	r3, #64	; 0x40
 8003f1c:	616b      	str	r3, [r5, #20]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9309      	str	r3, [sp, #36]	; 0x24
 8003f22:	2320      	movs	r3, #32
 8003f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f28:	2330      	movs	r3, #48	; 0x30
 8003f2a:	f04f 0901 	mov.w	r9, #1
 8003f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040d8 <_svfiprintf_r+0x1ec>
 8003f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	469a      	mov	sl, r3
 8003f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f42:	b10a      	cbz	r2, 8003f48 <_svfiprintf_r+0x5c>
 8003f44:	2a25      	cmp	r2, #37	; 0x25
 8003f46:	d1f9      	bne.n	8003f3c <_svfiprintf_r+0x50>
 8003f48:	ebba 0b04 	subs.w	fp, sl, r4
 8003f4c:	d00b      	beq.n	8003f66 <_svfiprintf_r+0x7a>
 8003f4e:	465b      	mov	r3, fp
 8003f50:	4622      	mov	r2, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	4638      	mov	r0, r7
 8003f56:	f7ff ff6d 	bl	8003e34 <__ssputs_r>
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f000 80aa 	beq.w	80040b4 <_svfiprintf_r+0x1c8>
 8003f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f62:	445a      	add	r2, fp
 8003f64:	9209      	str	r2, [sp, #36]	; 0x24
 8003f66:	f89a 3000 	ldrb.w	r3, [sl]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80a2 	beq.w	80040b4 <_svfiprintf_r+0x1c8>
 8003f70:	2300      	movs	r3, #0
 8003f72:	f04f 32ff 	mov.w	r2, #4294967295
 8003f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f7a:	f10a 0a01 	add.w	sl, sl, #1
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	9307      	str	r3, [sp, #28]
 8003f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f86:	931a      	str	r3, [sp, #104]	; 0x68
 8003f88:	4654      	mov	r4, sl
 8003f8a:	2205      	movs	r2, #5
 8003f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f90:	4851      	ldr	r0, [pc, #324]	; (80040d8 <_svfiprintf_r+0x1ec>)
 8003f92:	f000 fe8f 	bl	8004cb4 <memchr>
 8003f96:	9a04      	ldr	r2, [sp, #16]
 8003f98:	b9d8      	cbnz	r0, 8003fd2 <_svfiprintf_r+0xe6>
 8003f9a:	06d0      	lsls	r0, r2, #27
 8003f9c:	bf44      	itt	mi
 8003f9e:	2320      	movmi	r3, #32
 8003fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa4:	0711      	lsls	r1, r2, #28
 8003fa6:	bf44      	itt	mi
 8003fa8:	232b      	movmi	r3, #43	; 0x2b
 8003faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fae:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb4:	d015      	beq.n	8003fe2 <_svfiprintf_r+0xf6>
 8003fb6:	4654      	mov	r4, sl
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f04f 0c0a 	mov.w	ip, #10
 8003fbe:	9a07      	ldr	r2, [sp, #28]
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc6:	3b30      	subs	r3, #48	; 0x30
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d94e      	bls.n	800406a <_svfiprintf_r+0x17e>
 8003fcc:	b1b0      	cbz	r0, 8003ffc <_svfiprintf_r+0x110>
 8003fce:	9207      	str	r2, [sp, #28]
 8003fd0:	e014      	b.n	8003ffc <_svfiprintf_r+0x110>
 8003fd2:	eba0 0308 	sub.w	r3, r0, r8
 8003fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	46a2      	mov	sl, r4
 8003fde:	9304      	str	r3, [sp, #16]
 8003fe0:	e7d2      	b.n	8003f88 <_svfiprintf_r+0x9c>
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	1d19      	adds	r1, r3, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	9103      	str	r1, [sp, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bfbb      	ittet	lt
 8003fee:	425b      	neglt	r3, r3
 8003ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ff4:	9307      	strge	r3, [sp, #28]
 8003ff6:	9307      	strlt	r3, [sp, #28]
 8003ff8:	bfb8      	it	lt
 8003ffa:	9204      	strlt	r2, [sp, #16]
 8003ffc:	7823      	ldrb	r3, [r4, #0]
 8003ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8004000:	d10c      	bne.n	800401c <_svfiprintf_r+0x130>
 8004002:	7863      	ldrb	r3, [r4, #1]
 8004004:	2b2a      	cmp	r3, #42	; 0x2a
 8004006:	d135      	bne.n	8004074 <_svfiprintf_r+0x188>
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	3402      	adds	r4, #2
 800400c:	1d1a      	adds	r2, r3, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	9203      	str	r2, [sp, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfb8      	it	lt
 8004016:	f04f 33ff 	movlt.w	r3, #4294967295
 800401a:	9305      	str	r3, [sp, #20]
 800401c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040e8 <_svfiprintf_r+0x1fc>
 8004020:	2203      	movs	r2, #3
 8004022:	4650      	mov	r0, sl
 8004024:	7821      	ldrb	r1, [r4, #0]
 8004026:	f000 fe45 	bl	8004cb4 <memchr>
 800402a:	b140      	cbz	r0, 800403e <_svfiprintf_r+0x152>
 800402c:	2340      	movs	r3, #64	; 0x40
 800402e:	eba0 000a 	sub.w	r0, r0, sl
 8004032:	fa03 f000 	lsl.w	r0, r3, r0
 8004036:	9b04      	ldr	r3, [sp, #16]
 8004038:	3401      	adds	r4, #1
 800403a:	4303      	orrs	r3, r0
 800403c:	9304      	str	r3, [sp, #16]
 800403e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004042:	2206      	movs	r2, #6
 8004044:	4825      	ldr	r0, [pc, #148]	; (80040dc <_svfiprintf_r+0x1f0>)
 8004046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800404a:	f000 fe33 	bl	8004cb4 <memchr>
 800404e:	2800      	cmp	r0, #0
 8004050:	d038      	beq.n	80040c4 <_svfiprintf_r+0x1d8>
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <_svfiprintf_r+0x1f4>)
 8004054:	bb1b      	cbnz	r3, 800409e <_svfiprintf_r+0x1b2>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	3307      	adds	r3, #7
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	3308      	adds	r3, #8
 8004060:	9303      	str	r3, [sp, #12]
 8004062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004064:	4433      	add	r3, r6
 8004066:	9309      	str	r3, [sp, #36]	; 0x24
 8004068:	e767      	b.n	8003f3a <_svfiprintf_r+0x4e>
 800406a:	460c      	mov	r4, r1
 800406c:	2001      	movs	r0, #1
 800406e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004072:	e7a5      	b.n	8003fc0 <_svfiprintf_r+0xd4>
 8004074:	2300      	movs	r3, #0
 8004076:	f04f 0c0a 	mov.w	ip, #10
 800407a:	4619      	mov	r1, r3
 800407c:	3401      	adds	r4, #1
 800407e:	9305      	str	r3, [sp, #20]
 8004080:	4620      	mov	r0, r4
 8004082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004086:	3a30      	subs	r2, #48	; 0x30
 8004088:	2a09      	cmp	r2, #9
 800408a:	d903      	bls.n	8004094 <_svfiprintf_r+0x1a8>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0c5      	beq.n	800401c <_svfiprintf_r+0x130>
 8004090:	9105      	str	r1, [sp, #20]
 8004092:	e7c3      	b.n	800401c <_svfiprintf_r+0x130>
 8004094:	4604      	mov	r4, r0
 8004096:	2301      	movs	r3, #1
 8004098:	fb0c 2101 	mla	r1, ip, r1, r2
 800409c:	e7f0      	b.n	8004080 <_svfiprintf_r+0x194>
 800409e:	ab03      	add	r3, sp, #12
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	462a      	mov	r2, r5
 80040a4:	4638      	mov	r0, r7
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <_svfiprintf_r+0x1f8>)
 80040a8:	a904      	add	r1, sp, #16
 80040aa:	f3af 8000 	nop.w
 80040ae:	1c42      	adds	r2, r0, #1
 80040b0:	4606      	mov	r6, r0
 80040b2:	d1d6      	bne.n	8004062 <_svfiprintf_r+0x176>
 80040b4:	89ab      	ldrh	r3, [r5, #12]
 80040b6:	065b      	lsls	r3, r3, #25
 80040b8:	f53f af2c 	bmi.w	8003f14 <_svfiprintf_r+0x28>
 80040bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040be:	b01d      	add	sp, #116	; 0x74
 80040c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c4:	ab03      	add	r3, sp, #12
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	462a      	mov	r2, r5
 80040ca:	4638      	mov	r0, r7
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <_svfiprintf_r+0x1f8>)
 80040ce:	a904      	add	r1, sp, #16
 80040d0:	f000 f9d4 	bl	800447c <_printf_i>
 80040d4:	e7eb      	b.n	80040ae <_svfiprintf_r+0x1c2>
 80040d6:	bf00      	nop
 80040d8:	08005355 	.word	0x08005355
 80040dc:	0800535f 	.word	0x0800535f
 80040e0:	00000000 	.word	0x00000000
 80040e4:	08003e35 	.word	0x08003e35
 80040e8:	0800535b 	.word	0x0800535b

080040ec <__sfputc_r>:
 80040ec:	6893      	ldr	r3, [r2, #8]
 80040ee:	b410      	push	{r4}
 80040f0:	3b01      	subs	r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	da07      	bge.n	8004108 <__sfputc_r+0x1c>
 80040f8:	6994      	ldr	r4, [r2, #24]
 80040fa:	42a3      	cmp	r3, r4
 80040fc:	db01      	blt.n	8004102 <__sfputc_r+0x16>
 80040fe:	290a      	cmp	r1, #10
 8004100:	d102      	bne.n	8004108 <__sfputc_r+0x1c>
 8004102:	bc10      	pop	{r4}
 8004104:	f000 baf0 	b.w	80046e8 <__swbuf_r>
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	1c58      	adds	r0, r3, #1
 800410c:	6010      	str	r0, [r2, #0]
 800410e:	7019      	strb	r1, [r3, #0]
 8004110:	4608      	mov	r0, r1
 8004112:	bc10      	pop	{r4}
 8004114:	4770      	bx	lr

08004116 <__sfputs_r>:
 8004116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004118:	4606      	mov	r6, r0
 800411a:	460f      	mov	r7, r1
 800411c:	4614      	mov	r4, r2
 800411e:	18d5      	adds	r5, r2, r3
 8004120:	42ac      	cmp	r4, r5
 8004122:	d101      	bne.n	8004128 <__sfputs_r+0x12>
 8004124:	2000      	movs	r0, #0
 8004126:	e007      	b.n	8004138 <__sfputs_r+0x22>
 8004128:	463a      	mov	r2, r7
 800412a:	4630      	mov	r0, r6
 800412c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004130:	f7ff ffdc 	bl	80040ec <__sfputc_r>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d1f3      	bne.n	8004120 <__sfputs_r+0xa>
 8004138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800413c <_vfiprintf_r>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	460d      	mov	r5, r1
 8004142:	4614      	mov	r4, r2
 8004144:	4698      	mov	r8, r3
 8004146:	4606      	mov	r6, r0
 8004148:	b09d      	sub	sp, #116	; 0x74
 800414a:	b118      	cbz	r0, 8004154 <_vfiprintf_r+0x18>
 800414c:	6983      	ldr	r3, [r0, #24]
 800414e:	b90b      	cbnz	r3, 8004154 <_vfiprintf_r+0x18>
 8004150:	f000 fcac 	bl	8004aac <__sinit>
 8004154:	4b89      	ldr	r3, [pc, #548]	; (800437c <_vfiprintf_r+0x240>)
 8004156:	429d      	cmp	r5, r3
 8004158:	d11b      	bne.n	8004192 <_vfiprintf_r+0x56>
 800415a:	6875      	ldr	r5, [r6, #4]
 800415c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800415e:	07d9      	lsls	r1, r3, #31
 8004160:	d405      	bmi.n	800416e <_vfiprintf_r+0x32>
 8004162:	89ab      	ldrh	r3, [r5, #12]
 8004164:	059a      	lsls	r2, r3, #22
 8004166:	d402      	bmi.n	800416e <_vfiprintf_r+0x32>
 8004168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800416a:	f000 fd3d 	bl	8004be8 <__retarget_lock_acquire_recursive>
 800416e:	89ab      	ldrh	r3, [r5, #12]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	d501      	bpl.n	8004178 <_vfiprintf_r+0x3c>
 8004174:	692b      	ldr	r3, [r5, #16]
 8004176:	b9eb      	cbnz	r3, 80041b4 <_vfiprintf_r+0x78>
 8004178:	4629      	mov	r1, r5
 800417a:	4630      	mov	r0, r6
 800417c:	f000 fb06 	bl	800478c <__swsetup_r>
 8004180:	b1c0      	cbz	r0, 80041b4 <_vfiprintf_r+0x78>
 8004182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004184:	07dc      	lsls	r4, r3, #31
 8004186:	d50e      	bpl.n	80041a6 <_vfiprintf_r+0x6a>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	b01d      	add	sp, #116	; 0x74
 800418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004192:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <_vfiprintf_r+0x244>)
 8004194:	429d      	cmp	r5, r3
 8004196:	d101      	bne.n	800419c <_vfiprintf_r+0x60>
 8004198:	68b5      	ldr	r5, [r6, #8]
 800419a:	e7df      	b.n	800415c <_vfiprintf_r+0x20>
 800419c:	4b79      	ldr	r3, [pc, #484]	; (8004384 <_vfiprintf_r+0x248>)
 800419e:	429d      	cmp	r5, r3
 80041a0:	bf08      	it	eq
 80041a2:	68f5      	ldreq	r5, [r6, #12]
 80041a4:	e7da      	b.n	800415c <_vfiprintf_r+0x20>
 80041a6:	89ab      	ldrh	r3, [r5, #12]
 80041a8:	0598      	lsls	r0, r3, #22
 80041aa:	d4ed      	bmi.n	8004188 <_vfiprintf_r+0x4c>
 80041ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ae:	f000 fd1c 	bl	8004bea <__retarget_lock_release_recursive>
 80041b2:	e7e9      	b.n	8004188 <_vfiprintf_r+0x4c>
 80041b4:	2300      	movs	r3, #0
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	2320      	movs	r3, #32
 80041ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041be:	2330      	movs	r3, #48	; 0x30
 80041c0:	f04f 0901 	mov.w	r9, #1
 80041c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004388 <_vfiprintf_r+0x24c>
 80041cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041d0:	4623      	mov	r3, r4
 80041d2:	469a      	mov	sl, r3
 80041d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d8:	b10a      	cbz	r2, 80041de <_vfiprintf_r+0xa2>
 80041da:	2a25      	cmp	r2, #37	; 0x25
 80041dc:	d1f9      	bne.n	80041d2 <_vfiprintf_r+0x96>
 80041de:	ebba 0b04 	subs.w	fp, sl, r4
 80041e2:	d00b      	beq.n	80041fc <_vfiprintf_r+0xc0>
 80041e4:	465b      	mov	r3, fp
 80041e6:	4622      	mov	r2, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7ff ff93 	bl	8004116 <__sfputs_r>
 80041f0:	3001      	adds	r0, #1
 80041f2:	f000 80aa 	beq.w	800434a <_vfiprintf_r+0x20e>
 80041f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f8:	445a      	add	r2, fp
 80041fa:	9209      	str	r2, [sp, #36]	; 0x24
 80041fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80a2 	beq.w	800434a <_vfiprintf_r+0x20e>
 8004206:	2300      	movs	r3, #0
 8004208:	f04f 32ff 	mov.w	r2, #4294967295
 800420c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004210:	f10a 0a01 	add.w	sl, sl, #1
 8004214:	9304      	str	r3, [sp, #16]
 8004216:	9307      	str	r3, [sp, #28]
 8004218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800421c:	931a      	str	r3, [sp, #104]	; 0x68
 800421e:	4654      	mov	r4, sl
 8004220:	2205      	movs	r2, #5
 8004222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004226:	4858      	ldr	r0, [pc, #352]	; (8004388 <_vfiprintf_r+0x24c>)
 8004228:	f000 fd44 	bl	8004cb4 <memchr>
 800422c:	9a04      	ldr	r2, [sp, #16]
 800422e:	b9d8      	cbnz	r0, 8004268 <_vfiprintf_r+0x12c>
 8004230:	06d1      	lsls	r1, r2, #27
 8004232:	bf44      	itt	mi
 8004234:	2320      	movmi	r3, #32
 8004236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800423a:	0713      	lsls	r3, r2, #28
 800423c:	bf44      	itt	mi
 800423e:	232b      	movmi	r3, #43	; 0x2b
 8004240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004244:	f89a 3000 	ldrb.w	r3, [sl]
 8004248:	2b2a      	cmp	r3, #42	; 0x2a
 800424a:	d015      	beq.n	8004278 <_vfiprintf_r+0x13c>
 800424c:	4654      	mov	r4, sl
 800424e:	2000      	movs	r0, #0
 8004250:	f04f 0c0a 	mov.w	ip, #10
 8004254:	9a07      	ldr	r2, [sp, #28]
 8004256:	4621      	mov	r1, r4
 8004258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800425c:	3b30      	subs	r3, #48	; 0x30
 800425e:	2b09      	cmp	r3, #9
 8004260:	d94e      	bls.n	8004300 <_vfiprintf_r+0x1c4>
 8004262:	b1b0      	cbz	r0, 8004292 <_vfiprintf_r+0x156>
 8004264:	9207      	str	r2, [sp, #28]
 8004266:	e014      	b.n	8004292 <_vfiprintf_r+0x156>
 8004268:	eba0 0308 	sub.w	r3, r0, r8
 800426c:	fa09 f303 	lsl.w	r3, r9, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	46a2      	mov	sl, r4
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	e7d2      	b.n	800421e <_vfiprintf_r+0xe2>
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	1d19      	adds	r1, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	9103      	str	r1, [sp, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	bfbb      	ittet	lt
 8004284:	425b      	neglt	r3, r3
 8004286:	f042 0202 	orrlt.w	r2, r2, #2
 800428a:	9307      	strge	r3, [sp, #28]
 800428c:	9307      	strlt	r3, [sp, #28]
 800428e:	bfb8      	it	lt
 8004290:	9204      	strlt	r2, [sp, #16]
 8004292:	7823      	ldrb	r3, [r4, #0]
 8004294:	2b2e      	cmp	r3, #46	; 0x2e
 8004296:	d10c      	bne.n	80042b2 <_vfiprintf_r+0x176>
 8004298:	7863      	ldrb	r3, [r4, #1]
 800429a:	2b2a      	cmp	r3, #42	; 0x2a
 800429c:	d135      	bne.n	800430a <_vfiprintf_r+0x1ce>
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	3402      	adds	r4, #2
 80042a2:	1d1a      	adds	r2, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	9203      	str	r2, [sp, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bfb8      	it	lt
 80042ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80042b0:	9305      	str	r3, [sp, #20]
 80042b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004398 <_vfiprintf_r+0x25c>
 80042b6:	2203      	movs	r2, #3
 80042b8:	4650      	mov	r0, sl
 80042ba:	7821      	ldrb	r1, [r4, #0]
 80042bc:	f000 fcfa 	bl	8004cb4 <memchr>
 80042c0:	b140      	cbz	r0, 80042d4 <_vfiprintf_r+0x198>
 80042c2:	2340      	movs	r3, #64	; 0x40
 80042c4:	eba0 000a 	sub.w	r0, r0, sl
 80042c8:	fa03 f000 	lsl.w	r0, r3, r0
 80042cc:	9b04      	ldr	r3, [sp, #16]
 80042ce:	3401      	adds	r4, #1
 80042d0:	4303      	orrs	r3, r0
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d8:	2206      	movs	r2, #6
 80042da:	482c      	ldr	r0, [pc, #176]	; (800438c <_vfiprintf_r+0x250>)
 80042dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042e0:	f000 fce8 	bl	8004cb4 <memchr>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d03f      	beq.n	8004368 <_vfiprintf_r+0x22c>
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <_vfiprintf_r+0x254>)
 80042ea:	bb1b      	cbnz	r3, 8004334 <_vfiprintf_r+0x1f8>
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	3307      	adds	r3, #7
 80042f0:	f023 0307 	bic.w	r3, r3, #7
 80042f4:	3308      	adds	r3, #8
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fa:	443b      	add	r3, r7
 80042fc:	9309      	str	r3, [sp, #36]	; 0x24
 80042fe:	e767      	b.n	80041d0 <_vfiprintf_r+0x94>
 8004300:	460c      	mov	r4, r1
 8004302:	2001      	movs	r0, #1
 8004304:	fb0c 3202 	mla	r2, ip, r2, r3
 8004308:	e7a5      	b.n	8004256 <_vfiprintf_r+0x11a>
 800430a:	2300      	movs	r3, #0
 800430c:	f04f 0c0a 	mov.w	ip, #10
 8004310:	4619      	mov	r1, r3
 8004312:	3401      	adds	r4, #1
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	4620      	mov	r0, r4
 8004318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800431c:	3a30      	subs	r2, #48	; 0x30
 800431e:	2a09      	cmp	r2, #9
 8004320:	d903      	bls.n	800432a <_vfiprintf_r+0x1ee>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0c5      	beq.n	80042b2 <_vfiprintf_r+0x176>
 8004326:	9105      	str	r1, [sp, #20]
 8004328:	e7c3      	b.n	80042b2 <_vfiprintf_r+0x176>
 800432a:	4604      	mov	r4, r0
 800432c:	2301      	movs	r3, #1
 800432e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004332:	e7f0      	b.n	8004316 <_vfiprintf_r+0x1da>
 8004334:	ab03      	add	r3, sp, #12
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	462a      	mov	r2, r5
 800433a:	4630      	mov	r0, r6
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <_vfiprintf_r+0x258>)
 800433e:	a904      	add	r1, sp, #16
 8004340:	f3af 8000 	nop.w
 8004344:	4607      	mov	r7, r0
 8004346:	1c78      	adds	r0, r7, #1
 8004348:	d1d6      	bne.n	80042f8 <_vfiprintf_r+0x1bc>
 800434a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800434c:	07d9      	lsls	r1, r3, #31
 800434e:	d405      	bmi.n	800435c <_vfiprintf_r+0x220>
 8004350:	89ab      	ldrh	r3, [r5, #12]
 8004352:	059a      	lsls	r2, r3, #22
 8004354:	d402      	bmi.n	800435c <_vfiprintf_r+0x220>
 8004356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004358:	f000 fc47 	bl	8004bea <__retarget_lock_release_recursive>
 800435c:	89ab      	ldrh	r3, [r5, #12]
 800435e:	065b      	lsls	r3, r3, #25
 8004360:	f53f af12 	bmi.w	8004188 <_vfiprintf_r+0x4c>
 8004364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004366:	e711      	b.n	800418c <_vfiprintf_r+0x50>
 8004368:	ab03      	add	r3, sp, #12
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	462a      	mov	r2, r5
 800436e:	4630      	mov	r0, r6
 8004370:	4b08      	ldr	r3, [pc, #32]	; (8004394 <_vfiprintf_r+0x258>)
 8004372:	a904      	add	r1, sp, #16
 8004374:	f000 f882 	bl	800447c <_printf_i>
 8004378:	e7e4      	b.n	8004344 <_vfiprintf_r+0x208>
 800437a:	bf00      	nop
 800437c:	080053a8 	.word	0x080053a8
 8004380:	080053c8 	.word	0x080053c8
 8004384:	08005388 	.word	0x08005388
 8004388:	08005355 	.word	0x08005355
 800438c:	0800535f 	.word	0x0800535f
 8004390:	00000000 	.word	0x00000000
 8004394:	08004117 	.word	0x08004117
 8004398:	0800535b 	.word	0x0800535b

0800439c <_printf_common>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4616      	mov	r6, r2
 80043a2:	4699      	mov	r9, r3
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	4607      	mov	r7, r0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bfb8      	it	lt
 80043ae:	4613      	movlt	r3, r2
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043b6:	460c      	mov	r4, r1
 80043b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043bc:	b10a      	cbz	r2, 80043c2 <_printf_common+0x26>
 80043be:	3301      	adds	r3, #1
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	6833      	ldrmi	r3, [r6, #0]
 80043ca:	3302      	addmi	r3, #2
 80043cc:	6033      	strmi	r3, [r6, #0]
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	f015 0506 	ands.w	r5, r5, #6
 80043d4:	d106      	bne.n	80043e4 <_printf_common+0x48>
 80043d6:	f104 0a19 	add.w	sl, r4, #25
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	dc28      	bgt.n	8004436 <_printf_common+0x9a>
 80043e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043e8:	1e13      	subs	r3, r2, #0
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	bf18      	it	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d42d      	bmi.n	8004450 <_printf_common+0xb4>
 80043f4:	4649      	mov	r1, r9
 80043f6:	4638      	mov	r0, r7
 80043f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d020      	beq.n	8004444 <_printf_common+0xa8>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	68e5      	ldr	r5, [r4, #12]
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf18      	it	ne
 800440e:	2500      	movne	r5, #0
 8004410:	6832      	ldr	r2, [r6, #0]
 8004412:	f04f 0600 	mov.w	r6, #0
 8004416:	68a3      	ldr	r3, [r4, #8]
 8004418:	bf08      	it	eq
 800441a:	1aad      	subeq	r5, r5, r2
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	bf08      	it	eq
 8004420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004424:	4293      	cmp	r3, r2
 8004426:	bfc4      	itt	gt
 8004428:	1a9b      	subgt	r3, r3, r2
 800442a:	18ed      	addgt	r5, r5, r3
 800442c:	341a      	adds	r4, #26
 800442e:	42b5      	cmp	r5, r6
 8004430:	d11a      	bne.n	8004468 <_printf_common+0xcc>
 8004432:	2000      	movs	r0, #0
 8004434:	e008      	b.n	8004448 <_printf_common+0xac>
 8004436:	2301      	movs	r3, #1
 8004438:	4652      	mov	r2, sl
 800443a:	4649      	mov	r1, r9
 800443c:	4638      	mov	r0, r7
 800443e:	47c0      	blx	r8
 8004440:	3001      	adds	r0, #1
 8004442:	d103      	bne.n	800444c <_printf_common+0xb0>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	3501      	adds	r5, #1
 800444e:	e7c4      	b.n	80043da <_printf_common+0x3e>
 8004450:	2030      	movs	r0, #48	; 0x30
 8004452:	18e1      	adds	r1, r4, r3
 8004454:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800445e:	4422      	add	r2, r4
 8004460:	3302      	adds	r3, #2
 8004462:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004466:	e7c5      	b.n	80043f4 <_printf_common+0x58>
 8004468:	2301      	movs	r3, #1
 800446a:	4622      	mov	r2, r4
 800446c:	4649      	mov	r1, r9
 800446e:	4638      	mov	r0, r7
 8004470:	47c0      	blx	r8
 8004472:	3001      	adds	r0, #1
 8004474:	d0e6      	beq.n	8004444 <_printf_common+0xa8>
 8004476:	3601      	adds	r6, #1
 8004478:	e7d9      	b.n	800442e <_printf_common+0x92>
	...

0800447c <_printf_i>:
 800447c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	460c      	mov	r4, r1
 8004482:	7e27      	ldrb	r7, [r4, #24]
 8004484:	4691      	mov	r9, r2
 8004486:	2f78      	cmp	r7, #120	; 0x78
 8004488:	4680      	mov	r8, r0
 800448a:	469a      	mov	sl, r3
 800448c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800448e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004492:	d807      	bhi.n	80044a4 <_printf_i+0x28>
 8004494:	2f62      	cmp	r7, #98	; 0x62
 8004496:	d80a      	bhi.n	80044ae <_printf_i+0x32>
 8004498:	2f00      	cmp	r7, #0
 800449a:	f000 80d9 	beq.w	8004650 <_printf_i+0x1d4>
 800449e:	2f58      	cmp	r7, #88	; 0x58
 80044a0:	f000 80a4 	beq.w	80045ec <_printf_i+0x170>
 80044a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044ac:	e03a      	b.n	8004524 <_printf_i+0xa8>
 80044ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044b2:	2b15      	cmp	r3, #21
 80044b4:	d8f6      	bhi.n	80044a4 <_printf_i+0x28>
 80044b6:	a001      	add	r0, pc, #4	; (adr r0, 80044bc <_printf_i+0x40>)
 80044b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044bc:	08004515 	.word	0x08004515
 80044c0:	08004529 	.word	0x08004529
 80044c4:	080044a5 	.word	0x080044a5
 80044c8:	080044a5 	.word	0x080044a5
 80044cc:	080044a5 	.word	0x080044a5
 80044d0:	080044a5 	.word	0x080044a5
 80044d4:	08004529 	.word	0x08004529
 80044d8:	080044a5 	.word	0x080044a5
 80044dc:	080044a5 	.word	0x080044a5
 80044e0:	080044a5 	.word	0x080044a5
 80044e4:	080044a5 	.word	0x080044a5
 80044e8:	08004637 	.word	0x08004637
 80044ec:	08004559 	.word	0x08004559
 80044f0:	08004619 	.word	0x08004619
 80044f4:	080044a5 	.word	0x080044a5
 80044f8:	080044a5 	.word	0x080044a5
 80044fc:	08004659 	.word	0x08004659
 8004500:	080044a5 	.word	0x080044a5
 8004504:	08004559 	.word	0x08004559
 8004508:	080044a5 	.word	0x080044a5
 800450c:	080044a5 	.word	0x080044a5
 8004510:	08004621 	.word	0x08004621
 8004514:	680b      	ldr	r3, [r1, #0]
 8004516:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	600a      	str	r2, [r1, #0]
 8004520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004524:	2301      	movs	r3, #1
 8004526:	e0a4      	b.n	8004672 <_printf_i+0x1f6>
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	6808      	ldr	r0, [r1, #0]
 800452c:	062e      	lsls	r6, r5, #24
 800452e:	f100 0304 	add.w	r3, r0, #4
 8004532:	d50a      	bpl.n	800454a <_printf_i+0xce>
 8004534:	6805      	ldr	r5, [r0, #0]
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	2d00      	cmp	r5, #0
 800453a:	da03      	bge.n	8004544 <_printf_i+0xc8>
 800453c:	232d      	movs	r3, #45	; 0x2d
 800453e:	426d      	negs	r5, r5
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004544:	230a      	movs	r3, #10
 8004546:	485e      	ldr	r0, [pc, #376]	; (80046c0 <_printf_i+0x244>)
 8004548:	e019      	b.n	800457e <_printf_i+0x102>
 800454a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800454e:	6805      	ldr	r5, [r0, #0]
 8004550:	600b      	str	r3, [r1, #0]
 8004552:	bf18      	it	ne
 8004554:	b22d      	sxthne	r5, r5
 8004556:	e7ef      	b.n	8004538 <_printf_i+0xbc>
 8004558:	680b      	ldr	r3, [r1, #0]
 800455a:	6825      	ldr	r5, [r4, #0]
 800455c:	1d18      	adds	r0, r3, #4
 800455e:	6008      	str	r0, [r1, #0]
 8004560:	0628      	lsls	r0, r5, #24
 8004562:	d501      	bpl.n	8004568 <_printf_i+0xec>
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	e002      	b.n	800456e <_printf_i+0xf2>
 8004568:	0669      	lsls	r1, r5, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0xe8>
 800456c:	881d      	ldrh	r5, [r3, #0]
 800456e:	2f6f      	cmp	r7, #111	; 0x6f
 8004570:	bf0c      	ite	eq
 8004572:	2308      	moveq	r3, #8
 8004574:	230a      	movne	r3, #10
 8004576:	4852      	ldr	r0, [pc, #328]	; (80046c0 <_printf_i+0x244>)
 8004578:	2100      	movs	r1, #0
 800457a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800457e:	6866      	ldr	r6, [r4, #4]
 8004580:	2e00      	cmp	r6, #0
 8004582:	bfa8      	it	ge
 8004584:	6821      	ldrge	r1, [r4, #0]
 8004586:	60a6      	str	r6, [r4, #8]
 8004588:	bfa4      	itt	ge
 800458a:	f021 0104 	bicge.w	r1, r1, #4
 800458e:	6021      	strge	r1, [r4, #0]
 8004590:	b90d      	cbnz	r5, 8004596 <_printf_i+0x11a>
 8004592:	2e00      	cmp	r6, #0
 8004594:	d04d      	beq.n	8004632 <_printf_i+0x1b6>
 8004596:	4616      	mov	r6, r2
 8004598:	fbb5 f1f3 	udiv	r1, r5, r3
 800459c:	fb03 5711 	mls	r7, r3, r1, r5
 80045a0:	5dc7      	ldrb	r7, [r0, r7]
 80045a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045a6:	462f      	mov	r7, r5
 80045a8:	42bb      	cmp	r3, r7
 80045aa:	460d      	mov	r5, r1
 80045ac:	d9f4      	bls.n	8004598 <_printf_i+0x11c>
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d10b      	bne.n	80045ca <_printf_i+0x14e>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	07df      	lsls	r7, r3, #31
 80045b6:	d508      	bpl.n	80045ca <_printf_i+0x14e>
 80045b8:	6923      	ldr	r3, [r4, #16]
 80045ba:	6861      	ldr	r1, [r4, #4]
 80045bc:	4299      	cmp	r1, r3
 80045be:	bfde      	ittt	le
 80045c0:	2330      	movle	r3, #48	; 0x30
 80045c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ca:	1b92      	subs	r2, r2, r6
 80045cc:	6122      	str	r2, [r4, #16]
 80045ce:	464b      	mov	r3, r9
 80045d0:	4621      	mov	r1, r4
 80045d2:	4640      	mov	r0, r8
 80045d4:	f8cd a000 	str.w	sl, [sp]
 80045d8:	aa03      	add	r2, sp, #12
 80045da:	f7ff fedf 	bl	800439c <_printf_common>
 80045de:	3001      	adds	r0, #1
 80045e0:	d14c      	bne.n	800467c <_printf_i+0x200>
 80045e2:	f04f 30ff 	mov.w	r0, #4294967295
 80045e6:	b004      	add	sp, #16
 80045e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ec:	4834      	ldr	r0, [pc, #208]	; (80046c0 <_printf_i+0x244>)
 80045ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045f2:	680e      	ldr	r6, [r1, #0]
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80045fa:	061f      	lsls	r7, r3, #24
 80045fc:	600e      	str	r6, [r1, #0]
 80045fe:	d514      	bpl.n	800462a <_printf_i+0x1ae>
 8004600:	07d9      	lsls	r1, r3, #31
 8004602:	bf44      	itt	mi
 8004604:	f043 0320 	orrmi.w	r3, r3, #32
 8004608:	6023      	strmi	r3, [r4, #0]
 800460a:	b91d      	cbnz	r5, 8004614 <_printf_i+0x198>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	f023 0320 	bic.w	r3, r3, #32
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	2310      	movs	r3, #16
 8004616:	e7af      	b.n	8004578 <_printf_i+0xfc>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	f043 0320 	orr.w	r3, r3, #32
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	2378      	movs	r3, #120	; 0x78
 8004622:	4828      	ldr	r0, [pc, #160]	; (80046c4 <_printf_i+0x248>)
 8004624:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004628:	e7e3      	b.n	80045f2 <_printf_i+0x176>
 800462a:	065e      	lsls	r6, r3, #25
 800462c:	bf48      	it	mi
 800462e:	b2ad      	uxthmi	r5, r5
 8004630:	e7e6      	b.n	8004600 <_printf_i+0x184>
 8004632:	4616      	mov	r6, r2
 8004634:	e7bb      	b.n	80045ae <_printf_i+0x132>
 8004636:	680b      	ldr	r3, [r1, #0]
 8004638:	6826      	ldr	r6, [r4, #0]
 800463a:	1d1d      	adds	r5, r3, #4
 800463c:	6960      	ldr	r0, [r4, #20]
 800463e:	600d      	str	r5, [r1, #0]
 8004640:	0635      	lsls	r5, r6, #24
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	d501      	bpl.n	800464a <_printf_i+0x1ce>
 8004646:	6018      	str	r0, [r3, #0]
 8004648:	e002      	b.n	8004650 <_printf_i+0x1d4>
 800464a:	0671      	lsls	r1, r6, #25
 800464c:	d5fb      	bpl.n	8004646 <_printf_i+0x1ca>
 800464e:	8018      	strh	r0, [r3, #0]
 8004650:	2300      	movs	r3, #0
 8004652:	4616      	mov	r6, r2
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	e7ba      	b.n	80045ce <_printf_i+0x152>
 8004658:	680b      	ldr	r3, [r1, #0]
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	600a      	str	r2, [r1, #0]
 800465e:	681e      	ldr	r6, [r3, #0]
 8004660:	2100      	movs	r1, #0
 8004662:	4630      	mov	r0, r6
 8004664:	6862      	ldr	r2, [r4, #4]
 8004666:	f000 fb25 	bl	8004cb4 <memchr>
 800466a:	b108      	cbz	r0, 8004670 <_printf_i+0x1f4>
 800466c:	1b80      	subs	r0, r0, r6
 800466e:	6060      	str	r0, [r4, #4]
 8004670:	6863      	ldr	r3, [r4, #4]
 8004672:	6123      	str	r3, [r4, #16]
 8004674:	2300      	movs	r3, #0
 8004676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467a:	e7a8      	b.n	80045ce <_printf_i+0x152>
 800467c:	4632      	mov	r2, r6
 800467e:	4649      	mov	r1, r9
 8004680:	4640      	mov	r0, r8
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	47d0      	blx	sl
 8004686:	3001      	adds	r0, #1
 8004688:	d0ab      	beq.n	80045e2 <_printf_i+0x166>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	079b      	lsls	r3, r3, #30
 800468e:	d413      	bmi.n	80046b8 <_printf_i+0x23c>
 8004690:	68e0      	ldr	r0, [r4, #12]
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	4298      	cmp	r0, r3
 8004696:	bfb8      	it	lt
 8004698:	4618      	movlt	r0, r3
 800469a:	e7a4      	b.n	80045e6 <_printf_i+0x16a>
 800469c:	2301      	movs	r3, #1
 800469e:	4632      	mov	r2, r6
 80046a0:	4649      	mov	r1, r9
 80046a2:	4640      	mov	r0, r8
 80046a4:	47d0      	blx	sl
 80046a6:	3001      	adds	r0, #1
 80046a8:	d09b      	beq.n	80045e2 <_printf_i+0x166>
 80046aa:	3501      	adds	r5, #1
 80046ac:	68e3      	ldr	r3, [r4, #12]
 80046ae:	9903      	ldr	r1, [sp, #12]
 80046b0:	1a5b      	subs	r3, r3, r1
 80046b2:	42ab      	cmp	r3, r5
 80046b4:	dcf2      	bgt.n	800469c <_printf_i+0x220>
 80046b6:	e7eb      	b.n	8004690 <_printf_i+0x214>
 80046b8:	2500      	movs	r5, #0
 80046ba:	f104 0619 	add.w	r6, r4, #25
 80046be:	e7f5      	b.n	80046ac <_printf_i+0x230>
 80046c0:	08005366 	.word	0x08005366
 80046c4:	08005377 	.word	0x08005377

080046c8 <_sbrk_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	2300      	movs	r3, #0
 80046cc:	4d05      	ldr	r5, [pc, #20]	; (80046e4 <_sbrk_r+0x1c>)
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fc fb10 	bl	8000cf8 <_sbrk>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_sbrk_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_sbrk_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	20000290 	.word	0x20000290

080046e8 <__swbuf_r>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	460e      	mov	r6, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	4605      	mov	r5, r0
 80046f0:	b118      	cbz	r0, 80046fa <__swbuf_r+0x12>
 80046f2:	6983      	ldr	r3, [r0, #24]
 80046f4:	b90b      	cbnz	r3, 80046fa <__swbuf_r+0x12>
 80046f6:	f000 f9d9 	bl	8004aac <__sinit>
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <__swbuf_r+0x98>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	d12b      	bne.n	8004758 <__swbuf_r+0x70>
 8004700:	686c      	ldr	r4, [r5, #4]
 8004702:	69a3      	ldr	r3, [r4, #24]
 8004704:	60a3      	str	r3, [r4, #8]
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	071a      	lsls	r2, r3, #28
 800470a:	d52f      	bpl.n	800476c <__swbuf_r+0x84>
 800470c:	6923      	ldr	r3, [r4, #16]
 800470e:	b36b      	cbz	r3, 800476c <__swbuf_r+0x84>
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	b2f6      	uxtb	r6, r6
 8004716:	1ac0      	subs	r0, r0, r3
 8004718:	6963      	ldr	r3, [r4, #20]
 800471a:	4637      	mov	r7, r6
 800471c:	4283      	cmp	r3, r0
 800471e:	dc04      	bgt.n	800472a <__swbuf_r+0x42>
 8004720:	4621      	mov	r1, r4
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f92e 	bl	8004984 <_fflush_r>
 8004728:	bb30      	cbnz	r0, 8004778 <__swbuf_r+0x90>
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	3001      	adds	r0, #1
 800472e:	3b01      	subs	r3, #1
 8004730:	60a3      	str	r3, [r4, #8]
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	6022      	str	r2, [r4, #0]
 8004738:	701e      	strb	r6, [r3, #0]
 800473a:	6963      	ldr	r3, [r4, #20]
 800473c:	4283      	cmp	r3, r0
 800473e:	d004      	beq.n	800474a <__swbuf_r+0x62>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	07db      	lsls	r3, r3, #31
 8004744:	d506      	bpl.n	8004754 <__swbuf_r+0x6c>
 8004746:	2e0a      	cmp	r6, #10
 8004748:	d104      	bne.n	8004754 <__swbuf_r+0x6c>
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 f919 	bl	8004984 <_fflush_r>
 8004752:	b988      	cbnz	r0, 8004778 <__swbuf_r+0x90>
 8004754:	4638      	mov	r0, r7
 8004756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <__swbuf_r+0x9c>)
 800475a:	429c      	cmp	r4, r3
 800475c:	d101      	bne.n	8004762 <__swbuf_r+0x7a>
 800475e:	68ac      	ldr	r4, [r5, #8]
 8004760:	e7cf      	b.n	8004702 <__swbuf_r+0x1a>
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <__swbuf_r+0xa0>)
 8004764:	429c      	cmp	r4, r3
 8004766:	bf08      	it	eq
 8004768:	68ec      	ldreq	r4, [r5, #12]
 800476a:	e7ca      	b.n	8004702 <__swbuf_r+0x1a>
 800476c:	4621      	mov	r1, r4
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f80c 	bl	800478c <__swsetup_r>
 8004774:	2800      	cmp	r0, #0
 8004776:	d0cb      	beq.n	8004710 <__swbuf_r+0x28>
 8004778:	f04f 37ff 	mov.w	r7, #4294967295
 800477c:	e7ea      	b.n	8004754 <__swbuf_r+0x6c>
 800477e:	bf00      	nop
 8004780:	080053a8 	.word	0x080053a8
 8004784:	080053c8 	.word	0x080053c8
 8004788:	08005388 	.word	0x08005388

0800478c <__swsetup_r>:
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <__swsetup_r+0xcc>)
 800478e:	b570      	push	{r4, r5, r6, lr}
 8004790:	681d      	ldr	r5, [r3, #0]
 8004792:	4606      	mov	r6, r0
 8004794:	460c      	mov	r4, r1
 8004796:	b125      	cbz	r5, 80047a2 <__swsetup_r+0x16>
 8004798:	69ab      	ldr	r3, [r5, #24]
 800479a:	b913      	cbnz	r3, 80047a2 <__swsetup_r+0x16>
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f985 	bl	8004aac <__sinit>
 80047a2:	4b2e      	ldr	r3, [pc, #184]	; (800485c <__swsetup_r+0xd0>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	d10f      	bne.n	80047c8 <__swsetup_r+0x3c>
 80047a8:	686c      	ldr	r4, [r5, #4]
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047b0:	0719      	lsls	r1, r3, #28
 80047b2:	d42c      	bmi.n	800480e <__swsetup_r+0x82>
 80047b4:	06dd      	lsls	r5, r3, #27
 80047b6:	d411      	bmi.n	80047dc <__swsetup_r+0x50>
 80047b8:	2309      	movs	r3, #9
 80047ba:	6033      	str	r3, [r6, #0]
 80047bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e03e      	b.n	8004846 <__swsetup_r+0xba>
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <__swsetup_r+0xd4>)
 80047ca:	429c      	cmp	r4, r3
 80047cc:	d101      	bne.n	80047d2 <__swsetup_r+0x46>
 80047ce:	68ac      	ldr	r4, [r5, #8]
 80047d0:	e7eb      	b.n	80047aa <__swsetup_r+0x1e>
 80047d2:	4b24      	ldr	r3, [pc, #144]	; (8004864 <__swsetup_r+0xd8>)
 80047d4:	429c      	cmp	r4, r3
 80047d6:	bf08      	it	eq
 80047d8:	68ec      	ldreq	r4, [r5, #12]
 80047da:	e7e6      	b.n	80047aa <__swsetup_r+0x1e>
 80047dc:	0758      	lsls	r0, r3, #29
 80047de:	d512      	bpl.n	8004806 <__swsetup_r+0x7a>
 80047e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047e2:	b141      	cbz	r1, 80047f6 <__swsetup_r+0x6a>
 80047e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047e8:	4299      	cmp	r1, r3
 80047ea:	d002      	beq.n	80047f2 <__swsetup_r+0x66>
 80047ec:	4630      	mov	r0, r6
 80047ee:	f7ff fa7b 	bl	8003ce8 <_free_r>
 80047f2:	2300      	movs	r3, #0
 80047f4:	6363      	str	r3, [r4, #52]	; 0x34
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	2300      	movs	r3, #0
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	b94b      	cbnz	r3, 8004826 <__swsetup_r+0x9a>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481c:	d003      	beq.n	8004826 <__swsetup_r+0x9a>
 800481e:	4621      	mov	r1, r4
 8004820:	4630      	mov	r0, r6
 8004822:	f000 fa07 	bl	8004c34 <__smakebuf_r>
 8004826:	89a0      	ldrh	r0, [r4, #12]
 8004828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800482c:	f010 0301 	ands.w	r3, r0, #1
 8004830:	d00a      	beq.n	8004848 <__swsetup_r+0xbc>
 8004832:	2300      	movs	r3, #0
 8004834:	60a3      	str	r3, [r4, #8]
 8004836:	6963      	ldr	r3, [r4, #20]
 8004838:	425b      	negs	r3, r3
 800483a:	61a3      	str	r3, [r4, #24]
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	b943      	cbnz	r3, 8004852 <__swsetup_r+0xc6>
 8004840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004844:	d1ba      	bne.n	80047bc <__swsetup_r+0x30>
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	0781      	lsls	r1, r0, #30
 800484a:	bf58      	it	pl
 800484c:	6963      	ldrpl	r3, [r4, #20]
 800484e:	60a3      	str	r3, [r4, #8]
 8004850:	e7f4      	b.n	800483c <__swsetup_r+0xb0>
 8004852:	2000      	movs	r0, #0
 8004854:	e7f7      	b.n	8004846 <__swsetup_r+0xba>
 8004856:	bf00      	nop
 8004858:	2000000c 	.word	0x2000000c
 800485c:	080053a8 	.word	0x080053a8
 8004860:	080053c8 	.word	0x080053c8
 8004864:	08005388 	.word	0x08005388

08004868 <abort>:
 8004868:	2006      	movs	r0, #6
 800486a:	b508      	push	{r3, lr}
 800486c:	f000 fab2 	bl	8004dd4 <raise>
 8004870:	2001      	movs	r0, #1
 8004872:	f7fc f9ce 	bl	8000c12 <_exit>
	...

08004878 <__sflush_r>:
 8004878:	898a      	ldrh	r2, [r1, #12]
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	0710      	lsls	r0, r2, #28
 8004882:	460c      	mov	r4, r1
 8004884:	d458      	bmi.n	8004938 <__sflush_r+0xc0>
 8004886:	684b      	ldr	r3, [r1, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc05      	bgt.n	8004898 <__sflush_r+0x20>
 800488c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	dc02      	bgt.n	8004898 <__sflush_r+0x20>
 8004892:	2000      	movs	r0, #0
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489a:	2e00      	cmp	r6, #0
 800489c:	d0f9      	beq.n	8004892 <__sflush_r+0x1a>
 800489e:	2300      	movs	r3, #0
 80048a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a4:	682f      	ldr	r7, [r5, #0]
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	d032      	beq.n	8004910 <__sflush_r+0x98>
 80048aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	075a      	lsls	r2, r3, #29
 80048b0:	d505      	bpl.n	80048be <__sflush_r+0x46>
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048b8:	b10b      	cbz	r3, 80048be <__sflush_r+0x46>
 80048ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048bc:	1ac0      	subs	r0, r0, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	4602      	mov	r2, r0
 80048c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c4:	4628      	mov	r0, r5
 80048c6:	6a21      	ldr	r1, [r4, #32]
 80048c8:	47b0      	blx	r6
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	d106      	bne.n	80048de <__sflush_r+0x66>
 80048d0:	6829      	ldr	r1, [r5, #0]
 80048d2:	291d      	cmp	r1, #29
 80048d4:	d82c      	bhi.n	8004930 <__sflush_r+0xb8>
 80048d6:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <__sflush_r+0x108>)
 80048d8:	40ca      	lsrs	r2, r1
 80048da:	07d6      	lsls	r6, r2, #31
 80048dc:	d528      	bpl.n	8004930 <__sflush_r+0xb8>
 80048de:	2200      	movs	r2, #0
 80048e0:	6062      	str	r2, [r4, #4]
 80048e2:	6922      	ldr	r2, [r4, #16]
 80048e4:	04d9      	lsls	r1, r3, #19
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	d504      	bpl.n	80048f4 <__sflush_r+0x7c>
 80048ea:	1c42      	adds	r2, r0, #1
 80048ec:	d101      	bne.n	80048f2 <__sflush_r+0x7a>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	b903      	cbnz	r3, 80048f4 <__sflush_r+0x7c>
 80048f2:	6560      	str	r0, [r4, #84]	; 0x54
 80048f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f6:	602f      	str	r7, [r5, #0]
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d0ca      	beq.n	8004892 <__sflush_r+0x1a>
 80048fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <__sflush_r+0x92>
 8004904:	4628      	mov	r0, r5
 8004906:	f7ff f9ef 	bl	8003ce8 <_free_r>
 800490a:	2000      	movs	r0, #0
 800490c:	6360      	str	r0, [r4, #52]	; 0x34
 800490e:	e7c1      	b.n	8004894 <__sflush_r+0x1c>
 8004910:	6a21      	ldr	r1, [r4, #32]
 8004912:	2301      	movs	r3, #1
 8004914:	4628      	mov	r0, r5
 8004916:	47b0      	blx	r6
 8004918:	1c41      	adds	r1, r0, #1
 800491a:	d1c7      	bne.n	80048ac <__sflush_r+0x34>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0c4      	beq.n	80048ac <__sflush_r+0x34>
 8004922:	2b1d      	cmp	r3, #29
 8004924:	d001      	beq.n	800492a <__sflush_r+0xb2>
 8004926:	2b16      	cmp	r3, #22
 8004928:	d101      	bne.n	800492e <__sflush_r+0xb6>
 800492a:	602f      	str	r7, [r5, #0]
 800492c:	e7b1      	b.n	8004892 <__sflush_r+0x1a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	e7ad      	b.n	8004894 <__sflush_r+0x1c>
 8004938:	690f      	ldr	r7, [r1, #16]
 800493a:	2f00      	cmp	r7, #0
 800493c:	d0a9      	beq.n	8004892 <__sflush_r+0x1a>
 800493e:	0793      	lsls	r3, r2, #30
 8004940:	bf18      	it	ne
 8004942:	2300      	movne	r3, #0
 8004944:	680e      	ldr	r6, [r1, #0]
 8004946:	bf08      	it	eq
 8004948:	694b      	ldreq	r3, [r1, #20]
 800494a:	eba6 0807 	sub.w	r8, r6, r7
 800494e:	600f      	str	r7, [r1, #0]
 8004950:	608b      	str	r3, [r1, #8]
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	dd9c      	ble.n	8004892 <__sflush_r+0x1a>
 8004958:	4643      	mov	r3, r8
 800495a:	463a      	mov	r2, r7
 800495c:	4628      	mov	r0, r5
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004962:	47b0      	blx	r6
 8004964:	2800      	cmp	r0, #0
 8004966:	dc06      	bgt.n	8004976 <__sflush_r+0xfe>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f04f 30ff 	mov.w	r0, #4294967295
 800496e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	e78e      	b.n	8004894 <__sflush_r+0x1c>
 8004976:	4407      	add	r7, r0
 8004978:	eba8 0800 	sub.w	r8, r8, r0
 800497c:	e7e9      	b.n	8004952 <__sflush_r+0xda>
 800497e:	bf00      	nop
 8004980:	20400001 	.word	0x20400001

08004984 <_fflush_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b913      	cbnz	r3, 8004994 <_fflush_r+0x10>
 800498e:	2500      	movs	r5, #0
 8004990:	4628      	mov	r0, r5
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	b118      	cbz	r0, 800499e <_fflush_r+0x1a>
 8004996:	6983      	ldr	r3, [r0, #24]
 8004998:	b90b      	cbnz	r3, 800499e <_fflush_r+0x1a>
 800499a:	f000 f887 	bl	8004aac <__sinit>
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <_fflush_r+0x6c>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d11b      	bne.n	80049dc <_fflush_r+0x58>
 80049a4:	686c      	ldr	r4, [r5, #4]
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <_fflush_r+0xa>
 80049ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b0:	07d0      	lsls	r0, r2, #31
 80049b2:	d404      	bmi.n	80049be <_fflush_r+0x3a>
 80049b4:	0599      	lsls	r1, r3, #22
 80049b6:	d402      	bmi.n	80049be <_fflush_r+0x3a>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 f915 	bl	8004be8 <__retarget_lock_acquire_recursive>
 80049be:	4628      	mov	r0, r5
 80049c0:	4621      	mov	r1, r4
 80049c2:	f7ff ff59 	bl	8004878 <__sflush_r>
 80049c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c8:	4605      	mov	r5, r0
 80049ca:	07da      	lsls	r2, r3, #31
 80049cc:	d4e0      	bmi.n	8004990 <_fflush_r+0xc>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d4dd      	bmi.n	8004990 <_fflush_r+0xc>
 80049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d6:	f000 f908 	bl	8004bea <__retarget_lock_release_recursive>
 80049da:	e7d9      	b.n	8004990 <_fflush_r+0xc>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_fflush_r+0x70>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <_fflush_r+0x62>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7df      	b.n	80049a6 <_fflush_r+0x22>
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <_fflush_r+0x74>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7da      	b.n	80049a6 <_fflush_r+0x22>
 80049f0:	080053a8 	.word	0x080053a8
 80049f4:	080053c8 	.word	0x080053c8
 80049f8:	08005388 	.word	0x08005388

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	e9c0 3300 	strd	r3, r3, [r0]
 8004a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	6183      	str	r3, [r0, #24]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f7ff f819 	bl	8003a50 <memset>
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x38>)
 8004a20:	6224      	str	r4, [r4, #32]
 8004a22:	6263      	str	r3, [r4, #36]	; 0x24
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <std+0x3c>)
 8004a26:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <std+0x40>)
 8004a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <std+0x44>)
 8004a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	08004e0d 	.word	0x08004e0d
 8004a38:	08004e2f 	.word	0x08004e2f
 8004a3c:	08004e67 	.word	0x08004e67
 8004a40:	08004e8b 	.word	0x08004e8b

08004a44 <_cleanup_r>:
 8004a44:	4901      	ldr	r1, [pc, #4]	; (8004a4c <_cleanup_r+0x8>)
 8004a46:	f000 b8af 	b.w	8004ba8 <_fwalk_reent>
 8004a4a:	bf00      	nop
 8004a4c:	08004985 	.word	0x08004985

08004a50 <__sfmoreglue>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	2568      	movs	r5, #104	; 0x68
 8004a54:	1e4a      	subs	r2, r1, #1
 8004a56:	4355      	muls	r5, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a5e:	f7ff f98f 	bl	8003d80 <_malloc_r>
 8004a62:	4604      	mov	r4, r0
 8004a64:	b140      	cbz	r0, 8004a78 <__sfmoreglue+0x28>
 8004a66:	2100      	movs	r1, #0
 8004a68:	e9c0 1600 	strd	r1, r6, [r0]
 8004a6c:	300c      	adds	r0, #12
 8004a6e:	60a0      	str	r0, [r4, #8]
 8004a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a74:	f7fe ffec 	bl	8003a50 <memset>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}

08004a7c <__sfp_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sfp_lock_acquire+0x8>)
 8004a7e:	f000 b8b3 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	2000028c 	.word	0x2000028c

08004a88 <__sfp_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sfp_lock_release+0x8>)
 8004a8a:	f000 b8ae 	b.w	8004bea <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	2000028c 	.word	0x2000028c

08004a94 <__sinit_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sinit_lock_acquire+0x8>)
 8004a96:	f000 b8a7 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20000287 	.word	0x20000287

08004aa0 <__sinit_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sinit_lock_release+0x8>)
 8004aa2:	f000 b8a2 	b.w	8004bea <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20000287 	.word	0x20000287

08004aac <__sinit>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	f7ff fff0 	bl	8004a94 <__sinit_lock_acquire>
 8004ab4:	69a3      	ldr	r3, [r4, #24]
 8004ab6:	b11b      	cbz	r3, 8004ac0 <__sinit+0x14>
 8004ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abc:	f7ff bff0 	b.w	8004aa0 <__sinit_lock_release>
 8004ac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <__sinit+0x68>)
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <__sinit+0x6c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	bf08      	it	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	bf08      	it	eq
 8004ad8:	61a3      	streq	r3, [r4, #24]
 8004ada:	f000 f81f 	bl	8004b1c <__sfp>
 8004ade:	6060      	str	r0, [r4, #4]
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 f81b 	bl	8004b1c <__sfp>
 8004ae6:	60a0      	str	r0, [r4, #8]
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 f817 	bl	8004b1c <__sfp>
 8004aee:	2200      	movs	r2, #0
 8004af0:	2104      	movs	r1, #4
 8004af2:	60e0      	str	r0, [r4, #12]
 8004af4:	6860      	ldr	r0, [r4, #4]
 8004af6:	f7ff ff81 	bl	80049fc <std>
 8004afa:	2201      	movs	r2, #1
 8004afc:	2109      	movs	r1, #9
 8004afe:	68a0      	ldr	r0, [r4, #8]
 8004b00:	f7ff ff7c 	bl	80049fc <std>
 8004b04:	2202      	movs	r2, #2
 8004b06:	2112      	movs	r1, #18
 8004b08:	68e0      	ldr	r0, [r4, #12]
 8004b0a:	f7ff ff77 	bl	80049fc <std>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61a3      	str	r3, [r4, #24]
 8004b12:	e7d1      	b.n	8004ab8 <__sinit+0xc>
 8004b14:	0800519c 	.word	0x0800519c
 8004b18:	08004a45 	.word	0x08004a45

08004b1c <__sfp>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	4607      	mov	r7, r0
 8004b20:	f7ff ffac 	bl	8004a7c <__sfp_lock_acquire>
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <__sfp+0x84>)
 8004b26:	681e      	ldr	r6, [r3, #0]
 8004b28:	69b3      	ldr	r3, [r6, #24]
 8004b2a:	b913      	cbnz	r3, 8004b32 <__sfp+0x16>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7ff ffbd 	bl	8004aac <__sinit>
 8004b32:	3648      	adds	r6, #72	; 0x48
 8004b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	d503      	bpl.n	8004b44 <__sfp+0x28>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	b30b      	cbz	r3, 8004b84 <__sfp+0x68>
 8004b40:	6836      	ldr	r6, [r6, #0]
 8004b42:	e7f7      	b.n	8004b34 <__sfp+0x18>
 8004b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b48:	b9d5      	cbnz	r5, 8004b80 <__sfp+0x64>
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <__sfp+0x88>)
 8004b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b50:	60e3      	str	r3, [r4, #12]
 8004b52:	6665      	str	r5, [r4, #100]	; 0x64
 8004b54:	f000 f847 	bl	8004be6 <__retarget_lock_init_recursive>
 8004b58:	f7ff ff96 	bl	8004a88 <__sfp_lock_release>
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	4629      	mov	r1, r5
 8004b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b68:	6025      	str	r5, [r4, #0]
 8004b6a:	61a5      	str	r5, [r4, #24]
 8004b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b70:	f7fe ff6e 	bl	8003a50 <memset>
 8004b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	3468      	adds	r4, #104	; 0x68
 8004b82:	e7d9      	b.n	8004b38 <__sfp+0x1c>
 8004b84:	2104      	movs	r1, #4
 8004b86:	4638      	mov	r0, r7
 8004b88:	f7ff ff62 	bl	8004a50 <__sfmoreglue>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	6030      	str	r0, [r6, #0]
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d1d5      	bne.n	8004b40 <__sfp+0x24>
 8004b94:	f7ff ff78 	bl	8004a88 <__sfp_lock_release>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	e7ee      	b.n	8004b7c <__sfp+0x60>
 8004b9e:	bf00      	nop
 8004ba0:	0800519c 	.word	0x0800519c
 8004ba4:	ffff0001 	.word	0xffff0001

08004ba8 <_fwalk_reent>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	4606      	mov	r6, r0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	2700      	movs	r7, #0
 8004bb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bba:	f1b9 0901 	subs.w	r9, r9, #1
 8004bbe:	d505      	bpl.n	8004bcc <_fwalk_reent+0x24>
 8004bc0:	6824      	ldr	r4, [r4, #0]
 8004bc2:	2c00      	cmp	r4, #0
 8004bc4:	d1f7      	bne.n	8004bb6 <_fwalk_reent+0xe>
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d907      	bls.n	8004be2 <_fwalk_reent+0x3a>
 8004bd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	d003      	beq.n	8004be2 <_fwalk_reent+0x3a>
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	47c0      	blx	r8
 8004be0:	4307      	orrs	r7, r0
 8004be2:	3568      	adds	r5, #104	; 0x68
 8004be4:	e7e9      	b.n	8004bba <_fwalk_reent+0x12>

08004be6 <__retarget_lock_init_recursive>:
 8004be6:	4770      	bx	lr

08004be8 <__retarget_lock_acquire_recursive>:
 8004be8:	4770      	bx	lr

08004bea <__retarget_lock_release_recursive>:
 8004bea:	4770      	bx	lr

08004bec <__swhatbuf_r>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	460e      	mov	r6, r1
 8004bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	461d      	mov	r5, r3
 8004bfa:	b096      	sub	sp, #88	; 0x58
 8004bfc:	da07      	bge.n	8004c0e <__swhatbuf_r+0x22>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	89b3      	ldrh	r3, [r6, #12]
 8004c04:	061a      	lsls	r2, r3, #24
 8004c06:	d410      	bmi.n	8004c2a <__swhatbuf_r+0x3e>
 8004c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0c:	e00e      	b.n	8004c2c <__swhatbuf_r+0x40>
 8004c0e:	466a      	mov	r2, sp
 8004c10:	f000 f962 	bl	8004ed8 <_fstat_r>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	dbf2      	blt.n	8004bfe <__swhatbuf_r+0x12>
 8004c18:	9a01      	ldr	r2, [sp, #4]
 8004c1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c22:	425a      	negs	r2, r3
 8004c24:	415a      	adcs	r2, r3
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	e7ee      	b.n	8004c08 <__swhatbuf_r+0x1c>
 8004c2a:	2340      	movs	r3, #64	; 0x40
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	b016      	add	sp, #88	; 0x58
 8004c32:	bd70      	pop	{r4, r5, r6, pc}

08004c34 <__smakebuf_r>:
 8004c34:	898b      	ldrh	r3, [r1, #12]
 8004c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c38:	079d      	lsls	r5, r3, #30
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	d507      	bpl.n	8004c50 <__smakebuf_r+0x1c>
 8004c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	6123      	str	r3, [r4, #16]
 8004c48:	2301      	movs	r3, #1
 8004c4a:	6163      	str	r3, [r4, #20]
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	466a      	mov	r2, sp
 8004c52:	ab01      	add	r3, sp, #4
 8004c54:	f7ff ffca 	bl	8004bec <__swhatbuf_r>
 8004c58:	9900      	ldr	r1, [sp, #0]
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7ff f88f 	bl	8003d80 <_malloc_r>
 8004c62:	b948      	cbnz	r0, 8004c78 <__smakebuf_r+0x44>
 8004c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c68:	059a      	lsls	r2, r3, #22
 8004c6a:	d4ef      	bmi.n	8004c4c <__smakebuf_r+0x18>
 8004c6c:	f023 0303 	bic.w	r3, r3, #3
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	e7e3      	b.n	8004c40 <__smakebuf_r+0xc>
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <__smakebuf_r+0x7c>)
 8004c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	6020      	str	r0, [r4, #0]
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	9b00      	ldr	r3, [sp, #0]
 8004c88:	6120      	str	r0, [r4, #16]
 8004c8a:	6163      	str	r3, [r4, #20]
 8004c8c:	9b01      	ldr	r3, [sp, #4]
 8004c8e:	b15b      	cbz	r3, 8004ca8 <__smakebuf_r+0x74>
 8004c90:	4630      	mov	r0, r6
 8004c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c96:	f000 f931 	bl	8004efc <_isatty_r>
 8004c9a:	b128      	cbz	r0, 8004ca8 <__smakebuf_r+0x74>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	89a0      	ldrh	r0, [r4, #12]
 8004caa:	4305      	orrs	r5, r0
 8004cac:	81a5      	strh	r5, [r4, #12]
 8004cae:	e7cd      	b.n	8004c4c <__smakebuf_r+0x18>
 8004cb0:	08004a45 	.word	0x08004a45

08004cb4 <memchr>:
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	b2c9      	uxtb	r1, r1
 8004cba:	4402      	add	r2, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	d101      	bne.n	8004cc6 <memchr+0x12>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e003      	b.n	8004cce <memchr+0x1a>
 8004cc6:	7804      	ldrb	r4, [r0, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	428c      	cmp	r4, r1
 8004ccc:	d1f6      	bne.n	8004cbc <memchr+0x8>
 8004cce:	bd10      	pop	{r4, pc}

08004cd0 <memcpy>:
 8004cd0:	440a      	add	r2, r1
 8004cd2:	4291      	cmp	r1, r2
 8004cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd8:	d100      	bne.n	8004cdc <memcpy+0xc>
 8004cda:	4770      	bx	lr
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce2:	4291      	cmp	r1, r2
 8004ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce8:	d1f9      	bne.n	8004cde <memcpy+0xe>
 8004cea:	bd10      	pop	{r4, pc}

08004cec <memmove>:
 8004cec:	4288      	cmp	r0, r1
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	eb01 0402 	add.w	r4, r1, r2
 8004cf4:	d902      	bls.n	8004cfc <memmove+0x10>
 8004cf6:	4284      	cmp	r4, r0
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	d807      	bhi.n	8004d0c <memmove+0x20>
 8004cfc:	1e43      	subs	r3, r0, #1
 8004cfe:	42a1      	cmp	r1, r4
 8004d00:	d008      	beq.n	8004d14 <memmove+0x28>
 8004d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d0a:	e7f8      	b.n	8004cfe <memmove+0x12>
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	4402      	add	r2, r0
 8004d10:	428a      	cmp	r2, r1
 8004d12:	d100      	bne.n	8004d16 <memmove+0x2a>
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d1e:	e7f7      	b.n	8004d10 <memmove+0x24>

08004d20 <__malloc_lock>:
 8004d20:	4801      	ldr	r0, [pc, #4]	; (8004d28 <__malloc_lock+0x8>)
 8004d22:	f7ff bf61 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004d26:	bf00      	nop
 8004d28:	20000288 	.word	0x20000288

08004d2c <__malloc_unlock>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	; (8004d34 <__malloc_unlock+0x8>)
 8004d2e:	f7ff bf5c 	b.w	8004bea <__retarget_lock_release_recursive>
 8004d32:	bf00      	nop
 8004d34:	20000288 	.word	0x20000288

08004d38 <_realloc_r>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	460e      	mov	r6, r1
 8004d40:	b921      	cbnz	r1, 8004d4c <_realloc_r+0x14>
 8004d42:	4611      	mov	r1, r2
 8004d44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d48:	f7ff b81a 	b.w	8003d80 <_malloc_r>
 8004d4c:	b922      	cbnz	r2, 8004d58 <_realloc_r+0x20>
 8004d4e:	f7fe ffcb 	bl	8003ce8 <_free_r>
 8004d52:	4625      	mov	r5, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d58:	f000 f8f2 	bl	8004f40 <_malloc_usable_size_r>
 8004d5c:	42a0      	cmp	r0, r4
 8004d5e:	d20f      	bcs.n	8004d80 <_realloc_r+0x48>
 8004d60:	4621      	mov	r1, r4
 8004d62:	4638      	mov	r0, r7
 8004d64:	f7ff f80c 	bl	8003d80 <_malloc_r>
 8004d68:	4605      	mov	r5, r0
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d0f2      	beq.n	8004d54 <_realloc_r+0x1c>
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4622      	mov	r2, r4
 8004d72:	f7ff ffad 	bl	8004cd0 <memcpy>
 8004d76:	4631      	mov	r1, r6
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7fe ffb5 	bl	8003ce8 <_free_r>
 8004d7e:	e7e9      	b.n	8004d54 <_realloc_r+0x1c>
 8004d80:	4635      	mov	r5, r6
 8004d82:	e7e7      	b.n	8004d54 <_realloc_r+0x1c>

08004d84 <_raise_r>:
 8004d84:	291f      	cmp	r1, #31
 8004d86:	b538      	push	{r3, r4, r5, lr}
 8004d88:	4604      	mov	r4, r0
 8004d8a:	460d      	mov	r5, r1
 8004d8c:	d904      	bls.n	8004d98 <_raise_r+0x14>
 8004d8e:	2316      	movs	r3, #22
 8004d90:	6003      	str	r3, [r0, #0]
 8004d92:	f04f 30ff 	mov.w	r0, #4294967295
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d9a:	b112      	cbz	r2, 8004da2 <_raise_r+0x1e>
 8004d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004da0:	b94b      	cbnz	r3, 8004db6 <_raise_r+0x32>
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f830 	bl	8004e08 <_getpid_r>
 8004da8:	462a      	mov	r2, r5
 8004daa:	4601      	mov	r1, r0
 8004dac:	4620      	mov	r0, r4
 8004dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db2:	f000 b817 	b.w	8004de4 <_kill_r>
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d00a      	beq.n	8004dd0 <_raise_r+0x4c>
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	d103      	bne.n	8004dc6 <_raise_r+0x42>
 8004dbe:	2316      	movs	r3, #22
 8004dc0:	6003      	str	r3, [r0, #0]
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	e7e7      	b.n	8004d96 <_raise_r+0x12>
 8004dc6:	2400      	movs	r4, #0
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004dce:	4798      	blx	r3
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e7e0      	b.n	8004d96 <_raise_r+0x12>

08004dd4 <raise>:
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <raise+0xc>)
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f7ff bfd3 	b.w	8004d84 <_raise_r>
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <_kill_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	2300      	movs	r3, #0
 8004de8:	4d06      	ldr	r5, [pc, #24]	; (8004e04 <_kill_r+0x20>)
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	f7fb fefe 	bl	8000bf2 <_kill>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d102      	bne.n	8004e00 <_kill_r+0x1c>
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	b103      	cbz	r3, 8004e00 <_kill_r+0x1c>
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	bd38      	pop	{r3, r4, r5, pc}
 8004e02:	bf00      	nop
 8004e04:	20000290 	.word	0x20000290

08004e08 <_getpid_r>:
 8004e08:	f7fb beec 	b.w	8000be4 <_getpid>

08004e0c <__sread>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	f000 f89c 	bl	8004f50 <_read_r>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	bfab      	itete	ge
 8004e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e20:	181b      	addge	r3, r3, r0
 8004e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e26:	bfac      	ite	ge
 8004e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e2a:	81a3      	strhlt	r3, [r4, #12]
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <__swrite>:
 8004e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	461f      	mov	r7, r3
 8004e34:	898b      	ldrh	r3, [r1, #12]
 8004e36:	4605      	mov	r5, r0
 8004e38:	05db      	lsls	r3, r3, #23
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	d505      	bpl.n	8004e4c <__swrite+0x1e>
 8004e40:	2302      	movs	r3, #2
 8004e42:	2200      	movs	r2, #0
 8004e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e48:	f000 f868 	bl	8004f1c <_lseek_r>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	4632      	mov	r2, r6
 8004e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	4628      	mov	r0, r5
 8004e58:	463b      	mov	r3, r7
 8004e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e62:	f000 b817 	b.w	8004e94 <_write_r>

08004e66 <__sseek>:
 8004e66:	b510      	push	{r4, lr}
 8004e68:	460c      	mov	r4, r1
 8004e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6e:	f000 f855 	bl	8004f1c <_lseek_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	bf15      	itete	ne
 8004e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e82:	81a3      	strheq	r3, [r4, #12]
 8004e84:	bf18      	it	ne
 8004e86:	81a3      	strhne	r3, [r4, #12]
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <__sclose>:
 8004e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8e:	f000 b813 	b.w	8004eb8 <_close_r>
	...

08004e94 <_write_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4d05      	ldr	r5, [pc, #20]	; (8004eb4 <_write_r+0x20>)
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fb fedc 	bl	8000c60 <_write>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_write_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_write_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000290 	.word	0x20000290

08004eb8 <_close_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4d05      	ldr	r5, [pc, #20]	; (8004ed4 <_close_r+0x1c>)
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fb fee8 	bl	8000c98 <_close>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_close_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_close_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20000290 	.word	0x20000290

08004ed8 <_fstat_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	2300      	movs	r3, #0
 8004edc:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_fstat_r+0x20>)
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	602b      	str	r3, [r5, #0]
 8004ee6:	f7fb fee2 	bl	8000cae <_fstat>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d102      	bne.n	8004ef4 <_fstat_r+0x1c>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	b103      	cbz	r3, 8004ef4 <_fstat_r+0x1c>
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000290 	.word	0x20000290

08004efc <_isatty_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	2300      	movs	r3, #0
 8004f00:	4d05      	ldr	r5, [pc, #20]	; (8004f18 <_isatty_r+0x1c>)
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f7fb fee0 	bl	8000ccc <_isatty>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_isatty_r+0x1a>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_isatty_r+0x1a>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	20000290 	.word	0x20000290

08004f1c <_lseek_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	2200      	movs	r2, #0
 8004f26:	4d05      	ldr	r5, [pc, #20]	; (8004f3c <_lseek_r+0x20>)
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f7fb fed8 	bl	8000ce0 <_lseek>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_lseek_r+0x1e>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_lseek_r+0x1e>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20000290 	.word	0x20000290

08004f40 <_malloc_usable_size_r>:
 8004f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f44:	1f18      	subs	r0, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfbc      	itt	lt
 8004f4a:	580b      	ldrlt	r3, [r1, r0]
 8004f4c:	18c0      	addlt	r0, r0, r3
 8004f4e:	4770      	bx	lr

08004f50 <_read_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4d05      	ldr	r5, [pc, #20]	; (8004f70 <_read_r+0x20>)
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fb fe61 	bl	8000c26 <_read>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_read_r+0x1e>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_read_r+0x1e>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	20000290 	.word	0x20000290

08004f74 <_init>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	bf00      	nop
 8004f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	469e      	mov	lr, r3
 8004f7e:	4770      	bx	lr

08004f80 <_fini>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

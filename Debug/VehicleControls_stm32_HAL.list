
VehicleControls_stm32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005400  08005400  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005400  08005400  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005400  08005400  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08005478  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005478  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001155b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be1  00000000  00000000  000315f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000341d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00035008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197e7  00000000  00000000  00035d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010708  00000000  00000000  0004f4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a676  00000000  00000000  0005fbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea265  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000450c  00000000  00000000  000ea2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f8c 	.word	0x08004f8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f8c 	.word	0x08004f8c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <JDY09_StartNewIRQRx>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_StartNewIRQRx(JDY09_t *jdy09)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	// start another IRQ for single sign
	HAL_UART_Receive_IT(jdy09->huart, &(jdy09->RecieveBufferIT), 1);
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	6818      	ldr	r0, [r3, #0]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3324      	adds	r3, #36	; 0x24
 8000170:	2201      	movs	r2, #1
 8000172:	4619      	mov	r1, r3
 8000174:	f002 fff2 	bl	800315c <HAL_UART_Receive_IT>
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <JDY09_DisplayTerminal>:
 *
 * @return - void
 */

static void JDY09_DisplayTerminal(char *Msg)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
	...

08000194 <JDY09_Init>:
void JDY09_Init(JDY09_t *jdy09, UART_HandleTypeDef *huart
#if (JDY09_USE_STATE_PIN == 1)
		,GPIO_TypeDef *StateGPIOPort, uint16_t StateGPIOPin
#endif
		)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]

	// init msg
	JDY09_DisplayTerminal("JDY-09 Initializing... \n\r");
 800019e:	4809      	ldr	r0, [pc, #36]	; (80001c4 <JDY09_Init+0x30>)
 80001a0:	f7ff ffee 	bl	8000180 <JDY09_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(jdy09->RingBuffer));
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	3326      	adds	r3, #38	; 0x26
 80001a8:	4618      	mov	r0, r3
 80001aa:	f000 fca8 	bl	8000afe <RB_Flush>

	// Assign uart
	jdy09->huart = huart;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	601a      	str	r2, [r3, #0]
	jdy09->StateGPIOPort = StateGPIOPort;
	jdy09->StatePinNumber = StateGPIOPin;
#endif
	// if irq mode is used for receive
#if (JDY09_UART_RX_IT == 1)
	JDY09_StartNewIRQRx(jdy09);
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f7ff ffd3 	bl	8000160 <JDY09_StartNewIRQRx>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETADRESS);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETBAUDRATE);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETNAME);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETPASSWORD);
#endif
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	08004fe4 	.word	0x08004fe4

080001c8 <JDY09_ClearMsgPendingFlag>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_ClearMsgPendingFlag(JDY09_t *jdy09)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	jdy09->MessagePending = JDY09_NOMESSAGE;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2200      	movs	r2, #0
 80001d4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <JDY09_CheckPendingMessages>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t JDY09_CheckPendingMessages(JDY09_t *jdy09, uint8_t *MsgBuffer)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b084      	sub	sp, #16
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (jdy09->LinesRecieved > 0)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d032      	beq.n	800025e <JDY09_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(jdy09->RingBuffer), &temp);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	3326      	adds	r3, #38	; 0x26
 8000204:	f107 020e 	add.w	r2, r7, #14
 8000208:	4611      	mov	r1, r2
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fc20 	bl	8000a50 <RB_Read>
			if (temp == JDY09_LASTCHARACTER)
 8000210:	7bbb      	ldrb	r3, [r7, #14]
 8000212:	2b0a      	cmp	r3, #10
 8000214:	d10b      	bne.n	800022e <JDY09_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = JDY09_LASTCHARACTER;
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	4413      	add	r3, r2
 800021c:	220a      	movs	r2, #10
 800021e:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	3301      	adds	r3, #1
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	4413      	add	r3, r2
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	e004      	b.n	8000238 <JDY09_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	4413      	add	r3, r2
 8000234:	7bba      	ldrb	r2, [r7, #14]
 8000236:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	3301      	adds	r3, #1
 800023c:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != JDY09_LASTCHARACTER);
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	2b0a      	cmp	r3, #10
 8000242:	d1dd      	bne.n	8000200 <JDY09_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		jdy09->LinesRecieved--;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800024a:	b2db      	uxtb	r3, r3
 800024c:	3b01      	subs	r3, #1
 800024e:	b2da      	uxtb	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		//set up flag that message is ready to parse
		jdy09->MessagePending = JDY09_MESSAGEPENDING;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2201      	movs	r2, #1
 800025a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	}

	// return if flag status
	return jdy09->MessagePending;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
}
 8000264:	4618      	mov	r0, r3
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <JDY09_RxCpltCallbackIT>:
 * @param[*huart] - uart handle
 * @return - void
 */
#if (JDY09_UART_RX_IT == 1)
void JDY09_RxCpltCallbackIT(JDY09_t *jdy09, UART_HandleTypeDef *huart)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]

	//check if IRQ is coming from correct uart
	if (jdy09->huart->Instance == huart->Instance)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d11b      	bne.n	80002bc <JDY09_RxCpltCallbackIT+0x50>
	{
		//write a sign to ring buffer
		RB_Write((&(jdy09->RingBuffer)), jdy09->RecieveBufferIT);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000290:	4619      	mov	r1, r3
 8000292:	4610      	mov	r0, r2
 8000294:	f000 fc08 	bl	8000aa8 <RB_Write>

		// when line is complete -> add 1 to received lines
		if (jdy09->RecieveBufferIT == JDY09_LASTCHARACTER)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800029e:	2b0a      	cmp	r3, #10
 80002a0:	d109      	bne.n	80002b6 <JDY09_RxCpltCallbackIT+0x4a>
		{
			(jdy09->LinesRecieved)++;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	3301      	adds	r3, #1
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

			// if user wants to start irq in this momemnt
#if(JDY09_IRQ_CONTINUOUSSTART == 1)
			JDY09_StartNewIRQRx(jdy09);
#endif
			return;
 80002b4:	e002      	b.n	80002bc <JDY09_RxCpltCallbackIT+0x50>
		}
		// start another IRQ for single sign
		JDY09_StartNewIRQRx(jdy09);
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f7ff ff52 	bl	8000160 <JDY09_StartNewIRQRx>
	}
}
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_DMA_Init+0x28>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <MX_DMA_Init+0x28>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <MX_DMA_Init+0x28>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_GPIO_Init+0x9c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a20      	ldr	r2, [pc, #128]	; (800038c <MX_GPIO_Init+0x9c>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <MX_GPIO_Init+0x9c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_GPIO_Init+0x9c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a1a      	ldr	r2, [pc, #104]	; (800038c <MX_GPIO_Init+0x9c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_GPIO_Init+0x9c>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_COMM_Pin|LED_FRONT1_Pin|LED_FRONT2_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	21e0      	movs	r1, #224	; 0xe0
 8000338:	4815      	ldr	r0, [pc, #84]	; (8000390 <MX_GPIO_Init+0xa0>)
 800033a:	f001 fbf5 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR1_Pin|MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000344:	4813      	ldr	r0, [pc, #76]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000346:	f001 fbef 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_COMM_Pin|LED_FRONT1_Pin|LED_FRONT2_Pin;
 800034a:	23e0      	movs	r3, #224	; 0xe0
 800034c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	4619      	mov	r1, r3
 8000360:	480b      	ldr	r0, [pc, #44]	; (8000390 <MX_GPIO_Init+0xa0>)
 8000362:	f001 fa67 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_DIR1_Pin|MOTOR_DIR2_Pin;
 8000366:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800036a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	2301      	movs	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	2302      	movs	r3, #2
 8000376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	f107 0308 	add.w	r3, r7, #8
 800037c:	4619      	mov	r1, r3
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000380:	f001 fa58 	bl	8001834 <HAL_GPIO_Init>

}
 8000384:	bf00      	nop
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	40010800 	.word	0x40010800
 8000394:	40010c00 	.word	0x40010c00

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039e:	f000 fec9 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a2:	f000 f86b 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a6:	f7ff ffa3 	bl	80002f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80003aa:	f7ff ff8b 	bl	80002c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003ae:	f000 fded 	bl	8000f8c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80003b2:	f000 fce9 	bl	8000d88 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80003b6:	f000 f8a2 	bl	80004fe <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  JDY09_Init(&JDY09_1, &huart1);
 80003ba:	4927      	ldr	r1, [pc, #156]	; (8000458 <main+0xc0>)
 80003bc:	4827      	ldr	r0, [pc, #156]	; (800045c <main+0xc4>)
 80003be:	f7ff fee9 	bl	8000194 <JDY09_Init>
  Motor_Init(&Motor_1, &htim1, TIM_CHANNEL_2);
 80003c2:	2204      	movs	r2, #4
 80003c4:	4926      	ldr	r1, [pc, #152]	; (8000460 <main+0xc8>)
 80003c6:	4827      	ldr	r0, [pc, #156]	; (8000464 <main+0xcc>)
 80003c8:	f000 f998 	bl	80006fc <Motor_Init>
  Servo_Init(&Servo_1, &htim1, TIM_CHANNEL_1);
 80003cc:	2200      	movs	r2, #0
 80003ce:	4924      	ldr	r1, [pc, #144]	; (8000460 <main+0xc8>)
 80003d0:	4825      	ldr	r0, [pc, #148]	; (8000468 <main+0xd0>)
 80003d2:	f000 f9f3 	bl	80007bc <Servo_Init>

  uint8_t AckMsg[8];
  uint8_t Len;
  Len = sprintf((char*) AckMsg, "OKAY\n");
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4924      	ldr	r1, [pc, #144]	; (800046c <main+0xd4>)
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fb4c 	bl	8003a78 <siprintf>
 80003e0:	4603      	mov	r3, r0
 80003e2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// check if there is msg - if yes transfer it to a buffer
		if (JDY09_CheckPendingMessages(&JDY09_1,
 80003e4:	4922      	ldr	r1, [pc, #136]	; (8000470 <main+0xd8>)
 80003e6:	481d      	ldr	r0, [pc, #116]	; (800045c <main+0xc4>)
 80003e8:	f7ff fefb 	bl	80001e2 <JDY09_CheckPendingMessages>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d121      	bne.n	8000436 <main+0x9e>
				TransferBuffer) == JDY09_MESSAGEPENDING)
		{
			//clear pending flag
			JDY09_ClearMsgPendingFlag(&JDY09_1);
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <main+0xc4>)
 80003f4:	f7ff fee8 	bl	80001c8 <JDY09_ClearMsgPendingFlag>

			// fetch data from command message
			Parser_Parse(TransferBuffer, &Servo_1, &Motor_1, &ControlLED);
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <main+0xdc>)
 80003fa:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <main+0xcc>)
 80003fc:	491a      	ldr	r1, [pc, #104]	; (8000468 <main+0xd0>)
 80003fe:	481c      	ldr	r0, [pc, #112]	; (8000470 <main+0xd8>)
 8000400:	f000 fa9a 	bl	8000938 <Parser_Parse>

			// control servo
			Servo_Control(&Servo_1);
 8000404:	4818      	ldr	r0, [pc, #96]	; (8000468 <main+0xd0>)
 8000406:	f000 f992 	bl	800072e <Servo_Control>

			// control motor
			Motor_Control(&Motor_1);
 800040a:	4816      	ldr	r0, [pc, #88]	; (8000464 <main+0xcc>)
 800040c:	f000 f8a0 	bl	8000550 <Motor_Control>

			// control LEDs
			LED_Control(&ControlLED);
 8000410:	4818      	ldr	r0, [pc, #96]	; (8000474 <main+0xdc>)
 8000412:	f000 f9ed 	bl	80007f0 <LED_Control>

			// feed communcation timer
			LastMsgTimer = HAL_GetTick();
 8000416:	f000 fee5 	bl	80011e4 <HAL_GetTick>
 800041a:	4603      	mov	r3, r0
 800041c:	4a16      	ldr	r2, [pc, #88]	; (8000478 <main+0xe0>)
 800041e:	6013      	str	r3, [r2, #0]

			// send acknowledge message
			HAL_UART_Transmit(&huart1, AckMsg, Len, 1000);
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	b29a      	uxth	r2, r3
 8000424:	1d39      	adds	r1, r7, #4
 8000426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <main+0xc0>)
 800042c:	f002 fe04 	bl	8003038 <HAL_UART_Transmit>
			
			// start new IRQ
			JDY09_StartNewIRQRx(&JDY09_1);
 8000430:	480a      	ldr	r0, [pc, #40]	; (800045c <main+0xc4>)
 8000432:	f7ff fe95 	bl	8000160 <JDY09_StartNewIRQRx>

		}

		//if there was no message for 3 seconds, shut down motors and LEDs
		if ((HAL_GetTick() - LastMsgTimer) > 3000)
 8000436:	f000 fed5 	bl	80011e4 <HAL_GetTick>
 800043a:	4602      	mov	r2, r0
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <main+0xe0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000446:	4293      	cmp	r3, r2
 8000448:	d9cc      	bls.n	80003e4 <main+0x4c>
		{
			Vehicle_Shutdown(&ControlLED, &Servo_1, &Motor_1);
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <main+0xcc>)
 800044c:	4906      	ldr	r1, [pc, #24]	; (8000468 <main+0xd0>)
 800044e:	4809      	ldr	r0, [pc, #36]	; (8000474 <main+0xdc>)
 8000450:	f000 fa0c 	bl	800086c <Vehicle_Shutdown>
		if (JDY09_CheckPendingMessages(&JDY09_1,
 8000454:	e7c6      	b.n	80003e4 <main+0x4c>
 8000456:	bf00      	nop
 8000458:	2000023c 	.word	0x2000023c
 800045c:	2000009c 	.word	0x2000009c
 8000460:	200001b0 	.word	0x200001b0
 8000464:	200001a0 	.word	0x200001a0
 8000468:	20000154 	.word	0x20000154
 800046c:	08005178 	.word	0x08005178
 8000470:	20000160 	.word	0x20000160
 8000474:	20000150 	.word	0x20000150
 8000478:	2000008c 	.word	0x2000008c

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b090      	sub	sp, #64	; 0x40
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f003 faec 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	2302      	movs	r3, #2
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a6:	2310      	movs	r3, #16
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004ae:	2300      	movs	r3, #0
 80004b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fb4b 	bl	8001b58 <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004c8:	f000 f83c 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	230f      	movs	r3, #15
 80004ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	2302      	movs	r3, #2
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 fdb6 	bl	8002058 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004f2:	f000 f827 	bl	8000544 <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	; 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2025      	movs	r0, #37	; 0x25
 8000508:	f000 ff4d 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800050c:	2025      	movs	r0, #37	; 0x25
 800050e:	f000 ff66 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	200f      	movs	r0, #15
 8000518:	f000 ff45 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800051c:	200f      	movs	r0, #15
 800051e:	f000 ff5e 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
#if (JDY09_UART_RX_IT == 1)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	// Callback from BT module
	JDY09_RxCpltCallbackIT(&JDY09_1, huart);
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <HAL_UART_RxCpltCallback+0x18>)
 8000534:	f7ff fe9a 	bl	800026c <JDY09_RxCpltCallbackIT>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000009c 	.word	0x2000009c

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <Motor_Control>:
 *
 * @param[*Motor] - handler of Motor struct
 * @return - void
 */
void Motor_Control(Motor_t *Motor)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

	if (Motor->ControlOn == 1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7b5b      	ldrb	r3, [r3, #13]
 800055c:	2b01      	cmp	r3, #1
 800055e:	f040 809d 	bne.w	800069c <Motor_Control+0x14c>
	{
		// check if value is not within deadband limits
		if (Motor->PWMCommandNew > MOTOR_DEADBAND_LOW_LIMIT
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	f244 6250 	movw	r2, #18000	; 0x4650
 800056a:	4293      	cmp	r3, r2
 800056c:	d935      	bls.n	80005da <Motor_Control+0x8a>
				&& Motor->PWMCommandNew < MOTOR_DEADBAND_HIGH_LIMIT)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	f245 52ef 	movw	r2, #21999	; 0x55ef
 8000576:	4293      	cmp	r3, r2
 8000578:	d82f      	bhi.n	80005da <Motor_Control+0x8a>
		{
			// if value is in deadband set PWM to 0%
			__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7b1b      	ldrb	r3, [r3, #12]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d105      	bne.n	800058e <Motor_Control+0x3e>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
 800058c:	e018      	b.n	80005c0 <Motor_Control+0x70>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7b1b      	ldrb	r3, [r3, #12]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d105      	bne.n	80005a2 <Motor_Control+0x52>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	6393      	str	r3, [r2, #56]	; 0x38
 80005a0:	e00e      	b.n	80005c0 <Motor_Control+0x70>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7b1b      	ldrb	r3, [r3, #12]
 80005a6:	2b08      	cmp	r3, #8
 80005a8:	d105      	bne.n	80005b6 <Motor_Control+0x66>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80005b4:	e004      	b.n	80005c0 <Motor_Control+0x70>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
			// turn GPIOs to Motor off
			LN298N_MOTOR_OFF();
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	484b      	ldr	r0, [pc, #300]	; (80006f4 <Motor_Control+0x1a4>)
 80005c8:	f001 faae 	bl	8001b28 <HAL_GPIO_WritePin>
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4848      	ldr	r0, [pc, #288]	; (80006f4 <Motor_Control+0x1a4>)
 80005d4:	f001 faa8 	bl	8001b28 <HAL_GPIO_WritePin>
 80005d8:	e084      	b.n	80006e4 <Motor_Control+0x194>
		}
		//check if adc value changed by 1%
		else if (abs(
				Motor->PWMCommandNew
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
						- Motor->PWMCommandLast) > MOTOR_RESOLUTION_1PERCENT)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	885b      	ldrh	r3, [r3, #2]
 80005e4:	1ad3      	subs	r3, r2, r3
		else if (abs(
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bfb8      	it	lt
 80005ea:	425b      	neglt	r3, r3
 80005ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80005f0:	dd78      	ble.n	80006e4 <Motor_Control+0x194>
		{
			// deadbands used to avoid soft movements and noise
			if (Motor->PWMCommandNew < MOTOR_DEADBAND_LOW_LIMIT)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	f244 624f 	movw	r2, #17999	; 0x464f
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d813      	bhi.n	8000626 <Motor_Control+0xd6>
			{
				// write gpio to LN298 for backward movement
				LN298N_MOTOR_BACKWARD();
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	483b      	ldr	r0, [pc, #236]	; (80006f4 <Motor_Control+0x1a4>)
 8000606:	f001 fa8f 	bl	8001b28 <HAL_GPIO_WritePin>
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000610:	4838      	ldr	r0, [pc, #224]	; (80006f4 <Motor_Control+0x1a4>)
 8000612:	f001 fa89 	bl	8001b28 <HAL_GPIO_WritePin>
				// even if joystick is moved backward, PWM value has to be more than high deadband
				// beacuse direction is set by GPIO
				// 40000 - newcommand (max speed = 40000 - 0)
				Motor->MotorSpeed = (MOTOR_PWM_COUNTERPERIOD
						- Motor->PWMCommandNew);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	881a      	ldrh	r2, [r3, #0]
 800061a:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <Motor_Control+0x1a8>)
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	b29a      	uxth	r2, r3
				Motor->MotorSpeed = (MOTOR_PWM_COUNTERPERIOD
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	809a      	strh	r2, [r3, #4]
 8000624:	e00f      	b.n	8000646 <Motor_Control+0xf6>
			}
			// forward movement
			else
			{
				// write gpio for forward movement
				LN298N_MOTOR_FORWARD();
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062c:	4831      	ldr	r0, [pc, #196]	; (80006f4 <Motor_Control+0x1a4>)
 800062e:	f001 fa7b 	bl	8001b28 <HAL_GPIO_WritePin>
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	482e      	ldr	r0, [pc, #184]	; (80006f4 <Motor_Control+0x1a4>)
 800063a:	f001 fa75 	bl	8001b28 <HAL_GPIO_WritePin>
				// value from joystick is equal to speed value for forward movement
				Motor->MotorSpeed = Motor->PWMCommandNew;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	881a      	ldrh	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	809a      	strh	r2, [r3, #4]
			}
			__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel,
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7b1b      	ldrb	r3, [r3, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d106      	bne.n	800065c <Motor_Control+0x10c>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	889a      	ldrh	r2, [r3, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
 800065a:	e043      	b.n	80006e4 <Motor_Control+0x194>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7b1b      	ldrb	r3, [r3, #12]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d107      	bne.n	8000674 <Motor_Control+0x124>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	8899      	ldrh	r1, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	460b      	mov	r3, r1
 8000670:	6393      	str	r3, [r2, #56]	; 0x38
 8000672:	e037      	b.n	80006e4 <Motor_Control+0x194>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7b1b      	ldrb	r3, [r3, #12]
 8000678:	2b08      	cmp	r3, #8
 800067a:	d107      	bne.n	800068c <Motor_Control+0x13c>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	8899      	ldrh	r1, [r3, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	460b      	mov	r3, r1
 8000688:	63d3      	str	r3, [r2, #60]	; 0x3c
 800068a:	e02b      	b.n	80006e4 <Motor_Control+0x194>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	8899      	ldrh	r1, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	460b      	mov	r3, r1
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	e023      	b.n	80006e4 <Motor_Control+0x194>
		}
	}
	// if button is not pressed turn off engine and return
	else
	{
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7b1b      	ldrb	r3, [r3, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d105      	bne.n	80006b0 <Motor_Control+0x160>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80006ae:	e01d      	b.n	80006ec <Motor_Control+0x19c>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7b1b      	ldrb	r3, [r3, #12]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d105      	bne.n	80006c4 <Motor_Control+0x174>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	6393      	str	r3, [r2, #56]	; 0x38
		return;
 80006c2:	e013      	b.n	80006ec <Motor_Control+0x19c>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7b1b      	ldrb	r3, [r3, #12]
 80006c8:	2b08      	cmp	r3, #8
 80006ca:	d105      	bne.n	80006d8 <Motor_Control+0x188>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	63d3      	str	r3, [r2, #60]	; 0x3c
		return;
 80006d6:	e009      	b.n	80006ec <Motor_Control+0x19c>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
		return;
 80006e2:	e003      	b.n	80006ec <Motor_Control+0x19c>
	}
	// save value for next cycle to compare
	Motor->PWMCommandLast = Motor->PWMCommandNew;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	881a      	ldrh	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	805a      	strh	r2, [r3, #2]
}
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	ffff9c40 	.word	0xffff9c40

080006fc <Motor_Init>:
 * @param[PWMTimerChannel] - channel definition : TIM_CHANNEL_1
 * @return - void
 */
void Motor_Init(Motor_t *Motor, TIM_HandleTypeDef *PWMTimer,
		uint8_t PWMTimerChannel)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]
	// assign parameters to strcut
	Motor->PWMTimer = PWMTimer;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	609a      	str	r2, [r3, #8]
	Motor->PWMTimerChannel = PWMTimerChannel;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	731a      	strb	r2, [r3, #12]

	// start PWM singal
	HAL_TIM_PWM_Start(Motor->PWMTimer, Motor->PWMTimerChannel);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	689a      	ldr	r2, [r3, #8]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	7b1b      	ldrb	r3, [r3, #12]
 800071e:	4619      	mov	r1, r3
 8000720:	4610      	mov	r0, r2
 8000722:	f001 fedb 	bl	80024dc <HAL_TIM_PWM_Start>
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <Servo_Control>:
 *
 * @param[*Servo] - handler of Motor struct
 * @return - void
 */
void Servo_Control(Servo_t *Servo)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	// check if button is clicked
	if (Servo->ContorlOn)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7a5b      	ldrb	r3, [r3, #9]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d039      	beq.n	80007b2 <Servo_Control+0x84>
	{
		// move only when value changes by 1 degree
		if (abs(
				Servo->PWMCommandNew
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
						- Servo->PWMCommandLast) > SERVO_RESOLUTION_1DEGREE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	885b      	ldrh	r3, [r3, #2]
 8000748:	1ad3      	subs	r3, r2, r3
		if (abs(
 800074a:	2b00      	cmp	r3, #0
 800074c:	bfb8      	it	lt
 800074e:	425b      	neglt	r3, r3
 8000750:	2b16      	cmp	r3, #22
 8000752:	dd29      	ble.n	80007a8 <Servo_Control+0x7a>
		{
			// write new value to PWM
			__HAL_TIM_SET_COMPARE(Servo->PWMTimer, Servo->PWMTimerChannel,
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7a1b      	ldrb	r3, [r3, #8]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d106      	bne.n	800076a <Servo_Control+0x3c>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
 8000768:	e01e      	b.n	80007a8 <Servo_Control+0x7a>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a1b      	ldrb	r3, [r3, #8]
 800076e:	2b04      	cmp	r3, #4
 8000770:	d107      	bne.n	8000782 <Servo_Control+0x54>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	8819      	ldrh	r1, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	460b      	mov	r3, r1
 800077e:	6393      	str	r3, [r2, #56]	; 0x38
 8000780:	e012      	b.n	80007a8 <Servo_Control+0x7a>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7a1b      	ldrb	r3, [r3, #8]
 8000786:	2b08      	cmp	r3, #8
 8000788:	d107      	bne.n	800079a <Servo_Control+0x6c>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	8819      	ldrh	r1, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	460b      	mov	r3, r1
 8000796:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000798:	e006      	b.n	80007a8 <Servo_Control+0x7a>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	8819      	ldrh	r1, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	460b      	mov	r3, r1
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
		// if button is not pressed return
		return;
	}

	// save value for next cycle to compare
	Servo->PWMCommandLast = Servo->PWMCommandNew;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	805a      	strh	r2, [r3, #2]
 80007b0:	e000      	b.n	80007b4 <Servo_Control+0x86>
		return;
 80007b2:	bf00      	nop
}
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <Servo_Init>:
 * @param[PWMTimerChannel] - channel definition : TIM_CHANNEL_1
 * @return - void
 */
void Servo_Init(Servo_t *Servo, TIM_HandleTypeDef *PWMTimer,
		uint8_t PWMTimerChannel)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	71fb      	strb	r3, [r7, #7]
	// assign parameters to strcut
	Servo->PWMTimer = PWMTimer;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	605a      	str	r2, [r3, #4]
	Servo->PWMTimerChannel = PWMTimerChannel;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	721a      	strb	r2, [r3, #8]

	// start PWM singal
	HAL_TIM_PWM_Start(Servo->PWMTimer, Servo->PWMTimerChannel);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	4619      	mov	r1, r3
 80007e0:	4610      	mov	r0, r2
 80007e2:	f001 fe7b 	bl	80024dc <HAL_TIM_PWM_Start>
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <LED_Control>:
 *
 * @param[*VehicleLED] - handler of LED struct
 * @return - void
 */
void LED_Control(VehicleLED_t *VehicleLED)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	// led COMM
	if (VehicleLED->ControlWord & (0x01 << LED_COMM_OFFSET))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <LED_Control+0x20>
	{
		HAL_GPIO_WritePin(LED_COMM_GPIO_PORT, LED_COMM_PIN, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2120      	movs	r1, #32
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <LED_Control+0x78>)
 800080a:	f001 f98d 	bl	8001b28 <HAL_GPIO_WritePin>
 800080e:	e004      	b.n	800081a <LED_Control+0x2a>

	}
	else
	{
		HAL_GPIO_WritePin(LED_COMM_GPIO_PORT, LED_COMM_PIN, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <LED_Control+0x78>)
 8000816:	f001 f987 	bl	8001b28 <HAL_GPIO_WritePin>
	}

	// led FRONT1
	if (VehicleLED->ControlWord & (0x01 << LED_FRONT1_OFFSET))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <LED_Control+0x42>
	{
		HAL_GPIO_WritePin(LED_FRONT1_GPIO_PORT, LED_FRONT1_PIN, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <LED_Control+0x78>)
 800082c:	f001 f97c 	bl	8001b28 <HAL_GPIO_WritePin>
 8000830:	e004      	b.n	800083c <LED_Control+0x4c>
	}
	else
	{
		HAL_GPIO_WritePin(LED_FRONT1_GPIO_PORT, LED_FRONT1_PIN, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <LED_Control+0x78>)
 8000838:	f001 f976 	bl	8001b28 <HAL_GPIO_WritePin>
	}

	// led FRONT2
	if (VehicleLED->ControlWord & (0x01 << LED_FRONT2_OFFSET))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <LED_Control+0x64>
	{
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <LED_Control+0x78>)
 800084e:	f001 f96b 	bl	8001b28 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_RESET);
	}
}
 8000852:	e004      	b.n	800085e <LED_Control+0x6e>
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <LED_Control+0x78>)
 800085a:	f001 f965 	bl	8001b28 <HAL_GPIO_WritePin>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010800 	.word	0x40010800

0800086c <Vehicle_Shutdown>:

void Vehicle_Shutdown(VehicleLED_t *VehicleLED, Servo_t *Servo, Motor_t *Motor)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]

		// turn off LEDs
		HAL_GPIO_WritePin(LED_COMM_GPIO_PORT, LED_COMM_PIN, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2120      	movs	r1, #32
 800087c:	482d      	ldr	r0, [pc, #180]	; (8000934 <Vehicle_Shutdown+0xc8>)
 800087e:	f001 f953 	bl	8001b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_FRONT1_GPIO_PORT, LED_FRONT1_PIN, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	482b      	ldr	r0, [pc, #172]	; (8000934 <Vehicle_Shutdown+0xc8>)
 8000888:	f001 f94e 	bl	8001b28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_FRONT2_GPIO_PORT, LED_FRONT2_PIN, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	4828      	ldr	r0, [pc, #160]	; (8000934 <Vehicle_Shutdown+0xc8>)
 8000892:	f001 f949 	bl	8001b28 <HAL_GPIO_WritePin>

		//set servo to middle position
		__HAL_TIM_SET_COMPARE(Servo->PWMTimer, Servo->PWMTimerChannel,
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	7a1b      	ldrb	r3, [r3, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d106      	bne.n	80008ac <Vehicle_Shutdown+0x40>
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f640 32a4 	movw	r2, #2980	; 0xba4
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
 80008aa:	e01b      	b.n	80008e4 <Vehicle_Shutdown+0x78>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	7a1b      	ldrb	r3, [r3, #8]
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d106      	bne.n	80008c2 <Vehicle_Shutdown+0x56>
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	f640 33a4 	movw	r3, #2980	; 0xba4
 80008be:	6393      	str	r3, [r2, #56]	; 0x38
 80008c0:	e010      	b.n	80008e4 <Vehicle_Shutdown+0x78>
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	7a1b      	ldrb	r3, [r3, #8]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d106      	bne.n	80008d8 <Vehicle_Shutdown+0x6c>
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	f640 33a4 	movw	r3, #2980	; 0xba4
 80008d4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008d6:	e005      	b.n	80008e4 <Vehicle_Shutdown+0x78>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	f640 33a4 	movw	r3, #2980	; 0xba4
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
				(SERVO_LOW_LIMIT + SERVO_HIGH_LIMIT)/2);

		//turn off motor
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7b1b      	ldrb	r3, [r3, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <Vehicle_Shutdown+0x8c>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34

}
 80008f6:	e018      	b.n	800092a <Vehicle_Shutdown+0xbe>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7b1b      	ldrb	r3, [r3, #12]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d105      	bne.n	800090c <Vehicle_Shutdown+0xa0>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	6393      	str	r3, [r2, #56]	; 0x38
}
 800090a:	e00e      	b.n	800092a <Vehicle_Shutdown+0xbe>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7b1b      	ldrb	r3, [r3, #12]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d105      	bne.n	8000920 <Vehicle_Shutdown+0xb4>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	2300      	movs	r3, #0
 800091c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800091e:	e004      	b.n	800092a <Vehicle_Shutdown+0xbe>
		__HAL_TIM_SET_COMPARE(Motor->PWMTimer, Motor->PWMTimerChannel, 0);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	2300      	movs	r3, #0
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010800 	.word	0x40010800

08000938 <Parser_Parse>:

/*
 * @ function parse message and start command procedures
 */
uint8_t Parser_Parse(uint8_t *ParseBuffer, Servo_t *ServoX, Motor_t *MotorY, VehicleLED_t *VehicleLEDs)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
	uint8_t *ParsePointer;

	ParsePointer = (uint8_t*) (strtok((char*) ParseBuffer, ";"));
 8000946:	493f      	ldr	r1, [pc, #252]	; (8000a44 <Parser_Parse+0x10c>)
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f003 f8b5 	bl	8003ab8 <strtok>
 800094e:	6138      	str	r0, [r7, #16]

	if (strcmp((char*) ParsePointer, "ACK") == 0)
 8000950:	493d      	ldr	r1, [pc, #244]	; (8000a48 <Parser_Parse+0x110>)
 8000952:	6938      	ldr	r0, [r7, #16]
 8000954:	f7ff fbfa 	bl	800014c <strcmp>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d16d      	bne.n	8000a3a <Parser_Parse+0x102>
	{
		// light up green led
		VehicleLEDs->ControlWord |= (0x01 << LED_COMM_OFFSET);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	701a      	strb	r2, [r3, #0]

		for (uint8_t i = 0; i < 4; i++)
 800096c:	2300      	movs	r3, #0
 800096e:	75fb      	strb	r3, [r7, #23]
 8000970:	e060      	b.n	8000a34 <Parser_Parse+0xfc>
		{

			ParsePointer = (uint8_t*) (strtok(NULL, ";"));
 8000972:	4934      	ldr	r1, [pc, #208]	; (8000a44 <Parser_Parse+0x10c>)
 8000974:	2000      	movs	r0, #0
 8000976:	f003 f89f 	bl	8003ab8 <strtok>
 800097a:	6138      	str	r0, [r7, #16]

			switch (i)
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	3b01      	subs	r3, #1
 8000980:	2b03      	cmp	r3, #3
 8000982:	d854      	bhi.n	8000a2e <Parser_Parse+0xf6>
 8000984:	a201      	add	r2, pc, #4	; (adr r2, 800098c <Parser_Parse+0x54>)
 8000986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098a:	bf00      	nop
 800098c:	0800099d 	.word	0x0800099d
 8000990:	080009ad 	.word	0x080009ad
 8000994:	080009bd 	.word	0x080009bd
 8000998:	08000a07 	.word	0x08000a07
			{

			case 1: // write servo position
				ServoX->PWMCommandNew = atoi((const char*) ParsePointer);
 800099c:	6938      	ldr	r0, [r7, #16]
 800099e:	f003 f835 	bl	8003a0c <atoi>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	801a      	strh	r2, [r3, #0]
				break;
 80009aa:	e040      	b.n	8000a2e <Parser_Parse+0xf6>

			case 2: // write motor speed
				MotorY->PWMCommandNew = atoi((const char*) ParsePointer);
 80009ac:	6938      	ldr	r0, [r7, #16]
 80009ae:	f003 f82d 	bl	8003a0c <atoi>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	801a      	strh	r2, [r3, #0]
				break;
 80009ba:	e038      	b.n	8000a2e <Parser_Parse+0xf6>

			case 3: // control LED
				if (strcmp((char*) ParsePointer, "1") == 0)
 80009bc:	4923      	ldr	r1, [pc, #140]	; (8000a4c <Parser_Parse+0x114>)
 80009be:	6938      	ldr	r0, [r7, #16]
 80009c0:	f7ff fbc4 	bl	800014c <strcmp>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10e      	bne.n	80009e8 <Parser_Parse+0xb0>
				{
					// set lights on
					VehicleLEDs->ControlWord |= (0x01 << LED_FRONT1_OFFSET);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	701a      	strb	r2, [r3, #0]
					VehicleLEDs->ControlWord |= (0x01 << LED_FRONT2_OFFSET);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	701a      	strb	r2, [r3, #0]
				{
					// reset lights
					VehicleLEDs->ControlWord &= ~(0x01 << LED_FRONT1_OFFSET);
					VehicleLEDs->ControlWord &= ~(0x01 << LED_FRONT2_OFFSET);
				}
				break;
 80009e6:	e022      	b.n	8000a2e <Parser_Parse+0xf6>
					VehicleLEDs->ControlWord &= ~(0x01 << LED_FRONT1_OFFSET);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	f023 0302 	bic.w	r3, r3, #2
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
					VehicleLEDs->ControlWord &= ~(0x01 << LED_FRONT2_OFFSET);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	f023 0304 	bic.w	r3, r3, #4
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
				break;
 8000a04:	e013      	b.n	8000a2e <Parser_Parse+0xf6>
			case 4: // control motor

				// check if button motor on is pressed
				// if yes allow movement of servo and motor
				if (strcmp((char*) ParsePointer, "1") == 0)
 8000a06:	4911      	ldr	r1, [pc, #68]	; (8000a4c <Parser_Parse+0x114>)
 8000a08:	6938      	ldr	r0, [r7, #16]
 8000a0a:	f7ff fb9f 	bl	800014c <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d106      	bne.n	8000a22 <Parser_Parse+0xea>
				{
					ServoX->ContorlOn = 1;
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	2201      	movs	r2, #1
 8000a18:	725a      	strb	r2, [r3, #9]
					MotorY->ControlOn = 1;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	735a      	strb	r2, [r3, #13]
 8000a20:	e005      	b.n	8000a2e <Parser_Parse+0xf6>
				}
				else
				{
					ServoX->ContorlOn = 0;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	2200      	movs	r2, #0
 8000a26:	725a      	strb	r2, [r3, #9]
					MotorY->ControlOn = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	735a      	strb	r2, [r3, #13]
		for (uint8_t i = 0; i < 4; i++)
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	3301      	adds	r3, #1
 8000a32:	75fb      	strb	r3, [r7, #23]
 8000a34:	7dfb      	ldrb	r3, [r7, #23]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d99b      	bls.n	8000972 <Parser_Parse+0x3a>

		}

	}

	return 0;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08005180 	.word	0x08005180
 8000a48:	08005184 	.word	0x08005184
 8000a4c:	08005188 	.word	0x08005188

08000a50 <RB_Read>:
 */

#include "ringbuffer.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d101      	bne.n	8000a6e <RB_Read+0x1e>
	{
		return RB_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e017      	b.n	8000a9e <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a74:	461a      	mov	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	5c9a      	ldrb	r2, [r3, r2]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a84:	3301      	adds	r3, #1
 8000a86:	425a      	negs	r2, r3
 8000a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000a90:	bf58      	it	pl
 8000a92:	4253      	negpl	r3, r2
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000aba:	3301      	adds	r3, #1
 8000abc:	425a      	negs	r2, r3
 8000abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ac2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ac6:	bf58      	it	pl
 8000ac8:	4253      	negpl	r3, r2
 8000aca:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000ad2:	89fa      	ldrh	r2, [r7, #14]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d101      	bne.n	8000adc <RB_Write+0x34>
	{
		return RB_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e00b      	b.n	8000af4 <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	78fa      	ldrb	r2, [r7, #3]
 8000ae8:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	89fa      	ldrh	r2, [r7, #14]
 8000aee:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_MspInit+0x60>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_MspInit+0x60>)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010000 	.word	0x40010000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 faf9 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <DMA1_Channel5_IRQHandler+0x10>)
 8000bda:	f000 fd25 	bl	8001628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001f8 	.word	0x200001f8

08000be8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <USART1_IRQHandler+0x10>)
 8000bee:	f002 fae5 	bl	80031bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000023c 	.word	0x2000023c

08000bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <_kill>:

int _kill(int pid, int sig)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c14:	f002 fefe 	bl	8003a14 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2216      	movs	r2, #22
 8000c1c:	601a      	str	r2, [r3, #0]
	return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_exit>:

void _exit (int status)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c32:	f04f 31ff 	mov.w	r1, #4294967295
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffe7 	bl	8000c0a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c3c:	e7fe      	b.n	8000c3c <_exit+0x12>

08000c3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e00a      	b.n	8000c66 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c50:	f3af 8000 	nop.w
 8000c54:	4601      	mov	r1, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	60ba      	str	r2, [r7, #8]
 8000c5c:	b2ca      	uxtb	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf0      	blt.n	8000c50 <_read+0x12>
	}

return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e009      	b.n	8000c9e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	60ba      	str	r2, [r7, #8]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf1      	blt.n	8000c8a <_write+0x12>
	}
	return len;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_close>:

int _close(int file)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <_isatty>:

int _isatty(int file)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f002 fe68 	bl	8003a14 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20002800 	.word	0x20002800
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000090 	.word	0x20000090
 8000d78:	20000298 	.word	0x20000298

08000d7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b096      	sub	sp, #88	; 0x58
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 fe51 	bl	8003a68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc6:	4b46      	ldr	r3, [pc, #280]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000dc8:	4a46      	ldr	r2, [pc, #280]	; (8000ee4 <MX_TIM1_Init+0x15c>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000dcc:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000dce:	221f      	movs	r2, #31
 8000dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b43      	ldr	r3, [pc, #268]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000dda:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de6:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	483b      	ldr	r0, [pc, #236]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000df4:	f001 faca 	bl	800238c <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dfe:	f7ff fba1 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4834      	ldr	r0, [pc, #208]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000e10:	f001 fcbe 	bl	8002790 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e1a:	f7ff fb93 	bl	8000544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e1e:	4830      	ldr	r0, [pc, #192]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000e20:	f001 fb03 	bl	800242a <HAL_TIM_PWM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e2a:	f7ff fb8b 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4828      	ldr	r0, [pc, #160]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000e3e:	f002 f805 	bl	8002e4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e48:	f7ff fb7c 	bl	8000544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4c:	2360      	movs	r3, #96	; 0x60
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 8000e50:	23c8      	movs	r3, #200	; 0xc8
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000e72:	f001 fbcf 	bl	8002614 <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e7c:	f7ff fb62 	bl	8000544 <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 8000e80:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000e90:	f001 fbc0 	bl	8002614 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e9a:	f7ff fb53 	bl	8000544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000ec2:	f002 f81b 	bl	8002efc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000ecc:	f7ff fb3a 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM1_Init+0x158>)
 8000ed2:	f000 f827 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000ed6:	bf00      	nop
 8000ed8:	3758      	adds	r7, #88	; 0x58
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001b0 	.word	0x200001b0
 8000ee4:	40012c00 	.word	0x40012c00

08000ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <HAL_TIM_Base_MspInit+0x34>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10b      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_TIM_Base_MspInit+0x38>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_TIM_Base_MspInit+0x38>)
 8000f00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_Base_MspInit+0x38>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40012c00 	.word	0x40012c00
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_TIM_MspPostInit+0x5c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d118      	bne.n	8000f76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_TIM_MspPostInit+0x60>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_TIM_MspPostInit+0x60>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_TIM_MspPostInit+0x60>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_TIM_MspPostInit+0x64>)
 8000f72:	f000 fc5f 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010800 	.word	0x40010800

08000f8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_USART1_UART_Init+0x50>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000f98:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	f001 ffeb 	bl	8002f9e <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fce:	f7ff fab9 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000023c 	.word	0x2000023c
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a35      	ldr	r2, [pc, #212]	; (80010d0 <HAL_UART_MspInit+0xf0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d163      	bne.n	80010c8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_UART_MspInit+0xf4>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_UART_MspInit+0xf4>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_UART_MspInit+0xf4>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_UART_MspInit+0xf4>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a2d      	ldr	r2, [pc, #180]	; (80010d4 <HAL_UART_MspInit+0xf4>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_UART_MspInit+0xf4>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4825      	ldr	r0, [pc, #148]	; (80010d8 <HAL_UART_MspInit+0xf8>)
 8001044:	f000 fbf6 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	481f      	ldr	r0, [pc, #124]	; (80010d8 <HAL_UART_MspInit+0xf8>)
 800105c:	f000 fbea 	bl	8001834 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_UART_MspInit+0xfc>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
 8001076:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_UART_MspInit+0xfc>)
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0x100>)
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x104>)
 8001080:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x100>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0x100>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x100>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_UART_MspInit+0x100>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x100>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_UART_MspInit+0x100>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_UART_MspInit+0x100>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <HAL_UART_MspInit+0x100>)
 80010ae:	f000 f9b1 	bl	8001414 <HAL_DMA_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 80010b8:	f7ff fa44 	bl	8000544 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_UART_MspInit+0x100>)
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_UART_MspInit+0x100>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	40010000 	.word	0x40010000
 80010e0:	200001f8 	.word	0x200001f8
 80010e4:	40020058 	.word	0x40020058

080010e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	; (8001120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	; (800112c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110e:	f7ff fe35 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f002 fc85 	bl	8003a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001116:	f7ff f93f 	bl	8000398 <main>
  bx lr
 800111a:	4770      	bx	lr
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001124:	08005408 	.word	0x08005408
  ldr r2, =_sbss
 8001128:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800112c:	20000294 	.word	0x20000294

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x28>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x28>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f923 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	200f      	movs	r0, #15
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fce6 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f93b 	bl	80013fa <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 f903 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x1c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_IncTick+0x20>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <HAL_IncTick+0x20>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000280 	.word	0x20000280

080011e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <HAL_GetTick+0x10>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000280 	.word	0x20000280

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4906      	ldr	r1, [pc, #24]	; (8001290 <__NVIC_EnableIRQ+0x34>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff90 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff2d 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff42 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff90 	bl	80012e8 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5f 	bl	8001294 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff35 	bl	800125c <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e043      	b.n	80014b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <HAL_DMA_Init+0xa8>)
 8001432:	4413      	add	r3, r2
 8001434:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <HAL_DMA_Init+0xac>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	009a      	lsls	r2, r3, #2
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_DMA_Init+0xb0>)
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2202      	movs	r2, #2
 800144c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800145e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001462:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800146c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	bffdfff8 	.word	0xbffdfff8
 80014c0:	cccccccd 	.word	0xcccccccd
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d008      	beq.n	80014f0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2204      	movs	r2, #4
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e020      	b.n	8001532 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020e 	bic.w	r2, r2, #14
 80014fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154e:	2b02      	cmp	r3, #2
 8001550:	d005      	beq.n	800155e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e051      	b.n	8001602 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020e 	bic.w	r2, r2, #14
 800156c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_DMA_Abort_IT+0xd0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d029      	beq.n	80015dc <HAL_DMA_Abort_IT+0xa0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_DMA_Abort_IT+0xd4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d022      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x9c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_DMA_Abort_IT+0xd8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d01a      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x96>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_DMA_Abort_IT+0xdc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d012      	beq.n	80015cc <HAL_DMA_Abort_IT+0x90>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_DMA_Abort_IT+0xe0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00a      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x8a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_DMA_Abort_IT+0xe4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d102      	bne.n	80015c0 <HAL_DMA_Abort_IT+0x84>
 80015ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015be:	e00e      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c4:	e00b      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ca:	e008      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	e005      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	e002      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015d8:	2310      	movs	r3, #16
 80015da:	e000      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015dc:	2301      	movs	r3, #1
 80015de:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_DMA_Abort_IT+0xe8>)
 80015e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
    } 
  }
  return status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020008 	.word	0x40020008
 8001610:	4002001c 	.word	0x4002001c
 8001614:	40020030 	.word	0x40020030
 8001618:	40020044 	.word	0x40020044
 800161c:	40020058 	.word	0x40020058
 8001620:	4002006c 	.word	0x4002006c
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2204      	movs	r2, #4
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d04f      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xc8>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d04a      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0204 	bic.w	r2, r2, #4
 8001676:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a66      	ldr	r2, [pc, #408]	; (8001818 <HAL_DMA_IRQHandler+0x1f0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d029      	beq.n	80016d6 <HAL_DMA_IRQHandler+0xae>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a65      	ldr	r2, [pc, #404]	; (800181c <HAL_DMA_IRQHandler+0x1f4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xaa>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a63      	ldr	r2, [pc, #396]	; (8001820 <HAL_DMA_IRQHandler+0x1f8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01a      	beq.n	80016cc <HAL_DMA_IRQHandler+0xa4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a62      	ldr	r2, [pc, #392]	; (8001824 <HAL_DMA_IRQHandler+0x1fc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d012      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x9e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a60      	ldr	r2, [pc, #384]	; (8001828 <HAL_DMA_IRQHandler+0x200>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x98>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5f      	ldr	r2, [pc, #380]	; (800182c <HAL_DMA_IRQHandler+0x204>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <HAL_DMA_IRQHandler+0x92>
 80016b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b8:	e00e      	b.n	80016d8 <HAL_DMA_IRQHandler+0xb0>
 80016ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016be:	e00b      	b.n	80016d8 <HAL_DMA_IRQHandler+0xb0>
 80016c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016c4:	e008      	b.n	80016d8 <HAL_DMA_IRQHandler+0xb0>
 80016c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ca:	e005      	b.n	80016d8 <HAL_DMA_IRQHandler+0xb0>
 80016cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d0:	e002      	b.n	80016d8 <HAL_DMA_IRQHandler+0xb0>
 80016d2:	2340      	movs	r3, #64	; 0x40
 80016d4:	e000      	b.n	80016d8 <HAL_DMA_IRQHandler+0xb0>
 80016d6:	2304      	movs	r3, #4
 80016d8:	4a55      	ldr	r2, [pc, #340]	; (8001830 <HAL_DMA_IRQHandler+0x208>)
 80016da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8094 	beq.w	800180e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016ee:	e08e      	b.n	800180e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2202      	movs	r2, #2
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d056      	beq.n	80017ae <HAL_DMA_IRQHandler+0x186>
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d051      	beq.n	80017ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10b      	bne.n	8001730 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 020a 	bic.w	r2, r2, #10
 8001726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <HAL_DMA_IRQHandler+0x1f0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d029      	beq.n	800178e <HAL_DMA_IRQHandler+0x166>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a37      	ldr	r2, [pc, #220]	; (800181c <HAL_DMA_IRQHandler+0x1f4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d022      	beq.n	800178a <HAL_DMA_IRQHandler+0x162>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a35      	ldr	r2, [pc, #212]	; (8001820 <HAL_DMA_IRQHandler+0x1f8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01a      	beq.n	8001784 <HAL_DMA_IRQHandler+0x15c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <HAL_DMA_IRQHandler+0x1fc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d012      	beq.n	800177e <HAL_DMA_IRQHandler+0x156>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a32      	ldr	r2, [pc, #200]	; (8001828 <HAL_DMA_IRQHandler+0x200>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00a      	beq.n	8001778 <HAL_DMA_IRQHandler+0x150>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <HAL_DMA_IRQHandler+0x204>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d102      	bne.n	8001772 <HAL_DMA_IRQHandler+0x14a>
 800176c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001770:	e00e      	b.n	8001790 <HAL_DMA_IRQHandler+0x168>
 8001772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001776:	e00b      	b.n	8001790 <HAL_DMA_IRQHandler+0x168>
 8001778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177c:	e008      	b.n	8001790 <HAL_DMA_IRQHandler+0x168>
 800177e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001782:	e005      	b.n	8001790 <HAL_DMA_IRQHandler+0x168>
 8001784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001788:	e002      	b.n	8001790 <HAL_DMA_IRQHandler+0x168>
 800178a:	2320      	movs	r3, #32
 800178c:	e000      	b.n	8001790 <HAL_DMA_IRQHandler+0x168>
 800178e:	2302      	movs	r3, #2
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_DMA_IRQHandler+0x208>)
 8001792:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d034      	beq.n	800180e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017ac:	e02f      	b.n	800180e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2208      	movs	r2, #8
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d028      	beq.n	8001810 <HAL_DMA_IRQHandler+0x1e8>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d023      	beq.n	8001810 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 020e 	bic.w	r2, r2, #14
 80017d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
    }
  }
  return;
 800180e:	bf00      	nop
 8001810:	bf00      	nop
}
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40020008 	.word	0x40020008
 800181c:	4002001c 	.word	0x4002001c
 8001820:	40020030 	.word	0x40020030
 8001824:	40020044 	.word	0x40020044
 8001828:	40020058 	.word	0x40020058
 800182c:	4002006c 	.word	0x4002006c
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e148      	b.n	8001ada <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8137 	bne.w	8001ad4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4aa3      	ldr	r2, [pc, #652]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4aa1      	ldr	r2, [pc, #644]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4aa1      	ldr	r2, [pc, #644]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a9f      	ldr	r2, [pc, #636]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a9f      	ldr	r2, [pc, #636]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a9d      	ldr	r2, [pc, #628]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a9d      	ldr	r2, [pc, #628]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a9b      	ldr	r2, [pc, #620]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a9b      	ldr	r2, [pc, #620]	; (8001b08 <HAL_GPIO_Init+0x2d4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a99      	ldr	r2, [pc, #612]	; (8001b08 <HAL_GPIO_Init+0x2d4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a82      	ldr	r2, [pc, #520]	; (8001b0c <HAL_GPIO_Init+0x2d8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8090 	beq.w	8001ad4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <HAL_GPIO_Init+0x2dc>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a55      	ldr	r2, [pc, #340]	; (8001b10 <HAL_GPIO_Init+0x2dc>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_GPIO_Init+0x2dc>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <HAL_GPIO_Init+0x2e4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00d      	beq.n	8001a14 <HAL_GPIO_Init+0x1e0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d007      	beq.n	8001a10 <HAL_GPIO_Init+0x1dc>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <HAL_GPIO_Init+0x2ec>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_GPIO_Init+0x1d8>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1e2>
 8001a14:	2300      	movs	r3, #0
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a26:	493b      	ldr	r1, [pc, #236]	; (8001b14 <HAL_GPIO_Init+0x2e0>)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a40:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4937      	ldr	r1, [pc, #220]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4e:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4933      	ldr	r1, [pc, #204]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	492d      	ldr	r1, [pc, #180]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4929      	ldr	r1, [pc, #164]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4923      	ldr	r1, [pc, #140]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	491f      	ldr	r1, [pc, #124]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	4919      	ldr	r1, [pc, #100]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4915      	ldr	r1, [pc, #84]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f aeaf 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	372c      	adds	r7, #44	; 0x2c
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	10320000 	.word	0x10320000
 8001afc:	10310000 	.word	0x10310000
 8001b00:	10220000 	.word	0x10220000
 8001b04:	10210000 	.word	0x10210000
 8001b08:	10120000 	.word	0x10120000
 8001b0c:	10110000 	.word	0x10110000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40010800 	.word	0x40010800
 8001b1c:	40010c00 	.word	0x40010c00
 8001b20:	40011000 	.word	0x40011000
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e26c      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8087 	beq.w	8001c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b78:	4b92      	ldr	r3, [pc, #584]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d00c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b84:	4b8f      	ldr	r3, [pc, #572]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d112      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
 8001b90:	4b8c      	ldr	r3, [pc, #560]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	4b89      	ldr	r3, [pc, #548]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d06c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x12c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d168      	bne.n	8001c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e246      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x76>
 8001bc0:	4b80      	ldr	r3, [pc, #512]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a7f      	ldr	r2, [pc, #508]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e02e      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7a      	ldr	r2, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b78      	ldr	r3, [pc, #480]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a77      	ldr	r2, [pc, #476]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0xbc>
 8001bfa:	4b72      	ldr	r3, [pc, #456]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a71      	ldr	r2, [pc, #452]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6e      	ldr	r2, [pc, #440]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001c14:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6a      	ldr	r2, [pc, #424]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a67      	ldr	r2, [pc, #412]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fad6 	bl	80011e4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fad2 	bl	80011e4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1fa      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe4>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fac2 	bl	80011e4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fabe 	bl	80011e4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1e6      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x10c>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c92:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1ba      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4939      	ldr	r1, [pc, #228]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa77 	bl	80011e4 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa73 	bl	80011e4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e19b      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4927      	ldr	r1, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa56 	bl	80011e4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fa52 	bl	80011e4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e17a      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03a      	beq.n	8001ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fa36 	bl	80011e4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fa32 	bl	80011e4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e15a      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 fad8 	bl	8002350 <RCC_Delay>
 8001da0:	e01c      	b.n	8001ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa1c 	bl	80011e4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dae:	e00f      	b.n	8001dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fa18 	bl	80011e4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d908      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e140      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	42420000 	.word	0x42420000
 8001dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b9e      	ldr	r3, [pc, #632]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e9      	bne.n	8001db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a6 	beq.w	8001f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b97      	ldr	r3, [pc, #604]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10d      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b94      	ldr	r3, [pc, #592]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a93      	ldr	r2, [pc, #588]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b8e      	ldr	r3, [pc, #568]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a8a      	ldr	r2, [pc, #552]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f9d9 	bl	80011e4 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7ff f9d5 	bl	80011e4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	; 0x64
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0fd      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b81      	ldr	r3, [pc, #516]	; (8002050 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x312>
 8001e5c:	4b7b      	ldr	r3, [pc, #492]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a7a      	ldr	r2, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	e02d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a75      	ldr	r2, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a72      	ldr	r2, [pc, #456]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	e01c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x356>
 8001e94:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a6c      	ldr	r2, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a69      	ldr	r2, [pc, #420]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001eae:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a66      	ldr	r2, [pc, #408]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	4b64      	ldr	r3, [pc, #400]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a63      	ldr	r2, [pc, #396]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff f989 	bl	80011e4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f985 	bl	80011e4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0ab      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x37e>
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff f973 	bl	80011e4 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff f96f 	bl	80011e4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e095      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b48      	ldr	r3, [pc, #288]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a47      	ldr	r2, [pc, #284]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8081 	beq.w	8002042 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d061      	beq.n	8002010 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d146      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_OscConfig+0x4fc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f943 	bl	80011e4 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff f93f 	bl	80011e4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e067      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8a:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	492d      	ldr	r1, [pc, #180]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a19      	ldr	r1, [r3, #32]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	430b      	orrs	r3, r1
 8001fae:	4927      	ldr	r1, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x4fc>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff f913 	bl	80011e4 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff f90f 	bl	80011e4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e037      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x46a>
 8001fe0:	e02f      	b.n	8002042 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_RCC_OscConfig+0x4fc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f8fc 	bl	80011e4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f8f8 	bl	80011e4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e020      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x498>
 800200e:	e018      	b.n	8002042 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e013      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_OscConfig+0x4f4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	42420060 	.word	0x42420060

08002058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0d0      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4965      	ldr	r1, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d040      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e073      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06b      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4936      	ldr	r1, [pc, #216]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7ff f84c 	bl	80011e4 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff f848 	bl	80011e4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e053      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d210      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4922      	ldr	r1, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1cc>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ffaa 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
 8002220:	0800519c 	.word	0x0800519c
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b490      	push	{r4, r7}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002234:	1d3c      	adds	r4, r7, #4
 8002236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800223c:	f240 2301 	movw	r3, #513	; 0x201
 8002240:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x40>
 8002266:	2b08      	cmp	r3, #8
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x46>
 800226a:	e02d      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226e:	623b      	str	r3, [r7, #32]
      break;
 8002270:	e02d      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	0c9b      	lsrs	r3, r3, #18
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800227e:	4413      	add	r3, r2
 8002280:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002284:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0c5b      	lsrs	r3, r3, #17
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800229e:	4413      	add	r3, r2
 80022a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022aa:	fb02 f203 	mul.w	r2, r2, r3
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	e004      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	623b      	str	r3, [r7, #32]
      break;
 80022c6:	e002      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ca:	623b      	str	r3, [r7, #32]
      break;
 80022cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc90      	pop	{r4, r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	0800518c 	.word	0x0800518c
 80022e0:	40021000 	.word	0x40021000
 80022e4:	007a1200 	.word	0x007a1200
 80022e8:	003d0900 	.word	0x003d0900

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <HAL_RCC_GetHCLKFreq+0x10>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002304:	f7ff fff2 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080051ac 	.word	0x080051ac

08002328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800232c:	f7ff ffde 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0adb      	lsrs	r3, r3, #11
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <HAL_RCC_GetPCLK2Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	080051ac 	.word	0x080051ac

08002350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <RCC_Delay+0x34>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <RCC_Delay+0x38>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a5b      	lsrs	r3, r3, #9
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800236c:	bf00      	nop
  }
  while (Delay --);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	60fa      	str	r2, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f9      	bne.n	800236c <RCC_Delay+0x1c>
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000000 	.word	0x20000000
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e041      	b.n	8002422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fd98 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f000 faa4 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e041      	b.n	80024c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f839 	bl	80024c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f000 fa55 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_TIM_PWM_Start+0x24>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e022      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d109      	bne.n	800251a <HAL_TIM_PWM_Start+0x3e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e015      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d109      	bne.n	8002534 <HAL_TIM_PWM_Start+0x58>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e008      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e059      	b.n	8002602 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_TIM_PWM_Start+0x82>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800255c:	e013      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Start+0x92>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256c:	e00b      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0xa2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	e003      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fc38 	bl	8002e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_TIM_PWM_Start+0x130>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d107      	bne.n	80025ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_TIM_PWM_Start+0x130>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_TIM_PWM_Start+0xf0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d004      	beq.n	80025cc <HAL_TIM_PWM_Start+0xf0>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_TIM_PWM_Start+0x134>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d111      	bne.n	80025f0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d010      	beq.n	8002600 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	e007      	b.n	8002600 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400

08002614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800262a:	2302      	movs	r3, #2
 800262c:	e0ac      	b.n	8002788 <HAL_TIM_PWM_ConfigChannel+0x174>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	f200 809f 	bhi.w	800277c <HAL_TIM_PWM_ConfigChannel+0x168>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002679 	.word	0x08002679
 8002648:	0800277d 	.word	0x0800277d
 800264c:	0800277d 	.word	0x0800277d
 8002650:	0800277d 	.word	0x0800277d
 8002654:	080026b9 	.word	0x080026b9
 8002658:	0800277d 	.word	0x0800277d
 800265c:	0800277d 	.word	0x0800277d
 8002660:	0800277d 	.word	0x0800277d
 8002664:	080026fb 	.word	0x080026fb
 8002668:	0800277d 	.word	0x0800277d
 800266c:	0800277d 	.word	0x0800277d
 8002670:	0800277d 	.word	0x0800277d
 8002674:	0800273b 	.word	0x0800273b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f9a2 	bl	80029c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0208 	orr.w	r2, r2, #8
 8002692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0204 	bic.w	r2, r2, #4
 80026a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6999      	ldr	r1, [r3, #24]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	619a      	str	r2, [r3, #24]
      break;
 80026b6:	e062      	b.n	800277e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f9e8 	bl	8002a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6999      	ldr	r1, [r3, #24]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	021a      	lsls	r2, r3, #8
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]
      break;
 80026f8:	e041      	b.n	800277e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fa31 	bl	8002b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0208 	orr.w	r2, r2, #8
 8002714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0204 	bic.w	r2, r2, #4
 8002724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69d9      	ldr	r1, [r3, #28]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	61da      	str	r2, [r3, #28]
      break;
 8002738:	e021      	b.n	800277e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fa7b 	bl	8002c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69d9      	ldr	r1, [r3, #28]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	61da      	str	r2, [r3, #28]
      break;
 800277a:	e000      	b.n	800277e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800277c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_TIM_ConfigClockSource+0x18>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e0b3      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x180>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e0:	d03e      	beq.n	8002860 <HAL_TIM_ConfigClockSource+0xd0>
 80027e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e6:	f200 8087 	bhi.w	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	f000 8085 	beq.w	80028fc <HAL_TIM_ConfigClockSource+0x16c>
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	d87f      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 80027f8:	2b70      	cmp	r3, #112	; 0x70
 80027fa:	d01a      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0xa2>
 80027fc:	2b70      	cmp	r3, #112	; 0x70
 80027fe:	d87b      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002800:	2b60      	cmp	r3, #96	; 0x60
 8002802:	d050      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x116>
 8002804:	2b60      	cmp	r3, #96	; 0x60
 8002806:	d877      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002808:	2b50      	cmp	r3, #80	; 0x50
 800280a:	d03c      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0xf6>
 800280c:	2b50      	cmp	r3, #80	; 0x50
 800280e:	d873      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d058      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x136>
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d86f      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b30      	cmp	r3, #48	; 0x30
 800281a:	d064      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
 800281c:	2b30      	cmp	r3, #48	; 0x30
 800281e:	d86b      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b20      	cmp	r3, #32
 8002822:	d060      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
 8002824:	2b20      	cmp	r3, #32
 8002826:	d867      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d05c      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
 800282c:	2b10      	cmp	r3, #16
 800282e:	d05a      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002830:	e062      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f000 fac0 	bl	8002dc6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002854:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	609a      	str	r2, [r3, #8]
      break;
 800285e:	e04e      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f000 faa9 	bl	8002dc6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002882:	609a      	str	r2, [r3, #8]
      break;
 8002884:	e03b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	461a      	mov	r2, r3
 8002894:	f000 fa20 	bl	8002cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2150      	movs	r1, #80	; 0x50
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fa77 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80028a4:	e02b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 fa3e 	bl	8002d34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2160      	movs	r1, #96	; 0x60
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa67 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80028c4:	e01b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 fa00 	bl	8002cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2140      	movs	r1, #64	; 0x40
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fa57 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80028e4:	e00b      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f000 fa4e 	bl	8002d92 <TIM_ITRx_SetConfig>
        break;
 80028f6:	e002      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <TIM_Base_SetConfig+0xa8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <TIM_Base_SetConfig+0x28>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d003      	beq.n	8002940 <TIM_Base_SetConfig+0x28>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <TIM_Base_SetConfig+0xac>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d108      	bne.n	8002952 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <TIM_Base_SetConfig+0xa8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <TIM_Base_SetConfig+0x52>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d003      	beq.n	800296a <TIM_Base_SetConfig+0x52>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <TIM_Base_SetConfig+0xac>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d108      	bne.n	800297c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <TIM_Base_SetConfig+0xa8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	615a      	str	r2, [r3, #20]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40000400 	.word	0x40000400

080029c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 0302 	bic.w	r3, r3, #2
 8002a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <TIM_OC1_SetConfig+0xc8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10c      	bne.n	8002a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f023 0308 	bic.w	r3, r3, #8
 8002a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <TIM_OC1_SetConfig+0xc8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d111      	bne.n	8002a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	621a      	str	r2, [r3, #32]
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00

08002a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0210 	bic.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0320 	bic.w	r3, r3, #32
 8002ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <TIM_OC2_SetConfig+0xd0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10d      	bne.n	8002b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <TIM_OC2_SetConfig+0xd0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d113      	bne.n	8002b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	40012c00 	.word	0x40012c00

08002b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <TIM_OC3_SetConfig+0xd0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10d      	bne.n	8002be2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <TIM_OC3_SetConfig+0xd0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d113      	bne.n	8002c12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	621a      	str	r2, [r3, #32]
}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00

08002c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	031b      	lsls	r3, r3, #12
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <TIM_OC4_SetConfig+0x98>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	40012c00 	.word	0x40012c00

08002cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f023 0201 	bic.w	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f023 030a 	bic.w	r3, r3, #10
 8002d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f023 0210 	bic.w	r2, r3, #16
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	031b      	lsls	r3, r3, #12
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f043 0307 	orr.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	021a      	lsls	r2, r3, #8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	609a      	str	r2, [r3, #8]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2201      	movs	r2, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	401a      	ands	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a1a      	ldr	r2, [r3, #32]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e041      	b.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10c      	bne.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400

08002efc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e03d      	b.n	8002f94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e03f      	b.n	8003030 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe f80b 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fc84 	bl	80038f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003006:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003016:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b20      	cmp	r3, #32
 8003056:	d17c      	bne.n	8003152 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_UART_Transmit+0x2c>
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e075      	b.n	8003154 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_UART_Transmit+0x3e>
 8003072:	2302      	movs	r3, #2
 8003074:	e06e      	b.n	8003154 <HAL_UART_Transmit+0x11c>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2221      	movs	r2, #33	; 0x21
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800308c:	f7fe f8aa 	bl	80011e4 <HAL_GetTick>
 8003090:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d108      	bne.n	80030ba <HAL_UART_Transmit+0x82>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d104      	bne.n	80030ba <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	e003      	b.n	80030c2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030ca:	e02a      	b.n	8003122 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2200      	movs	r2, #0
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa37 	bl	800354a <UART_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e036      	b.n	8003154 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030fa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	3302      	adds	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e007      	b.n	8003114 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1cf      	bne.n	80030cc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2200      	movs	r2, #0
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fa07 	bl	800354a <UART_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e006      	b.n	8003154 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	d11d      	bne.n	80031b2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_UART_Receive_IT+0x26>
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e016      	b.n	80031b4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_UART_Receive_IT+0x38>
 8003190:	2302      	movs	r3, #2
 8003192:	e00f      	b.n	80031b4 <HAL_UART_Receive_IT+0x58>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fa18 	bl	80035de <UART_Start_Receive_IT>
 80031ae:	4603      	mov	r3, r0
 80031b0:	e000      	b.n	80031b4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_UART_IRQHandler+0x52>
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fac9 	bl	800379e <UART_Receive_IT>
      return;
 800320c:	e17b      	b.n	8003506 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80b1 	beq.w	8003378 <HAL_UART_IRQHandler+0x1bc>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_UART_IRQHandler+0x70>
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80a6 	beq.w	8003378 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_UART_IRQHandler+0x90>
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0201 	orr.w	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_UART_IRQHandler+0xb0>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f043 0202 	orr.w	r2, r3, #2
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_UART_IRQHandler+0xd0>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00f      	beq.n	80032b6 <HAL_UART_IRQHandler+0xfa>
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_UART_IRQHandler+0xee>
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0208 	orr.w	r2, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 811e 	beq.w	80034fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_UART_IRQHandler+0x11e>
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fa62 	bl	800379e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <HAL_UART_IRQHandler+0x146>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d031      	beq.n	8003366 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9a4 	bl	8003650 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d023      	beq.n	800335e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003324:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	2b00      	cmp	r3, #0
 800332c:	d013      	beq.n	8003356 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	4a76      	ldr	r2, [pc, #472]	; (800350c <HAL_UART_IRQHandler+0x350>)
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe f8fe 	bl	800153c <HAL_DMA_Abort_IT>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003350:	4610      	mov	r0, r2
 8003352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003354:	e00e      	b.n	8003374 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8e3 	bl	8003522 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e00a      	b.n	8003374 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8df 	bl	8003522 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	e006      	b.n	8003374 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8db 	bl	8003522 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003372:	e0c3      	b.n	80034fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003374:	bf00      	nop
    return;
 8003376:	e0c1      	b.n	80034fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 80a1 	bne.w	80034c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 809b 	beq.w	80034c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8095 	beq.w	80034c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04e      	beq.n	800345c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80033c8:	8a3b      	ldrh	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8098 	beq.w	8003500 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033d4:	8a3a      	ldrh	r2, [r7, #16]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	f080 8092 	bcs.w	8003500 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8a3a      	ldrh	r2, [r7, #16]
 80033e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d02b      	beq.n	8003444 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0210 	bic.w	r2, r2, #16
 8003438:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe f842 	bl	80014c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800344c:	b29b      	uxth	r3, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	b29b      	uxth	r3, r3
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f86d 	bl	8003534 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800345a:	e051      	b.n	8003500 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003464:	b29b      	uxth	r3, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d047      	beq.n	8003504 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003474:	8a7b      	ldrh	r3, [r7, #18]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d044      	beq.n	8003504 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003488:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034b8:	8a7b      	ldrh	r3, [r7, #18]
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f839 	bl	8003534 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034c2:	e01f      	b.n	8003504 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_UART_IRQHandler+0x324>
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8f9 	bl	80036d0 <UART_Transmit_IT>
    return;
 80034de:	e012      	b.n	8003506 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00d      	beq.n	8003506 <HAL_UART_IRQHandler+0x34a>
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f93a 	bl	800376e <UART_EndTransmit_IT>
    return;
 80034fa:	e004      	b.n	8003506 <HAL_UART_IRQHandler+0x34a>
    return;
 80034fc:	bf00      	nop
 80034fe:	e002      	b.n	8003506 <HAL_UART_IRQHandler+0x34a>
      return;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_UART_IRQHandler+0x34a>
      return;
 8003504:	bf00      	nop
  }
}
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	080036a9 	.word	0x080036a9

08003510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355a:	e02c      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d028      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <UART_WaitOnFlagUntilTimeout+0x30>
 800356a:	f7fd fe3b 	bl	80011e4 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	429a      	cmp	r2, r3
 8003578:	d21d      	bcs.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003588:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d0c3      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2222      	movs	r2, #34	; 0x22
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0220 	orr.w	r2, r2, #32
 8003642:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003666:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0210 	bic.w	r2, r2, #16
 800368e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff ff2d 	bl	8003522 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b21      	cmp	r3, #33	; 0x21
 80036e2:	d13e      	bne.n	8003762 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ec:	d114      	bne.n	8003718 <UART_Transmit_IT+0x48>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d110      	bne.n	8003718 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800370a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]
 8003716:	e008      	b.n	800372a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6211      	str	r1, [r2, #32]
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4619      	mov	r1, r3
 8003738:	84d1      	strh	r1, [r2, #38]	; 0x26
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003784:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff febe 	bl	8003510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b22      	cmp	r3, #34	; 0x22
 80037b0:	f040 8099 	bne.w	80038e6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d117      	bne.n	80037ee <UART_Receive_IT+0x50>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d113      	bne.n	80037ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037dc:	b29a      	uxth	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
 80037ec:	e026      	b.n	800383c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d007      	beq.n	8003812 <UART_Receive_IT+0x74>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <UART_Receive_IT+0x82>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e008      	b.n	8003832 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382c:	b2da      	uxtb	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4619      	mov	r1, r3
 800384a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800384c:	2b00      	cmp	r3, #0
 800384e:	d148      	bne.n	80038e2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0220 	bic.w	r2, r2, #32
 800385e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	2b01      	cmp	r3, #1
 800388e:	d123      	bne.n	80038d8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0210 	bic.w	r2, r2, #16
 80038a4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d10a      	bne.n	80038ca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fe2f 	bl	8003534 <HAL_UARTEx_RxEventCallback>
 80038d6:	e002      	b.n	80038de <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fc fe25 	bl	8000528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e002      	b.n	80038e8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800392a:	f023 030c 	bic.w	r3, r3, #12
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	430b      	orrs	r3, r1
 8003936:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2c      	ldr	r2, [pc, #176]	; (8003a04 <UART_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7fe fce6 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	e002      	b.n	8003966 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7fe fcce 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 8003964:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <UART_SetConfig+0x118>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	0119      	lsls	r1, r3, #4
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fbb2 f2f3 	udiv	r2, r2, r3
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <UART_SetConfig+0x118>)
 800399e:	fba3 0302 	umull	r0, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2064      	movs	r0, #100	; 0x64
 80039a6:	fb00 f303 	mul.w	r3, r0, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <UART_SetConfig+0x118>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039bc:	4419      	add	r1, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009a      	lsls	r2, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <UART_SetConfig+0x118>)
 80039d6:	fba3 0302 	umull	r0, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2064      	movs	r0, #100	; 0x64
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <UART_SetConfig+0x118>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	440a      	add	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40013800 	.word	0x40013800
 8003a08:	51eb851f 	.word	0x51eb851f

08003a0c <atoi>:
 8003a0c:	220a      	movs	r2, #10
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f000 b934 	b.w	8003c7c <strtol>

08003a14 <__errno>:
 8003a14:	4b01      	ldr	r3, [pc, #4]	; (8003a1c <__errno+0x8>)
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	2000000c 	.word	0x2000000c

08003a20 <__libc_init_array>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	2600      	movs	r6, #0
 8003a24:	4d0c      	ldr	r5, [pc, #48]	; (8003a58 <__libc_init_array+0x38>)
 8003a26:	4c0d      	ldr	r4, [pc, #52]	; (8003a5c <__libc_init_array+0x3c>)
 8003a28:	1b64      	subs	r4, r4, r5
 8003a2a:	10a4      	asrs	r4, r4, #2
 8003a2c:	42a6      	cmp	r6, r4
 8003a2e:	d109      	bne.n	8003a44 <__libc_init_array+0x24>
 8003a30:	f001 faac 	bl	8004f8c <_init>
 8003a34:	2600      	movs	r6, #0
 8003a36:	4d0a      	ldr	r5, [pc, #40]	; (8003a60 <__libc_init_array+0x40>)
 8003a38:	4c0a      	ldr	r4, [pc, #40]	; (8003a64 <__libc_init_array+0x44>)
 8003a3a:	1b64      	subs	r4, r4, r5
 8003a3c:	10a4      	asrs	r4, r4, #2
 8003a3e:	42a6      	cmp	r6, r4
 8003a40:	d105      	bne.n	8003a4e <__libc_init_array+0x2e>
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a48:	4798      	blx	r3
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	e7ee      	b.n	8003a2c <__libc_init_array+0xc>
 8003a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a52:	4798      	blx	r3
 8003a54:	3601      	adds	r6, #1
 8003a56:	e7f2      	b.n	8003a3e <__libc_init_array+0x1e>
 8003a58:	08005400 	.word	0x08005400
 8003a5c:	08005400 	.word	0x08005400
 8003a60:	08005400 	.word	0x08005400
 8003a64:	08005404 	.word	0x08005404

08003a68 <memset>:
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4402      	add	r2, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <siprintf>:
 8003a78:	b40e      	push	{r1, r2, r3}
 8003a7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a7e:	b500      	push	{lr}
 8003a80:	b09c      	sub	sp, #112	; 0x70
 8003a82:	ab1d      	add	r3, sp, #116	; 0x74
 8003a84:	9002      	str	r0, [sp, #8]
 8003a86:	9006      	str	r0, [sp, #24]
 8003a88:	9107      	str	r1, [sp, #28]
 8003a8a:	9104      	str	r1, [sp, #16]
 8003a8c:	4808      	ldr	r0, [pc, #32]	; (8003ab0 <siprintf+0x38>)
 8003a8e:	4909      	ldr	r1, [pc, #36]	; (8003ab4 <siprintf+0x3c>)
 8003a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a94:	9105      	str	r1, [sp, #20]
 8003a96:	6800      	ldr	r0, [r0, #0]
 8003a98:	a902      	add	r1, sp, #8
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	f000 fa32 	bl	8003f04 <_svfiprintf_r>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	9b02      	ldr	r3, [sp, #8]
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	b01c      	add	sp, #112	; 0x70
 8003aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aac:	b003      	add	sp, #12
 8003aae:	4770      	bx	lr
 8003ab0:	2000000c 	.word	0x2000000c
 8003ab4:	ffff0208 	.word	0xffff0208

08003ab8 <strtok>:
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <strtok+0x5c>)
 8003aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abe:	681f      	ldr	r7, [r3, #0]
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003ac4:	460e      	mov	r6, r1
 8003ac6:	b9ec      	cbnz	r4, 8003b04 <strtok+0x4c>
 8003ac8:	2050      	movs	r0, #80	; 0x50
 8003aca:	f000 f911 	bl	8003cf0 <malloc>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	65b8      	str	r0, [r7, #88]	; 0x58
 8003ad2:	b920      	cbnz	r0, 8003ade <strtok+0x26>
 8003ad4:	2157      	movs	r1, #87	; 0x57
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <strtok+0x60>)
 8003ad8:	4810      	ldr	r0, [pc, #64]	; (8003b1c <strtok+0x64>)
 8003ada:	f000 f8d9 	bl	8003c90 <__assert_func>
 8003ade:	e9c0 4400 	strd	r4, r4, [r0]
 8003ae2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ae6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003aea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003aee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003af2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003af6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003afa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003afe:	6184      	str	r4, [r0, #24]
 8003b00:	7704      	strb	r4, [r0, #28]
 8003b02:	6244      	str	r4, [r0, #36]	; 0x24
 8003b04:	4631      	mov	r1, r6
 8003b06:	4628      	mov	r0, r5
 8003b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b10:	f000 b806 	b.w	8003b20 <__strtok_r>
 8003b14:	2000000c 	.word	0x2000000c
 8003b18:	080051b8 	.word	0x080051b8
 8003b1c:	080051cf 	.word	0x080051cf

08003b20 <__strtok_r>:
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b22:	b908      	cbnz	r0, 8003b28 <__strtok_r+0x8>
 8003b24:	6810      	ldr	r0, [r2, #0]
 8003b26:	b188      	cbz	r0, 8003b4c <__strtok_r+0x2c>
 8003b28:	4604      	mov	r4, r0
 8003b2a:	460f      	mov	r7, r1
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003b32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003b36:	b91e      	cbnz	r6, 8003b40 <__strtok_r+0x20>
 8003b38:	b965      	cbnz	r5, 8003b54 <__strtok_r+0x34>
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	6015      	str	r5, [r2, #0]
 8003b3e:	e005      	b.n	8003b4c <__strtok_r+0x2c>
 8003b40:	42b5      	cmp	r5, r6
 8003b42:	d1f6      	bne.n	8003b32 <__strtok_r+0x12>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <__strtok_r+0xa>
 8003b48:	6014      	str	r4, [r2, #0]
 8003b4a:	7003      	strb	r3, [r0, #0]
 8003b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b4e:	461c      	mov	r4, r3
 8003b50:	e00c      	b.n	8003b6c <__strtok_r+0x4c>
 8003b52:	b915      	cbnz	r5, 8003b5a <__strtok_r+0x3a>
 8003b54:	460e      	mov	r6, r1
 8003b56:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003b5e:	42ab      	cmp	r3, r5
 8003b60:	d1f7      	bne.n	8003b52 <__strtok_r+0x32>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f3      	beq.n	8003b4e <__strtok_r+0x2e>
 8003b66:	2300      	movs	r3, #0
 8003b68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003b6c:	6014      	str	r4, [r2, #0]
 8003b6e:	e7ed      	b.n	8003b4c <__strtok_r+0x2c>

08003b70 <_strtol_l.isra.0>:
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b76:	4686      	mov	lr, r0
 8003b78:	d001      	beq.n	8003b7e <_strtol_l.isra.0+0xe>
 8003b7a:	2b24      	cmp	r3, #36	; 0x24
 8003b7c:	d906      	bls.n	8003b8c <_strtol_l.isra.0+0x1c>
 8003b7e:	f7ff ff49 	bl	8003a14 <__errno>
 8003b82:	2316      	movs	r3, #22
 8003b84:	6003      	str	r3, [r0, #0]
 8003b86:	2000      	movs	r0, #0
 8003b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8c:	468c      	mov	ip, r1
 8003b8e:	4e3a      	ldr	r6, [pc, #232]	; (8003c78 <_strtol_l.isra.0+0x108>)
 8003b90:	4660      	mov	r0, ip
 8003b92:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003b96:	5da5      	ldrb	r5, [r4, r6]
 8003b98:	f015 0508 	ands.w	r5, r5, #8
 8003b9c:	d1f8      	bne.n	8003b90 <_strtol_l.isra.0+0x20>
 8003b9e:	2c2d      	cmp	r4, #45	; 0x2d
 8003ba0:	d133      	bne.n	8003c0a <_strtol_l.isra.0+0x9a>
 8003ba2:	f04f 0801 	mov.w	r8, #1
 8003ba6:	f89c 4000 	ldrb.w	r4, [ip]
 8003baa:	f100 0c02 	add.w	ip, r0, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d05d      	beq.n	8003c6e <_strtol_l.isra.0+0xfe>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d10c      	bne.n	8003bd0 <_strtol_l.isra.0+0x60>
 8003bb6:	2c30      	cmp	r4, #48	; 0x30
 8003bb8:	d10a      	bne.n	8003bd0 <_strtol_l.isra.0+0x60>
 8003bba:	f89c 0000 	ldrb.w	r0, [ip]
 8003bbe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003bc2:	2858      	cmp	r0, #88	; 0x58
 8003bc4:	d14e      	bne.n	8003c64 <_strtol_l.isra.0+0xf4>
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003bcc:	f10c 0c02 	add.w	ip, ip, #2
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8003bd6:	3f01      	subs	r7, #1
 8003bd8:	fbb7 f9f3 	udiv	r9, r7, r3
 8003bdc:	4628      	mov	r0, r5
 8003bde:	fb03 7a19 	mls	sl, r3, r9, r7
 8003be2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003be6:	2e09      	cmp	r6, #9
 8003be8:	d818      	bhi.n	8003c1c <_strtol_l.isra.0+0xac>
 8003bea:	4634      	mov	r4, r6
 8003bec:	42a3      	cmp	r3, r4
 8003bee:	dd24      	ble.n	8003c3a <_strtol_l.isra.0+0xca>
 8003bf0:	2d00      	cmp	r5, #0
 8003bf2:	db1f      	blt.n	8003c34 <_strtol_l.isra.0+0xc4>
 8003bf4:	4581      	cmp	r9, r0
 8003bf6:	d31d      	bcc.n	8003c34 <_strtol_l.isra.0+0xc4>
 8003bf8:	d101      	bne.n	8003bfe <_strtol_l.isra.0+0x8e>
 8003bfa:	45a2      	cmp	sl, r4
 8003bfc:	db1a      	blt.n	8003c34 <_strtol_l.isra.0+0xc4>
 8003bfe:	2501      	movs	r5, #1
 8003c00:	fb00 4003 	mla	r0, r0, r3, r4
 8003c04:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003c08:	e7eb      	b.n	8003be2 <_strtol_l.isra.0+0x72>
 8003c0a:	2c2b      	cmp	r4, #43	; 0x2b
 8003c0c:	bf08      	it	eq
 8003c0e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003c12:	46a8      	mov	r8, r5
 8003c14:	bf08      	it	eq
 8003c16:	f100 0c02 	addeq.w	ip, r0, #2
 8003c1a:	e7c8      	b.n	8003bae <_strtol_l.isra.0+0x3e>
 8003c1c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003c20:	2e19      	cmp	r6, #25
 8003c22:	d801      	bhi.n	8003c28 <_strtol_l.isra.0+0xb8>
 8003c24:	3c37      	subs	r4, #55	; 0x37
 8003c26:	e7e1      	b.n	8003bec <_strtol_l.isra.0+0x7c>
 8003c28:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003c2c:	2e19      	cmp	r6, #25
 8003c2e:	d804      	bhi.n	8003c3a <_strtol_l.isra.0+0xca>
 8003c30:	3c57      	subs	r4, #87	; 0x57
 8003c32:	e7db      	b.n	8003bec <_strtol_l.isra.0+0x7c>
 8003c34:	f04f 35ff 	mov.w	r5, #4294967295
 8003c38:	e7e4      	b.n	8003c04 <_strtol_l.isra.0+0x94>
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	da08      	bge.n	8003c50 <_strtol_l.isra.0+0xe0>
 8003c3e:	2322      	movs	r3, #34	; 0x22
 8003c40:	4638      	mov	r0, r7
 8003c42:	f8ce 3000 	str.w	r3, [lr]
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d09e      	beq.n	8003b88 <_strtol_l.isra.0+0x18>
 8003c4a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003c4e:	e007      	b.n	8003c60 <_strtol_l.isra.0+0xf0>
 8003c50:	f1b8 0f00 	cmp.w	r8, #0
 8003c54:	d000      	beq.n	8003c58 <_strtol_l.isra.0+0xe8>
 8003c56:	4240      	negs	r0, r0
 8003c58:	2a00      	cmp	r2, #0
 8003c5a:	d095      	beq.n	8003b88 <_strtol_l.isra.0+0x18>
 8003c5c:	2d00      	cmp	r5, #0
 8003c5e:	d1f4      	bne.n	8003c4a <_strtol_l.isra.0+0xda>
 8003c60:	6011      	str	r1, [r2, #0]
 8003c62:	e791      	b.n	8003b88 <_strtol_l.isra.0+0x18>
 8003c64:	2430      	movs	r4, #48	; 0x30
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1b2      	bne.n	8003bd0 <_strtol_l.isra.0+0x60>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	e7b0      	b.n	8003bd0 <_strtol_l.isra.0+0x60>
 8003c6e:	2c30      	cmp	r4, #48	; 0x30
 8003c70:	d0a3      	beq.n	8003bba <_strtol_l.isra.0+0x4a>
 8003c72:	230a      	movs	r3, #10
 8003c74:	e7ac      	b.n	8003bd0 <_strtol_l.isra.0+0x60>
 8003c76:	bf00      	nop
 8003c78:	0800526d 	.word	0x0800526d

08003c7c <strtol>:
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	460a      	mov	r2, r1
 8003c80:	4601      	mov	r1, r0
 8003c82:	4802      	ldr	r0, [pc, #8]	; (8003c8c <strtol+0x10>)
 8003c84:	6800      	ldr	r0, [r0, #0]
 8003c86:	f7ff bf73 	b.w	8003b70 <_strtol_l.isra.0>
 8003c8a:	bf00      	nop
 8003c8c:	2000000c 	.word	0x2000000c

08003c90 <__assert_func>:
 8003c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c92:	4614      	mov	r4, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <__assert_func+0x2c>)
 8003c98:	4605      	mov	r5, r0
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68d8      	ldr	r0, [r3, #12]
 8003c9e:	b14c      	cbz	r4, 8003cb4 <__assert_func+0x24>
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <__assert_func+0x30>)
 8003ca2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ca6:	9100      	str	r1, [sp, #0]
 8003ca8:	462b      	mov	r3, r5
 8003caa:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <__assert_func+0x34>)
 8003cac:	f000 f80e 	bl	8003ccc <fiprintf>
 8003cb0:	f000 fde6 	bl	8004880 <abort>
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <__assert_func+0x38>)
 8003cb6:	461c      	mov	r4, r3
 8003cb8:	e7f3      	b.n	8003ca2 <__assert_func+0x12>
 8003cba:	bf00      	nop
 8003cbc:	2000000c 	.word	0x2000000c
 8003cc0:	08005230 	.word	0x08005230
 8003cc4:	0800523d 	.word	0x0800523d
 8003cc8:	0800526b 	.word	0x0800526b

08003ccc <fiprintf>:
 8003ccc:	b40e      	push	{r1, r2, r3}
 8003cce:	b503      	push	{r0, r1, lr}
 8003cd0:	4601      	mov	r1, r0
 8003cd2:	ab03      	add	r3, sp, #12
 8003cd4:	4805      	ldr	r0, [pc, #20]	; (8003cec <fiprintf+0x20>)
 8003cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	f000 fa39 	bl	8004154 <_vfiprintf_r>
 8003ce2:	b002      	add	sp, #8
 8003ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce8:	b003      	add	sp, #12
 8003cea:	4770      	bx	lr
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <malloc>:
 8003cf0:	4b02      	ldr	r3, [pc, #8]	; (8003cfc <malloc+0xc>)
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	f000 b84f 	b.w	8003d98 <_malloc_r>
 8003cfa:	bf00      	nop
 8003cfc:	2000000c 	.word	0x2000000c

08003d00 <_free_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d043      	beq.n	8003d90 <_free_r+0x90>
 8003d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0c:	1f0c      	subs	r4, r1, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bfb8      	it	lt
 8003d12:	18e4      	addlt	r4, r4, r3
 8003d14:	f001 f810 	bl	8004d38 <__malloc_lock>
 8003d18:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <_free_r+0x94>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	b933      	cbnz	r3, 8003d2e <_free_r+0x2e>
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	6014      	str	r4, [r2, #0]
 8003d24:	4628      	mov	r0, r5
 8003d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2a:	f001 b80b 	b.w	8004d44 <__malloc_unlock>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	d90a      	bls.n	8003d48 <_free_r+0x48>
 8003d32:	6821      	ldr	r1, [r4, #0]
 8003d34:	1862      	adds	r2, r4, r1
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf01      	itttt	eq
 8003d3a:	681a      	ldreq	r2, [r3, #0]
 8003d3c:	685b      	ldreq	r3, [r3, #4]
 8003d3e:	1852      	addeq	r2, r2, r1
 8003d40:	6022      	streq	r2, [r4, #0]
 8003d42:	6063      	str	r3, [r4, #4]
 8003d44:	6004      	str	r4, [r0, #0]
 8003d46:	e7ed      	b.n	8003d24 <_free_r+0x24>
 8003d48:	461a      	mov	r2, r3
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b10b      	cbz	r3, 8003d52 <_free_r+0x52>
 8003d4e:	42a3      	cmp	r3, r4
 8003d50:	d9fa      	bls.n	8003d48 <_free_r+0x48>
 8003d52:	6811      	ldr	r1, [r2, #0]
 8003d54:	1850      	adds	r0, r2, r1
 8003d56:	42a0      	cmp	r0, r4
 8003d58:	d10b      	bne.n	8003d72 <_free_r+0x72>
 8003d5a:	6820      	ldr	r0, [r4, #0]
 8003d5c:	4401      	add	r1, r0
 8003d5e:	1850      	adds	r0, r2, r1
 8003d60:	4283      	cmp	r3, r0
 8003d62:	6011      	str	r1, [r2, #0]
 8003d64:	d1de      	bne.n	8003d24 <_free_r+0x24>
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4401      	add	r1, r0
 8003d6c:	6011      	str	r1, [r2, #0]
 8003d6e:	6053      	str	r3, [r2, #4]
 8003d70:	e7d8      	b.n	8003d24 <_free_r+0x24>
 8003d72:	d902      	bls.n	8003d7a <_free_r+0x7a>
 8003d74:	230c      	movs	r3, #12
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	e7d4      	b.n	8003d24 <_free_r+0x24>
 8003d7a:	6820      	ldr	r0, [r4, #0]
 8003d7c:	1821      	adds	r1, r4, r0
 8003d7e:	428b      	cmp	r3, r1
 8003d80:	bf01      	itttt	eq
 8003d82:	6819      	ldreq	r1, [r3, #0]
 8003d84:	685b      	ldreq	r3, [r3, #4]
 8003d86:	1809      	addeq	r1, r1, r0
 8003d88:	6021      	streq	r1, [r4, #0]
 8003d8a:	6063      	str	r3, [r4, #4]
 8003d8c:	6054      	str	r4, [r2, #4]
 8003d8e:	e7c9      	b.n	8003d24 <_free_r+0x24>
 8003d90:	bd38      	pop	{r3, r4, r5, pc}
 8003d92:	bf00      	nop
 8003d94:	20000094 	.word	0x20000094

08003d98 <_malloc_r>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	1ccd      	adds	r5, r1, #3
 8003d9c:	f025 0503 	bic.w	r5, r5, #3
 8003da0:	3508      	adds	r5, #8
 8003da2:	2d0c      	cmp	r5, #12
 8003da4:	bf38      	it	cc
 8003da6:	250c      	movcc	r5, #12
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	4606      	mov	r6, r0
 8003dac:	db01      	blt.n	8003db2 <_malloc_r+0x1a>
 8003dae:	42a9      	cmp	r1, r5
 8003db0:	d903      	bls.n	8003dba <_malloc_r+0x22>
 8003db2:	230c      	movs	r3, #12
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	2000      	movs	r0, #0
 8003db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dba:	f000 ffbd 	bl	8004d38 <__malloc_lock>
 8003dbe:	4921      	ldr	r1, [pc, #132]	; (8003e44 <_malloc_r+0xac>)
 8003dc0:	680a      	ldr	r2, [r1, #0]
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	b99c      	cbnz	r4, 8003dee <_malloc_r+0x56>
 8003dc6:	4f20      	ldr	r7, [pc, #128]	; (8003e48 <_malloc_r+0xb0>)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b923      	cbnz	r3, 8003dd6 <_malloc_r+0x3e>
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f000 fc86 	bl	80046e0 <_sbrk_r>
 8003dd4:	6038      	str	r0, [r7, #0]
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f000 fc81 	bl	80046e0 <_sbrk_r>
 8003dde:	1c43      	adds	r3, r0, #1
 8003de0:	d123      	bne.n	8003e2a <_malloc_r+0x92>
 8003de2:	230c      	movs	r3, #12
 8003de4:	4630      	mov	r0, r6
 8003de6:	6033      	str	r3, [r6, #0]
 8003de8:	f000 ffac 	bl	8004d44 <__malloc_unlock>
 8003dec:	e7e3      	b.n	8003db6 <_malloc_r+0x1e>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	1b5b      	subs	r3, r3, r5
 8003df2:	d417      	bmi.n	8003e24 <_malloc_r+0x8c>
 8003df4:	2b0b      	cmp	r3, #11
 8003df6:	d903      	bls.n	8003e00 <_malloc_r+0x68>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	441c      	add	r4, r3
 8003dfc:	6025      	str	r5, [r4, #0]
 8003dfe:	e004      	b.n	8003e0a <_malloc_r+0x72>
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	42a2      	cmp	r2, r4
 8003e04:	bf0c      	ite	eq
 8003e06:	600b      	streq	r3, [r1, #0]
 8003e08:	6053      	strne	r3, [r2, #4]
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f000 ff9a 	bl	8004d44 <__malloc_unlock>
 8003e10:	f104 000b 	add.w	r0, r4, #11
 8003e14:	1d23      	adds	r3, r4, #4
 8003e16:	f020 0007 	bic.w	r0, r0, #7
 8003e1a:	1ac2      	subs	r2, r0, r3
 8003e1c:	d0cc      	beq.n	8003db8 <_malloc_r+0x20>
 8003e1e:	1a1b      	subs	r3, r3, r0
 8003e20:	50a3      	str	r3, [r4, r2]
 8003e22:	e7c9      	b.n	8003db8 <_malloc_r+0x20>
 8003e24:	4622      	mov	r2, r4
 8003e26:	6864      	ldr	r4, [r4, #4]
 8003e28:	e7cc      	b.n	8003dc4 <_malloc_r+0x2c>
 8003e2a:	1cc4      	adds	r4, r0, #3
 8003e2c:	f024 0403 	bic.w	r4, r4, #3
 8003e30:	42a0      	cmp	r0, r4
 8003e32:	d0e3      	beq.n	8003dfc <_malloc_r+0x64>
 8003e34:	1a21      	subs	r1, r4, r0
 8003e36:	4630      	mov	r0, r6
 8003e38:	f000 fc52 	bl	80046e0 <_sbrk_r>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d1dd      	bne.n	8003dfc <_malloc_r+0x64>
 8003e40:	e7cf      	b.n	8003de2 <_malloc_r+0x4a>
 8003e42:	bf00      	nop
 8003e44:	20000094 	.word	0x20000094
 8003e48:	20000098 	.word	0x20000098

08003e4c <__ssputs_r>:
 8003e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	688e      	ldr	r6, [r1, #8]
 8003e52:	4682      	mov	sl, r0
 8003e54:	429e      	cmp	r6, r3
 8003e56:	460c      	mov	r4, r1
 8003e58:	4690      	mov	r8, r2
 8003e5a:	461f      	mov	r7, r3
 8003e5c:	d838      	bhi.n	8003ed0 <__ssputs_r+0x84>
 8003e5e:	898a      	ldrh	r2, [r1, #12]
 8003e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e64:	d032      	beq.n	8003ecc <__ssputs_r+0x80>
 8003e66:	6825      	ldr	r5, [r4, #0]
 8003e68:	6909      	ldr	r1, [r1, #16]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	eba5 0901 	sub.w	r9, r5, r1
 8003e70:	6965      	ldr	r5, [r4, #20]
 8003e72:	444b      	add	r3, r9
 8003e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e7c:	106d      	asrs	r5, r5, #1
 8003e7e:	429d      	cmp	r5, r3
 8003e80:	bf38      	it	cc
 8003e82:	461d      	movcc	r5, r3
 8003e84:	0553      	lsls	r3, r2, #21
 8003e86:	d531      	bpl.n	8003eec <__ssputs_r+0xa0>
 8003e88:	4629      	mov	r1, r5
 8003e8a:	f7ff ff85 	bl	8003d98 <_malloc_r>
 8003e8e:	4606      	mov	r6, r0
 8003e90:	b950      	cbnz	r0, 8003ea8 <__ssputs_r+0x5c>
 8003e92:	230c      	movs	r3, #12
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	f8ca 3000 	str.w	r3, [sl]
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea8:	464a      	mov	r2, r9
 8003eaa:	6921      	ldr	r1, [r4, #16]
 8003eac:	f000 ff1c 	bl	8004ce8 <memcpy>
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eba:	81a3      	strh	r3, [r4, #12]
 8003ebc:	6126      	str	r6, [r4, #16]
 8003ebe:	444e      	add	r6, r9
 8003ec0:	6026      	str	r6, [r4, #0]
 8003ec2:	463e      	mov	r6, r7
 8003ec4:	6165      	str	r5, [r4, #20]
 8003ec6:	eba5 0509 	sub.w	r5, r5, r9
 8003eca:	60a5      	str	r5, [r4, #8]
 8003ecc:	42be      	cmp	r6, r7
 8003ece:	d900      	bls.n	8003ed2 <__ssputs_r+0x86>
 8003ed0:	463e      	mov	r6, r7
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	f000 ff14 	bl	8004d04 <memmove>
 8003edc:	68a3      	ldr	r3, [r4, #8]
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	1b9b      	subs	r3, r3, r6
 8003ee2:	4432      	add	r2, r6
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	60a3      	str	r3, [r4, #8]
 8003ee8:	6022      	str	r2, [r4, #0]
 8003eea:	e7db      	b.n	8003ea4 <__ssputs_r+0x58>
 8003eec:	462a      	mov	r2, r5
 8003eee:	f000 ff2f 	bl	8004d50 <_realloc_r>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d1e1      	bne.n	8003ebc <__ssputs_r+0x70>
 8003ef8:	4650      	mov	r0, sl
 8003efa:	6921      	ldr	r1, [r4, #16]
 8003efc:	f7ff ff00 	bl	8003d00 <_free_r>
 8003f00:	e7c7      	b.n	8003e92 <__ssputs_r+0x46>
	...

08003f04 <_svfiprintf_r>:
 8003f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f08:	4698      	mov	r8, r3
 8003f0a:	898b      	ldrh	r3, [r1, #12]
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	061b      	lsls	r3, r3, #24
 8003f10:	460d      	mov	r5, r1
 8003f12:	4614      	mov	r4, r2
 8003f14:	b09d      	sub	sp, #116	; 0x74
 8003f16:	d50e      	bpl.n	8003f36 <_svfiprintf_r+0x32>
 8003f18:	690b      	ldr	r3, [r1, #16]
 8003f1a:	b963      	cbnz	r3, 8003f36 <_svfiprintf_r+0x32>
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	f7ff ff3b 	bl	8003d98 <_malloc_r>
 8003f22:	6028      	str	r0, [r5, #0]
 8003f24:	6128      	str	r0, [r5, #16]
 8003f26:	b920      	cbnz	r0, 8003f32 <_svfiprintf_r+0x2e>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e0d1      	b.n	80040d6 <_svfiprintf_r+0x1d2>
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	616b      	str	r3, [r5, #20]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f40:	2330      	movs	r3, #48	; 0x30
 8003f42:	f04f 0901 	mov.w	r9, #1
 8003f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040f0 <_svfiprintf_r+0x1ec>
 8003f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f52:	4623      	mov	r3, r4
 8003f54:	469a      	mov	sl, r3
 8003f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f5a:	b10a      	cbz	r2, 8003f60 <_svfiprintf_r+0x5c>
 8003f5c:	2a25      	cmp	r2, #37	; 0x25
 8003f5e:	d1f9      	bne.n	8003f54 <_svfiprintf_r+0x50>
 8003f60:	ebba 0b04 	subs.w	fp, sl, r4
 8003f64:	d00b      	beq.n	8003f7e <_svfiprintf_r+0x7a>
 8003f66:	465b      	mov	r3, fp
 8003f68:	4622      	mov	r2, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ff6d 	bl	8003e4c <__ssputs_r>
 8003f72:	3001      	adds	r0, #1
 8003f74:	f000 80aa 	beq.w	80040cc <_svfiprintf_r+0x1c8>
 8003f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7a:	445a      	add	r2, fp
 8003f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a2 	beq.w	80040cc <_svfiprintf_r+0x1c8>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f92:	f10a 0a01 	add.w	sl, sl, #1
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	9307      	str	r3, [sp, #28]
 8003f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa0:	4654      	mov	r4, sl
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa8:	4851      	ldr	r0, [pc, #324]	; (80040f0 <_svfiprintf_r+0x1ec>)
 8003faa:	f000 fe8f 	bl	8004ccc <memchr>
 8003fae:	9a04      	ldr	r2, [sp, #16]
 8003fb0:	b9d8      	cbnz	r0, 8003fea <_svfiprintf_r+0xe6>
 8003fb2:	06d0      	lsls	r0, r2, #27
 8003fb4:	bf44      	itt	mi
 8003fb6:	2320      	movmi	r3, #32
 8003fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbc:	0711      	lsls	r1, r2, #28
 8003fbe:	bf44      	itt	mi
 8003fc0:	232b      	movmi	r3, #43	; 0x2b
 8003fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fca:	2b2a      	cmp	r3, #42	; 0x2a
 8003fcc:	d015      	beq.n	8003ffa <_svfiprintf_r+0xf6>
 8003fce:	4654      	mov	r4, sl
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f04f 0c0a 	mov.w	ip, #10
 8003fd6:	9a07      	ldr	r2, [sp, #28]
 8003fd8:	4621      	mov	r1, r4
 8003fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fde:	3b30      	subs	r3, #48	; 0x30
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	d94e      	bls.n	8004082 <_svfiprintf_r+0x17e>
 8003fe4:	b1b0      	cbz	r0, 8004014 <_svfiprintf_r+0x110>
 8003fe6:	9207      	str	r2, [sp, #28]
 8003fe8:	e014      	b.n	8004014 <_svfiprintf_r+0x110>
 8003fea:	eba0 0308 	sub.w	r3, r0, r8
 8003fee:	fa09 f303 	lsl.w	r3, r9, r3
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	46a2      	mov	sl, r4
 8003ff6:	9304      	str	r3, [sp, #16]
 8003ff8:	e7d2      	b.n	8003fa0 <_svfiprintf_r+0x9c>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	1d19      	adds	r1, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9103      	str	r1, [sp, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfbb      	ittet	lt
 8004006:	425b      	neglt	r3, r3
 8004008:	f042 0202 	orrlt.w	r2, r2, #2
 800400c:	9307      	strge	r3, [sp, #28]
 800400e:	9307      	strlt	r3, [sp, #28]
 8004010:	bfb8      	it	lt
 8004012:	9204      	strlt	r2, [sp, #16]
 8004014:	7823      	ldrb	r3, [r4, #0]
 8004016:	2b2e      	cmp	r3, #46	; 0x2e
 8004018:	d10c      	bne.n	8004034 <_svfiprintf_r+0x130>
 800401a:	7863      	ldrb	r3, [r4, #1]
 800401c:	2b2a      	cmp	r3, #42	; 0x2a
 800401e:	d135      	bne.n	800408c <_svfiprintf_r+0x188>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	3402      	adds	r4, #2
 8004024:	1d1a      	adds	r2, r3, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	9203      	str	r2, [sp, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	bfb8      	it	lt
 800402e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004100 <_svfiprintf_r+0x1fc>
 8004038:	2203      	movs	r2, #3
 800403a:	4650      	mov	r0, sl
 800403c:	7821      	ldrb	r1, [r4, #0]
 800403e:	f000 fe45 	bl	8004ccc <memchr>
 8004042:	b140      	cbz	r0, 8004056 <_svfiprintf_r+0x152>
 8004044:	2340      	movs	r3, #64	; 0x40
 8004046:	eba0 000a 	sub.w	r0, r0, sl
 800404a:	fa03 f000 	lsl.w	r0, r3, r0
 800404e:	9b04      	ldr	r3, [sp, #16]
 8004050:	3401      	adds	r4, #1
 8004052:	4303      	orrs	r3, r0
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405a:	2206      	movs	r2, #6
 800405c:	4825      	ldr	r0, [pc, #148]	; (80040f4 <_svfiprintf_r+0x1f0>)
 800405e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004062:	f000 fe33 	bl	8004ccc <memchr>
 8004066:	2800      	cmp	r0, #0
 8004068:	d038      	beq.n	80040dc <_svfiprintf_r+0x1d8>
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <_svfiprintf_r+0x1f4>)
 800406c:	bb1b      	cbnz	r3, 80040b6 <_svfiprintf_r+0x1b2>
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	3307      	adds	r3, #7
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	3308      	adds	r3, #8
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407c:	4433      	add	r3, r6
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
 8004080:	e767      	b.n	8003f52 <_svfiprintf_r+0x4e>
 8004082:	460c      	mov	r4, r1
 8004084:	2001      	movs	r0, #1
 8004086:	fb0c 3202 	mla	r2, ip, r2, r3
 800408a:	e7a5      	b.n	8003fd8 <_svfiprintf_r+0xd4>
 800408c:	2300      	movs	r3, #0
 800408e:	f04f 0c0a 	mov.w	ip, #10
 8004092:	4619      	mov	r1, r3
 8004094:	3401      	adds	r4, #1
 8004096:	9305      	str	r3, [sp, #20]
 8004098:	4620      	mov	r0, r4
 800409a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800409e:	3a30      	subs	r2, #48	; 0x30
 80040a0:	2a09      	cmp	r2, #9
 80040a2:	d903      	bls.n	80040ac <_svfiprintf_r+0x1a8>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0c5      	beq.n	8004034 <_svfiprintf_r+0x130>
 80040a8:	9105      	str	r1, [sp, #20]
 80040aa:	e7c3      	b.n	8004034 <_svfiprintf_r+0x130>
 80040ac:	4604      	mov	r4, r0
 80040ae:	2301      	movs	r3, #1
 80040b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040b4:	e7f0      	b.n	8004098 <_svfiprintf_r+0x194>
 80040b6:	ab03      	add	r3, sp, #12
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	462a      	mov	r2, r5
 80040bc:	4638      	mov	r0, r7
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <_svfiprintf_r+0x1f8>)
 80040c0:	a904      	add	r1, sp, #16
 80040c2:	f3af 8000 	nop.w
 80040c6:	1c42      	adds	r2, r0, #1
 80040c8:	4606      	mov	r6, r0
 80040ca:	d1d6      	bne.n	800407a <_svfiprintf_r+0x176>
 80040cc:	89ab      	ldrh	r3, [r5, #12]
 80040ce:	065b      	lsls	r3, r3, #25
 80040d0:	f53f af2c 	bmi.w	8003f2c <_svfiprintf_r+0x28>
 80040d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d6:	b01d      	add	sp, #116	; 0x74
 80040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040dc:	ab03      	add	r3, sp, #12
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	462a      	mov	r2, r5
 80040e2:	4638      	mov	r0, r7
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <_svfiprintf_r+0x1f8>)
 80040e6:	a904      	add	r1, sp, #16
 80040e8:	f000 f9d4 	bl	8004494 <_printf_i>
 80040ec:	e7eb      	b.n	80040c6 <_svfiprintf_r+0x1c2>
 80040ee:	bf00      	nop
 80040f0:	0800536d 	.word	0x0800536d
 80040f4:	08005377 	.word	0x08005377
 80040f8:	00000000 	.word	0x00000000
 80040fc:	08003e4d 	.word	0x08003e4d
 8004100:	08005373 	.word	0x08005373

08004104 <__sfputc_r>:
 8004104:	6893      	ldr	r3, [r2, #8]
 8004106:	b410      	push	{r4}
 8004108:	3b01      	subs	r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	6093      	str	r3, [r2, #8]
 800410e:	da07      	bge.n	8004120 <__sfputc_r+0x1c>
 8004110:	6994      	ldr	r4, [r2, #24]
 8004112:	42a3      	cmp	r3, r4
 8004114:	db01      	blt.n	800411a <__sfputc_r+0x16>
 8004116:	290a      	cmp	r1, #10
 8004118:	d102      	bne.n	8004120 <__sfputc_r+0x1c>
 800411a:	bc10      	pop	{r4}
 800411c:	f000 baf0 	b.w	8004700 <__swbuf_r>
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	1c58      	adds	r0, r3, #1
 8004124:	6010      	str	r0, [r2, #0]
 8004126:	7019      	strb	r1, [r3, #0]
 8004128:	4608      	mov	r0, r1
 800412a:	bc10      	pop	{r4}
 800412c:	4770      	bx	lr

0800412e <__sfputs_r>:
 800412e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004130:	4606      	mov	r6, r0
 8004132:	460f      	mov	r7, r1
 8004134:	4614      	mov	r4, r2
 8004136:	18d5      	adds	r5, r2, r3
 8004138:	42ac      	cmp	r4, r5
 800413a:	d101      	bne.n	8004140 <__sfputs_r+0x12>
 800413c:	2000      	movs	r0, #0
 800413e:	e007      	b.n	8004150 <__sfputs_r+0x22>
 8004140:	463a      	mov	r2, r7
 8004142:	4630      	mov	r0, r6
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	f7ff ffdc 	bl	8004104 <__sfputc_r>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d1f3      	bne.n	8004138 <__sfputs_r+0xa>
 8004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004154 <_vfiprintf_r>:
 8004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	460d      	mov	r5, r1
 800415a:	4614      	mov	r4, r2
 800415c:	4698      	mov	r8, r3
 800415e:	4606      	mov	r6, r0
 8004160:	b09d      	sub	sp, #116	; 0x74
 8004162:	b118      	cbz	r0, 800416c <_vfiprintf_r+0x18>
 8004164:	6983      	ldr	r3, [r0, #24]
 8004166:	b90b      	cbnz	r3, 800416c <_vfiprintf_r+0x18>
 8004168:	f000 fcac 	bl	8004ac4 <__sinit>
 800416c:	4b89      	ldr	r3, [pc, #548]	; (8004394 <_vfiprintf_r+0x240>)
 800416e:	429d      	cmp	r5, r3
 8004170:	d11b      	bne.n	80041aa <_vfiprintf_r+0x56>
 8004172:	6875      	ldr	r5, [r6, #4]
 8004174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004176:	07d9      	lsls	r1, r3, #31
 8004178:	d405      	bmi.n	8004186 <_vfiprintf_r+0x32>
 800417a:	89ab      	ldrh	r3, [r5, #12]
 800417c:	059a      	lsls	r2, r3, #22
 800417e:	d402      	bmi.n	8004186 <_vfiprintf_r+0x32>
 8004180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004182:	f000 fd3d 	bl	8004c00 <__retarget_lock_acquire_recursive>
 8004186:	89ab      	ldrh	r3, [r5, #12]
 8004188:	071b      	lsls	r3, r3, #28
 800418a:	d501      	bpl.n	8004190 <_vfiprintf_r+0x3c>
 800418c:	692b      	ldr	r3, [r5, #16]
 800418e:	b9eb      	cbnz	r3, 80041cc <_vfiprintf_r+0x78>
 8004190:	4629      	mov	r1, r5
 8004192:	4630      	mov	r0, r6
 8004194:	f000 fb06 	bl	80047a4 <__swsetup_r>
 8004198:	b1c0      	cbz	r0, 80041cc <_vfiprintf_r+0x78>
 800419a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800419c:	07dc      	lsls	r4, r3, #31
 800419e:	d50e      	bpl.n	80041be <_vfiprintf_r+0x6a>
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	b01d      	add	sp, #116	; 0x74
 80041a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041aa:	4b7b      	ldr	r3, [pc, #492]	; (8004398 <_vfiprintf_r+0x244>)
 80041ac:	429d      	cmp	r5, r3
 80041ae:	d101      	bne.n	80041b4 <_vfiprintf_r+0x60>
 80041b0:	68b5      	ldr	r5, [r6, #8]
 80041b2:	e7df      	b.n	8004174 <_vfiprintf_r+0x20>
 80041b4:	4b79      	ldr	r3, [pc, #484]	; (800439c <_vfiprintf_r+0x248>)
 80041b6:	429d      	cmp	r5, r3
 80041b8:	bf08      	it	eq
 80041ba:	68f5      	ldreq	r5, [r6, #12]
 80041bc:	e7da      	b.n	8004174 <_vfiprintf_r+0x20>
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	0598      	lsls	r0, r3, #22
 80041c2:	d4ed      	bmi.n	80041a0 <_vfiprintf_r+0x4c>
 80041c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041c6:	f000 fd1c 	bl	8004c02 <__retarget_lock_release_recursive>
 80041ca:	e7e9      	b.n	80041a0 <_vfiprintf_r+0x4c>
 80041cc:	2300      	movs	r3, #0
 80041ce:	9309      	str	r3, [sp, #36]	; 0x24
 80041d0:	2320      	movs	r3, #32
 80041d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041d6:	2330      	movs	r3, #48	; 0x30
 80041d8:	f04f 0901 	mov.w	r9, #1
 80041dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80043a0 <_vfiprintf_r+0x24c>
 80041e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041e8:	4623      	mov	r3, r4
 80041ea:	469a      	mov	sl, r3
 80041ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f0:	b10a      	cbz	r2, 80041f6 <_vfiprintf_r+0xa2>
 80041f2:	2a25      	cmp	r2, #37	; 0x25
 80041f4:	d1f9      	bne.n	80041ea <_vfiprintf_r+0x96>
 80041f6:	ebba 0b04 	subs.w	fp, sl, r4
 80041fa:	d00b      	beq.n	8004214 <_vfiprintf_r+0xc0>
 80041fc:	465b      	mov	r3, fp
 80041fe:	4622      	mov	r2, r4
 8004200:	4629      	mov	r1, r5
 8004202:	4630      	mov	r0, r6
 8004204:	f7ff ff93 	bl	800412e <__sfputs_r>
 8004208:	3001      	adds	r0, #1
 800420a:	f000 80aa 	beq.w	8004362 <_vfiprintf_r+0x20e>
 800420e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004210:	445a      	add	r2, fp
 8004212:	9209      	str	r2, [sp, #36]	; 0x24
 8004214:	f89a 3000 	ldrb.w	r3, [sl]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a2 	beq.w	8004362 <_vfiprintf_r+0x20e>
 800421e:	2300      	movs	r3, #0
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004228:	f10a 0a01 	add.w	sl, sl, #1
 800422c:	9304      	str	r3, [sp, #16]
 800422e:	9307      	str	r3, [sp, #28]
 8004230:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004234:	931a      	str	r3, [sp, #104]	; 0x68
 8004236:	4654      	mov	r4, sl
 8004238:	2205      	movs	r2, #5
 800423a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423e:	4858      	ldr	r0, [pc, #352]	; (80043a0 <_vfiprintf_r+0x24c>)
 8004240:	f000 fd44 	bl	8004ccc <memchr>
 8004244:	9a04      	ldr	r2, [sp, #16]
 8004246:	b9d8      	cbnz	r0, 8004280 <_vfiprintf_r+0x12c>
 8004248:	06d1      	lsls	r1, r2, #27
 800424a:	bf44      	itt	mi
 800424c:	2320      	movmi	r3, #32
 800424e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004252:	0713      	lsls	r3, r2, #28
 8004254:	bf44      	itt	mi
 8004256:	232b      	movmi	r3, #43	; 0x2b
 8004258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800425c:	f89a 3000 	ldrb.w	r3, [sl]
 8004260:	2b2a      	cmp	r3, #42	; 0x2a
 8004262:	d015      	beq.n	8004290 <_vfiprintf_r+0x13c>
 8004264:	4654      	mov	r4, sl
 8004266:	2000      	movs	r0, #0
 8004268:	f04f 0c0a 	mov.w	ip, #10
 800426c:	9a07      	ldr	r2, [sp, #28]
 800426e:	4621      	mov	r1, r4
 8004270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004274:	3b30      	subs	r3, #48	; 0x30
 8004276:	2b09      	cmp	r3, #9
 8004278:	d94e      	bls.n	8004318 <_vfiprintf_r+0x1c4>
 800427a:	b1b0      	cbz	r0, 80042aa <_vfiprintf_r+0x156>
 800427c:	9207      	str	r2, [sp, #28]
 800427e:	e014      	b.n	80042aa <_vfiprintf_r+0x156>
 8004280:	eba0 0308 	sub.w	r3, r0, r8
 8004284:	fa09 f303 	lsl.w	r3, r9, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	46a2      	mov	sl, r4
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	e7d2      	b.n	8004236 <_vfiprintf_r+0xe2>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	1d19      	adds	r1, r3, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	9103      	str	r1, [sp, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfbb      	ittet	lt
 800429c:	425b      	neglt	r3, r3
 800429e:	f042 0202 	orrlt.w	r2, r2, #2
 80042a2:	9307      	strge	r3, [sp, #28]
 80042a4:	9307      	strlt	r3, [sp, #28]
 80042a6:	bfb8      	it	lt
 80042a8:	9204      	strlt	r2, [sp, #16]
 80042aa:	7823      	ldrb	r3, [r4, #0]
 80042ac:	2b2e      	cmp	r3, #46	; 0x2e
 80042ae:	d10c      	bne.n	80042ca <_vfiprintf_r+0x176>
 80042b0:	7863      	ldrb	r3, [r4, #1]
 80042b2:	2b2a      	cmp	r3, #42	; 0x2a
 80042b4:	d135      	bne.n	8004322 <_vfiprintf_r+0x1ce>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	3402      	adds	r4, #2
 80042ba:	1d1a      	adds	r2, r3, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	9203      	str	r2, [sp, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bfb8      	it	lt
 80042c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042c8:	9305      	str	r3, [sp, #20]
 80042ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043b0 <_vfiprintf_r+0x25c>
 80042ce:	2203      	movs	r2, #3
 80042d0:	4650      	mov	r0, sl
 80042d2:	7821      	ldrb	r1, [r4, #0]
 80042d4:	f000 fcfa 	bl	8004ccc <memchr>
 80042d8:	b140      	cbz	r0, 80042ec <_vfiprintf_r+0x198>
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	eba0 000a 	sub.w	r0, r0, sl
 80042e0:	fa03 f000 	lsl.w	r0, r3, r0
 80042e4:	9b04      	ldr	r3, [sp, #16]
 80042e6:	3401      	adds	r4, #1
 80042e8:	4303      	orrs	r3, r0
 80042ea:	9304      	str	r3, [sp, #16]
 80042ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f0:	2206      	movs	r2, #6
 80042f2:	482c      	ldr	r0, [pc, #176]	; (80043a4 <_vfiprintf_r+0x250>)
 80042f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042f8:	f000 fce8 	bl	8004ccc <memchr>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d03f      	beq.n	8004380 <_vfiprintf_r+0x22c>
 8004300:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <_vfiprintf_r+0x254>)
 8004302:	bb1b      	cbnz	r3, 800434c <_vfiprintf_r+0x1f8>
 8004304:	9b03      	ldr	r3, [sp, #12]
 8004306:	3307      	adds	r3, #7
 8004308:	f023 0307 	bic.w	r3, r3, #7
 800430c:	3308      	adds	r3, #8
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004312:	443b      	add	r3, r7
 8004314:	9309      	str	r3, [sp, #36]	; 0x24
 8004316:	e767      	b.n	80041e8 <_vfiprintf_r+0x94>
 8004318:	460c      	mov	r4, r1
 800431a:	2001      	movs	r0, #1
 800431c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004320:	e7a5      	b.n	800426e <_vfiprintf_r+0x11a>
 8004322:	2300      	movs	r3, #0
 8004324:	f04f 0c0a 	mov.w	ip, #10
 8004328:	4619      	mov	r1, r3
 800432a:	3401      	adds	r4, #1
 800432c:	9305      	str	r3, [sp, #20]
 800432e:	4620      	mov	r0, r4
 8004330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004334:	3a30      	subs	r2, #48	; 0x30
 8004336:	2a09      	cmp	r2, #9
 8004338:	d903      	bls.n	8004342 <_vfiprintf_r+0x1ee>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0c5      	beq.n	80042ca <_vfiprintf_r+0x176>
 800433e:	9105      	str	r1, [sp, #20]
 8004340:	e7c3      	b.n	80042ca <_vfiprintf_r+0x176>
 8004342:	4604      	mov	r4, r0
 8004344:	2301      	movs	r3, #1
 8004346:	fb0c 2101 	mla	r1, ip, r1, r2
 800434a:	e7f0      	b.n	800432e <_vfiprintf_r+0x1da>
 800434c:	ab03      	add	r3, sp, #12
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	462a      	mov	r2, r5
 8004352:	4630      	mov	r0, r6
 8004354:	4b15      	ldr	r3, [pc, #84]	; (80043ac <_vfiprintf_r+0x258>)
 8004356:	a904      	add	r1, sp, #16
 8004358:	f3af 8000 	nop.w
 800435c:	4607      	mov	r7, r0
 800435e:	1c78      	adds	r0, r7, #1
 8004360:	d1d6      	bne.n	8004310 <_vfiprintf_r+0x1bc>
 8004362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004364:	07d9      	lsls	r1, r3, #31
 8004366:	d405      	bmi.n	8004374 <_vfiprintf_r+0x220>
 8004368:	89ab      	ldrh	r3, [r5, #12]
 800436a:	059a      	lsls	r2, r3, #22
 800436c:	d402      	bmi.n	8004374 <_vfiprintf_r+0x220>
 800436e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004370:	f000 fc47 	bl	8004c02 <__retarget_lock_release_recursive>
 8004374:	89ab      	ldrh	r3, [r5, #12]
 8004376:	065b      	lsls	r3, r3, #25
 8004378:	f53f af12 	bmi.w	80041a0 <_vfiprintf_r+0x4c>
 800437c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800437e:	e711      	b.n	80041a4 <_vfiprintf_r+0x50>
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	462a      	mov	r2, r5
 8004386:	4630      	mov	r0, r6
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <_vfiprintf_r+0x258>)
 800438a:	a904      	add	r1, sp, #16
 800438c:	f000 f882 	bl	8004494 <_printf_i>
 8004390:	e7e4      	b.n	800435c <_vfiprintf_r+0x208>
 8004392:	bf00      	nop
 8004394:	080053c0 	.word	0x080053c0
 8004398:	080053e0 	.word	0x080053e0
 800439c:	080053a0 	.word	0x080053a0
 80043a0:	0800536d 	.word	0x0800536d
 80043a4:	08005377 	.word	0x08005377
 80043a8:	00000000 	.word	0x00000000
 80043ac:	0800412f 	.word	0x0800412f
 80043b0:	08005373 	.word	0x08005373

080043b4 <_printf_common>:
 80043b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	4616      	mov	r6, r2
 80043ba:	4699      	mov	r9, r3
 80043bc:	688a      	ldr	r2, [r1, #8]
 80043be:	690b      	ldr	r3, [r1, #16]
 80043c0:	4607      	mov	r7, r0
 80043c2:	4293      	cmp	r3, r2
 80043c4:	bfb8      	it	lt
 80043c6:	4613      	movlt	r3, r2
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043ce:	460c      	mov	r4, r1
 80043d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d4:	b10a      	cbz	r2, 80043da <_printf_common+0x26>
 80043d6:	3301      	adds	r3, #1
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	0699      	lsls	r1, r3, #26
 80043de:	bf42      	ittt	mi
 80043e0:	6833      	ldrmi	r3, [r6, #0]
 80043e2:	3302      	addmi	r3, #2
 80043e4:	6033      	strmi	r3, [r6, #0]
 80043e6:	6825      	ldr	r5, [r4, #0]
 80043e8:	f015 0506 	ands.w	r5, r5, #6
 80043ec:	d106      	bne.n	80043fc <_printf_common+0x48>
 80043ee:	f104 0a19 	add.w	sl, r4, #25
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	6832      	ldr	r2, [r6, #0]
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dc28      	bgt.n	800444e <_printf_common+0x9a>
 80043fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004400:	1e13      	subs	r3, r2, #0
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	bf18      	it	ne
 8004406:	2301      	movne	r3, #1
 8004408:	0692      	lsls	r2, r2, #26
 800440a:	d42d      	bmi.n	8004468 <_printf_common+0xb4>
 800440c:	4649      	mov	r1, r9
 800440e:	4638      	mov	r0, r7
 8004410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004414:	47c0      	blx	r8
 8004416:	3001      	adds	r0, #1
 8004418:	d020      	beq.n	800445c <_printf_common+0xa8>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	68e5      	ldr	r5, [r4, #12]
 800441e:	f003 0306 	and.w	r3, r3, #6
 8004422:	2b04      	cmp	r3, #4
 8004424:	bf18      	it	ne
 8004426:	2500      	movne	r5, #0
 8004428:	6832      	ldr	r2, [r6, #0]
 800442a:	f04f 0600 	mov.w	r6, #0
 800442e:	68a3      	ldr	r3, [r4, #8]
 8004430:	bf08      	it	eq
 8004432:	1aad      	subeq	r5, r5, r2
 8004434:	6922      	ldr	r2, [r4, #16]
 8004436:	bf08      	it	eq
 8004438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800443c:	4293      	cmp	r3, r2
 800443e:	bfc4      	itt	gt
 8004440:	1a9b      	subgt	r3, r3, r2
 8004442:	18ed      	addgt	r5, r5, r3
 8004444:	341a      	adds	r4, #26
 8004446:	42b5      	cmp	r5, r6
 8004448:	d11a      	bne.n	8004480 <_printf_common+0xcc>
 800444a:	2000      	movs	r0, #0
 800444c:	e008      	b.n	8004460 <_printf_common+0xac>
 800444e:	2301      	movs	r3, #1
 8004450:	4652      	mov	r2, sl
 8004452:	4649      	mov	r1, r9
 8004454:	4638      	mov	r0, r7
 8004456:	47c0      	blx	r8
 8004458:	3001      	adds	r0, #1
 800445a:	d103      	bne.n	8004464 <_printf_common+0xb0>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004464:	3501      	adds	r5, #1
 8004466:	e7c4      	b.n	80043f2 <_printf_common+0x3e>
 8004468:	2030      	movs	r0, #48	; 0x30
 800446a:	18e1      	adds	r1, r4, r3
 800446c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004476:	4422      	add	r2, r4
 8004478:	3302      	adds	r3, #2
 800447a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800447e:	e7c5      	b.n	800440c <_printf_common+0x58>
 8004480:	2301      	movs	r3, #1
 8004482:	4622      	mov	r2, r4
 8004484:	4649      	mov	r1, r9
 8004486:	4638      	mov	r0, r7
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d0e6      	beq.n	800445c <_printf_common+0xa8>
 800448e:	3601      	adds	r6, #1
 8004490:	e7d9      	b.n	8004446 <_printf_common+0x92>
	...

08004494 <_printf_i>:
 8004494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	460c      	mov	r4, r1
 800449a:	7e27      	ldrb	r7, [r4, #24]
 800449c:	4691      	mov	r9, r2
 800449e:	2f78      	cmp	r7, #120	; 0x78
 80044a0:	4680      	mov	r8, r0
 80044a2:	469a      	mov	sl, r3
 80044a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044aa:	d807      	bhi.n	80044bc <_printf_i+0x28>
 80044ac:	2f62      	cmp	r7, #98	; 0x62
 80044ae:	d80a      	bhi.n	80044c6 <_printf_i+0x32>
 80044b0:	2f00      	cmp	r7, #0
 80044b2:	f000 80d9 	beq.w	8004668 <_printf_i+0x1d4>
 80044b6:	2f58      	cmp	r7, #88	; 0x58
 80044b8:	f000 80a4 	beq.w	8004604 <_printf_i+0x170>
 80044bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044c4:	e03a      	b.n	800453c <_printf_i+0xa8>
 80044c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ca:	2b15      	cmp	r3, #21
 80044cc:	d8f6      	bhi.n	80044bc <_printf_i+0x28>
 80044ce:	a001      	add	r0, pc, #4	; (adr r0, 80044d4 <_printf_i+0x40>)
 80044d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044d4:	0800452d 	.word	0x0800452d
 80044d8:	08004541 	.word	0x08004541
 80044dc:	080044bd 	.word	0x080044bd
 80044e0:	080044bd 	.word	0x080044bd
 80044e4:	080044bd 	.word	0x080044bd
 80044e8:	080044bd 	.word	0x080044bd
 80044ec:	08004541 	.word	0x08004541
 80044f0:	080044bd 	.word	0x080044bd
 80044f4:	080044bd 	.word	0x080044bd
 80044f8:	080044bd 	.word	0x080044bd
 80044fc:	080044bd 	.word	0x080044bd
 8004500:	0800464f 	.word	0x0800464f
 8004504:	08004571 	.word	0x08004571
 8004508:	08004631 	.word	0x08004631
 800450c:	080044bd 	.word	0x080044bd
 8004510:	080044bd 	.word	0x080044bd
 8004514:	08004671 	.word	0x08004671
 8004518:	080044bd 	.word	0x080044bd
 800451c:	08004571 	.word	0x08004571
 8004520:	080044bd 	.word	0x080044bd
 8004524:	080044bd 	.word	0x080044bd
 8004528:	08004639 	.word	0x08004639
 800452c:	680b      	ldr	r3, [r1, #0]
 800452e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004532:	1d1a      	adds	r2, r3, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	600a      	str	r2, [r1, #0]
 8004538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800453c:	2301      	movs	r3, #1
 800453e:	e0a4      	b.n	800468a <_printf_i+0x1f6>
 8004540:	6825      	ldr	r5, [r4, #0]
 8004542:	6808      	ldr	r0, [r1, #0]
 8004544:	062e      	lsls	r6, r5, #24
 8004546:	f100 0304 	add.w	r3, r0, #4
 800454a:	d50a      	bpl.n	8004562 <_printf_i+0xce>
 800454c:	6805      	ldr	r5, [r0, #0]
 800454e:	600b      	str	r3, [r1, #0]
 8004550:	2d00      	cmp	r5, #0
 8004552:	da03      	bge.n	800455c <_printf_i+0xc8>
 8004554:	232d      	movs	r3, #45	; 0x2d
 8004556:	426d      	negs	r5, r5
 8004558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455c:	230a      	movs	r3, #10
 800455e:	485e      	ldr	r0, [pc, #376]	; (80046d8 <_printf_i+0x244>)
 8004560:	e019      	b.n	8004596 <_printf_i+0x102>
 8004562:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004566:	6805      	ldr	r5, [r0, #0]
 8004568:	600b      	str	r3, [r1, #0]
 800456a:	bf18      	it	ne
 800456c:	b22d      	sxthne	r5, r5
 800456e:	e7ef      	b.n	8004550 <_printf_i+0xbc>
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	6825      	ldr	r5, [r4, #0]
 8004574:	1d18      	adds	r0, r3, #4
 8004576:	6008      	str	r0, [r1, #0]
 8004578:	0628      	lsls	r0, r5, #24
 800457a:	d501      	bpl.n	8004580 <_printf_i+0xec>
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	e002      	b.n	8004586 <_printf_i+0xf2>
 8004580:	0669      	lsls	r1, r5, #25
 8004582:	d5fb      	bpl.n	800457c <_printf_i+0xe8>
 8004584:	881d      	ldrh	r5, [r3, #0]
 8004586:	2f6f      	cmp	r7, #111	; 0x6f
 8004588:	bf0c      	ite	eq
 800458a:	2308      	moveq	r3, #8
 800458c:	230a      	movne	r3, #10
 800458e:	4852      	ldr	r0, [pc, #328]	; (80046d8 <_printf_i+0x244>)
 8004590:	2100      	movs	r1, #0
 8004592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004596:	6866      	ldr	r6, [r4, #4]
 8004598:	2e00      	cmp	r6, #0
 800459a:	bfa8      	it	ge
 800459c:	6821      	ldrge	r1, [r4, #0]
 800459e:	60a6      	str	r6, [r4, #8]
 80045a0:	bfa4      	itt	ge
 80045a2:	f021 0104 	bicge.w	r1, r1, #4
 80045a6:	6021      	strge	r1, [r4, #0]
 80045a8:	b90d      	cbnz	r5, 80045ae <_printf_i+0x11a>
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	d04d      	beq.n	800464a <_printf_i+0x1b6>
 80045ae:	4616      	mov	r6, r2
 80045b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80045b4:	fb03 5711 	mls	r7, r3, r1, r5
 80045b8:	5dc7      	ldrb	r7, [r0, r7]
 80045ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045be:	462f      	mov	r7, r5
 80045c0:	42bb      	cmp	r3, r7
 80045c2:	460d      	mov	r5, r1
 80045c4:	d9f4      	bls.n	80045b0 <_printf_i+0x11c>
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d10b      	bne.n	80045e2 <_printf_i+0x14e>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	07df      	lsls	r7, r3, #31
 80045ce:	d508      	bpl.n	80045e2 <_printf_i+0x14e>
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	6861      	ldr	r1, [r4, #4]
 80045d4:	4299      	cmp	r1, r3
 80045d6:	bfde      	ittt	le
 80045d8:	2330      	movle	r3, #48	; 0x30
 80045da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e2:	1b92      	subs	r2, r2, r6
 80045e4:	6122      	str	r2, [r4, #16]
 80045e6:	464b      	mov	r3, r9
 80045e8:	4621      	mov	r1, r4
 80045ea:	4640      	mov	r0, r8
 80045ec:	f8cd a000 	str.w	sl, [sp]
 80045f0:	aa03      	add	r2, sp, #12
 80045f2:	f7ff fedf 	bl	80043b4 <_printf_common>
 80045f6:	3001      	adds	r0, #1
 80045f8:	d14c      	bne.n	8004694 <_printf_i+0x200>
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295
 80045fe:	b004      	add	sp, #16
 8004600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004604:	4834      	ldr	r0, [pc, #208]	; (80046d8 <_printf_i+0x244>)
 8004606:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800460a:	680e      	ldr	r6, [r1, #0]
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004612:	061f      	lsls	r7, r3, #24
 8004614:	600e      	str	r6, [r1, #0]
 8004616:	d514      	bpl.n	8004642 <_printf_i+0x1ae>
 8004618:	07d9      	lsls	r1, r3, #31
 800461a:	bf44      	itt	mi
 800461c:	f043 0320 	orrmi.w	r3, r3, #32
 8004620:	6023      	strmi	r3, [r4, #0]
 8004622:	b91d      	cbnz	r5, 800462c <_printf_i+0x198>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	f023 0320 	bic.w	r3, r3, #32
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	2310      	movs	r3, #16
 800462e:	e7af      	b.n	8004590 <_printf_i+0xfc>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	2378      	movs	r3, #120	; 0x78
 800463a:	4828      	ldr	r0, [pc, #160]	; (80046dc <_printf_i+0x248>)
 800463c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004640:	e7e3      	b.n	800460a <_printf_i+0x176>
 8004642:	065e      	lsls	r6, r3, #25
 8004644:	bf48      	it	mi
 8004646:	b2ad      	uxthmi	r5, r5
 8004648:	e7e6      	b.n	8004618 <_printf_i+0x184>
 800464a:	4616      	mov	r6, r2
 800464c:	e7bb      	b.n	80045c6 <_printf_i+0x132>
 800464e:	680b      	ldr	r3, [r1, #0]
 8004650:	6826      	ldr	r6, [r4, #0]
 8004652:	1d1d      	adds	r5, r3, #4
 8004654:	6960      	ldr	r0, [r4, #20]
 8004656:	600d      	str	r5, [r1, #0]
 8004658:	0635      	lsls	r5, r6, #24
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	d501      	bpl.n	8004662 <_printf_i+0x1ce>
 800465e:	6018      	str	r0, [r3, #0]
 8004660:	e002      	b.n	8004668 <_printf_i+0x1d4>
 8004662:	0671      	lsls	r1, r6, #25
 8004664:	d5fb      	bpl.n	800465e <_printf_i+0x1ca>
 8004666:	8018      	strh	r0, [r3, #0]
 8004668:	2300      	movs	r3, #0
 800466a:	4616      	mov	r6, r2
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	e7ba      	b.n	80045e6 <_printf_i+0x152>
 8004670:	680b      	ldr	r3, [r1, #0]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	600a      	str	r2, [r1, #0]
 8004676:	681e      	ldr	r6, [r3, #0]
 8004678:	2100      	movs	r1, #0
 800467a:	4630      	mov	r0, r6
 800467c:	6862      	ldr	r2, [r4, #4]
 800467e:	f000 fb25 	bl	8004ccc <memchr>
 8004682:	b108      	cbz	r0, 8004688 <_printf_i+0x1f4>
 8004684:	1b80      	subs	r0, r0, r6
 8004686:	6060      	str	r0, [r4, #4]
 8004688:	6863      	ldr	r3, [r4, #4]
 800468a:	6123      	str	r3, [r4, #16]
 800468c:	2300      	movs	r3, #0
 800468e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004692:	e7a8      	b.n	80045e6 <_printf_i+0x152>
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	47d0      	blx	sl
 800469e:	3001      	adds	r0, #1
 80046a0:	d0ab      	beq.n	80045fa <_printf_i+0x166>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	079b      	lsls	r3, r3, #30
 80046a6:	d413      	bmi.n	80046d0 <_printf_i+0x23c>
 80046a8:	68e0      	ldr	r0, [r4, #12]
 80046aa:	9b03      	ldr	r3, [sp, #12]
 80046ac:	4298      	cmp	r0, r3
 80046ae:	bfb8      	it	lt
 80046b0:	4618      	movlt	r0, r3
 80046b2:	e7a4      	b.n	80045fe <_printf_i+0x16a>
 80046b4:	2301      	movs	r3, #1
 80046b6:	4632      	mov	r2, r6
 80046b8:	4649      	mov	r1, r9
 80046ba:	4640      	mov	r0, r8
 80046bc:	47d0      	blx	sl
 80046be:	3001      	adds	r0, #1
 80046c0:	d09b      	beq.n	80045fa <_printf_i+0x166>
 80046c2:	3501      	adds	r5, #1
 80046c4:	68e3      	ldr	r3, [r4, #12]
 80046c6:	9903      	ldr	r1, [sp, #12]
 80046c8:	1a5b      	subs	r3, r3, r1
 80046ca:	42ab      	cmp	r3, r5
 80046cc:	dcf2      	bgt.n	80046b4 <_printf_i+0x220>
 80046ce:	e7eb      	b.n	80046a8 <_printf_i+0x214>
 80046d0:	2500      	movs	r5, #0
 80046d2:	f104 0619 	add.w	r6, r4, #25
 80046d6:	e7f5      	b.n	80046c4 <_printf_i+0x230>
 80046d8:	0800537e 	.word	0x0800537e
 80046dc:	0800538f 	.word	0x0800538f

080046e0 <_sbrk_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	2300      	movs	r3, #0
 80046e4:	4d05      	ldr	r5, [pc, #20]	; (80046fc <_sbrk_r+0x1c>)
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	f7fc fb10 	bl	8000d10 <_sbrk>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_sbrk_r+0x1a>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_sbrk_r+0x1a>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	20000290 	.word	0x20000290

08004700 <__swbuf_r>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	460e      	mov	r6, r1
 8004704:	4614      	mov	r4, r2
 8004706:	4605      	mov	r5, r0
 8004708:	b118      	cbz	r0, 8004712 <__swbuf_r+0x12>
 800470a:	6983      	ldr	r3, [r0, #24]
 800470c:	b90b      	cbnz	r3, 8004712 <__swbuf_r+0x12>
 800470e:	f000 f9d9 	bl	8004ac4 <__sinit>
 8004712:	4b21      	ldr	r3, [pc, #132]	; (8004798 <__swbuf_r+0x98>)
 8004714:	429c      	cmp	r4, r3
 8004716:	d12b      	bne.n	8004770 <__swbuf_r+0x70>
 8004718:	686c      	ldr	r4, [r5, #4]
 800471a:	69a3      	ldr	r3, [r4, #24]
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	071a      	lsls	r2, r3, #28
 8004722:	d52f      	bpl.n	8004784 <__swbuf_r+0x84>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	b36b      	cbz	r3, 8004784 <__swbuf_r+0x84>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	b2f6      	uxtb	r6, r6
 800472e:	1ac0      	subs	r0, r0, r3
 8004730:	6963      	ldr	r3, [r4, #20]
 8004732:	4637      	mov	r7, r6
 8004734:	4283      	cmp	r3, r0
 8004736:	dc04      	bgt.n	8004742 <__swbuf_r+0x42>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f92e 	bl	800499c <_fflush_r>
 8004740:	bb30      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	3001      	adds	r0, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	60a3      	str	r3, [r4, #8]
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	6022      	str	r2, [r4, #0]
 8004750:	701e      	strb	r6, [r3, #0]
 8004752:	6963      	ldr	r3, [r4, #20]
 8004754:	4283      	cmp	r3, r0
 8004756:	d004      	beq.n	8004762 <__swbuf_r+0x62>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	07db      	lsls	r3, r3, #31
 800475c:	d506      	bpl.n	800476c <__swbuf_r+0x6c>
 800475e:	2e0a      	cmp	r6, #10
 8004760:	d104      	bne.n	800476c <__swbuf_r+0x6c>
 8004762:	4621      	mov	r1, r4
 8004764:	4628      	mov	r0, r5
 8004766:	f000 f919 	bl	800499c <_fflush_r>
 800476a:	b988      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 800476c:	4638      	mov	r0, r7
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <__swbuf_r+0x9c>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d101      	bne.n	800477a <__swbuf_r+0x7a>
 8004776:	68ac      	ldr	r4, [r5, #8]
 8004778:	e7cf      	b.n	800471a <__swbuf_r+0x1a>
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <__swbuf_r+0xa0>)
 800477c:	429c      	cmp	r4, r3
 800477e:	bf08      	it	eq
 8004780:	68ec      	ldreq	r4, [r5, #12]
 8004782:	e7ca      	b.n	800471a <__swbuf_r+0x1a>
 8004784:	4621      	mov	r1, r4
 8004786:	4628      	mov	r0, r5
 8004788:	f000 f80c 	bl	80047a4 <__swsetup_r>
 800478c:	2800      	cmp	r0, #0
 800478e:	d0cb      	beq.n	8004728 <__swbuf_r+0x28>
 8004790:	f04f 37ff 	mov.w	r7, #4294967295
 8004794:	e7ea      	b.n	800476c <__swbuf_r+0x6c>
 8004796:	bf00      	nop
 8004798:	080053c0 	.word	0x080053c0
 800479c:	080053e0 	.word	0x080053e0
 80047a0:	080053a0 	.word	0x080053a0

080047a4 <__swsetup_r>:
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <__swsetup_r+0xcc>)
 80047a6:	b570      	push	{r4, r5, r6, lr}
 80047a8:	681d      	ldr	r5, [r3, #0]
 80047aa:	4606      	mov	r6, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	b125      	cbz	r5, 80047ba <__swsetup_r+0x16>
 80047b0:	69ab      	ldr	r3, [r5, #24]
 80047b2:	b913      	cbnz	r3, 80047ba <__swsetup_r+0x16>
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 f985 	bl	8004ac4 <__sinit>
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <__swsetup_r+0xd0>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d10f      	bne.n	80047e0 <__swsetup_r+0x3c>
 80047c0:	686c      	ldr	r4, [r5, #4]
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c8:	0719      	lsls	r1, r3, #28
 80047ca:	d42c      	bmi.n	8004826 <__swsetup_r+0x82>
 80047cc:	06dd      	lsls	r5, r3, #27
 80047ce:	d411      	bmi.n	80047f4 <__swsetup_r+0x50>
 80047d0:	2309      	movs	r3, #9
 80047d2:	6033      	str	r3, [r6, #0]
 80047d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	e03e      	b.n	800485e <__swsetup_r+0xba>
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <__swsetup_r+0xd4>)
 80047e2:	429c      	cmp	r4, r3
 80047e4:	d101      	bne.n	80047ea <__swsetup_r+0x46>
 80047e6:	68ac      	ldr	r4, [r5, #8]
 80047e8:	e7eb      	b.n	80047c2 <__swsetup_r+0x1e>
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <__swsetup_r+0xd8>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	bf08      	it	eq
 80047f0:	68ec      	ldreq	r4, [r5, #12]
 80047f2:	e7e6      	b.n	80047c2 <__swsetup_r+0x1e>
 80047f4:	0758      	lsls	r0, r3, #29
 80047f6:	d512      	bpl.n	800481e <__swsetup_r+0x7a>
 80047f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047fa:	b141      	cbz	r1, 800480e <__swsetup_r+0x6a>
 80047fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004800:	4299      	cmp	r1, r3
 8004802:	d002      	beq.n	800480a <__swsetup_r+0x66>
 8004804:	4630      	mov	r0, r6
 8004806:	f7ff fa7b 	bl	8003d00 <_free_r>
 800480a:	2300      	movs	r3, #0
 800480c:	6363      	str	r3, [r4, #52]	; 0x34
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	2300      	movs	r3, #0
 8004818:	6063      	str	r3, [r4, #4]
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	b94b      	cbnz	r3, 800483e <__swsetup_r+0x9a>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004834:	d003      	beq.n	800483e <__swsetup_r+0x9a>
 8004836:	4621      	mov	r1, r4
 8004838:	4630      	mov	r0, r6
 800483a:	f000 fa07 	bl	8004c4c <__smakebuf_r>
 800483e:	89a0      	ldrh	r0, [r4, #12]
 8004840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004844:	f010 0301 	ands.w	r3, r0, #1
 8004848:	d00a      	beq.n	8004860 <__swsetup_r+0xbc>
 800484a:	2300      	movs	r3, #0
 800484c:	60a3      	str	r3, [r4, #8]
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	425b      	negs	r3, r3
 8004852:	61a3      	str	r3, [r4, #24]
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	b943      	cbnz	r3, 800486a <__swsetup_r+0xc6>
 8004858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800485c:	d1ba      	bne.n	80047d4 <__swsetup_r+0x30>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	0781      	lsls	r1, r0, #30
 8004862:	bf58      	it	pl
 8004864:	6963      	ldrpl	r3, [r4, #20]
 8004866:	60a3      	str	r3, [r4, #8]
 8004868:	e7f4      	b.n	8004854 <__swsetup_r+0xb0>
 800486a:	2000      	movs	r0, #0
 800486c:	e7f7      	b.n	800485e <__swsetup_r+0xba>
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c
 8004874:	080053c0 	.word	0x080053c0
 8004878:	080053e0 	.word	0x080053e0
 800487c:	080053a0 	.word	0x080053a0

08004880 <abort>:
 8004880:	2006      	movs	r0, #6
 8004882:	b508      	push	{r3, lr}
 8004884:	f000 fab2 	bl	8004dec <raise>
 8004888:	2001      	movs	r0, #1
 800488a:	f7fc f9ce 	bl	8000c2a <_exit>
	...

08004890 <__sflush_r>:
 8004890:	898a      	ldrh	r2, [r1, #12]
 8004892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004896:	4605      	mov	r5, r0
 8004898:	0710      	lsls	r0, r2, #28
 800489a:	460c      	mov	r4, r1
 800489c:	d458      	bmi.n	8004950 <__sflush_r+0xc0>
 800489e:	684b      	ldr	r3, [r1, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dc05      	bgt.n	80048b0 <__sflush_r+0x20>
 80048a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	dc02      	bgt.n	80048b0 <__sflush_r+0x20>
 80048aa:	2000      	movs	r0, #0
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	d0f9      	beq.n	80048aa <__sflush_r+0x1a>
 80048b6:	2300      	movs	r3, #0
 80048b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048bc:	682f      	ldr	r7, [r5, #0]
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	d032      	beq.n	8004928 <__sflush_r+0x98>
 80048c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	075a      	lsls	r2, r3, #29
 80048c8:	d505      	bpl.n	80048d6 <__sflush_r+0x46>
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d0:	b10b      	cbz	r3, 80048d6 <__sflush_r+0x46>
 80048d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	4602      	mov	r2, r0
 80048da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048dc:	4628      	mov	r0, r5
 80048de:	6a21      	ldr	r1, [r4, #32]
 80048e0:	47b0      	blx	r6
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	d106      	bne.n	80048f6 <__sflush_r+0x66>
 80048e8:	6829      	ldr	r1, [r5, #0]
 80048ea:	291d      	cmp	r1, #29
 80048ec:	d82c      	bhi.n	8004948 <__sflush_r+0xb8>
 80048ee:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <__sflush_r+0x108>)
 80048f0:	40ca      	lsrs	r2, r1
 80048f2:	07d6      	lsls	r6, r2, #31
 80048f4:	d528      	bpl.n	8004948 <__sflush_r+0xb8>
 80048f6:	2200      	movs	r2, #0
 80048f8:	6062      	str	r2, [r4, #4]
 80048fa:	6922      	ldr	r2, [r4, #16]
 80048fc:	04d9      	lsls	r1, r3, #19
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	d504      	bpl.n	800490c <__sflush_r+0x7c>
 8004902:	1c42      	adds	r2, r0, #1
 8004904:	d101      	bne.n	800490a <__sflush_r+0x7a>
 8004906:	682b      	ldr	r3, [r5, #0]
 8004908:	b903      	cbnz	r3, 800490c <__sflush_r+0x7c>
 800490a:	6560      	str	r0, [r4, #84]	; 0x54
 800490c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800490e:	602f      	str	r7, [r5, #0]
 8004910:	2900      	cmp	r1, #0
 8004912:	d0ca      	beq.n	80048aa <__sflush_r+0x1a>
 8004914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004918:	4299      	cmp	r1, r3
 800491a:	d002      	beq.n	8004922 <__sflush_r+0x92>
 800491c:	4628      	mov	r0, r5
 800491e:	f7ff f9ef 	bl	8003d00 <_free_r>
 8004922:	2000      	movs	r0, #0
 8004924:	6360      	str	r0, [r4, #52]	; 0x34
 8004926:	e7c1      	b.n	80048ac <__sflush_r+0x1c>
 8004928:	6a21      	ldr	r1, [r4, #32]
 800492a:	2301      	movs	r3, #1
 800492c:	4628      	mov	r0, r5
 800492e:	47b0      	blx	r6
 8004930:	1c41      	adds	r1, r0, #1
 8004932:	d1c7      	bne.n	80048c4 <__sflush_r+0x34>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0c4      	beq.n	80048c4 <__sflush_r+0x34>
 800493a:	2b1d      	cmp	r3, #29
 800493c:	d001      	beq.n	8004942 <__sflush_r+0xb2>
 800493e:	2b16      	cmp	r3, #22
 8004940:	d101      	bne.n	8004946 <__sflush_r+0xb6>
 8004942:	602f      	str	r7, [r5, #0]
 8004944:	e7b1      	b.n	80048aa <__sflush_r+0x1a>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	e7ad      	b.n	80048ac <__sflush_r+0x1c>
 8004950:	690f      	ldr	r7, [r1, #16]
 8004952:	2f00      	cmp	r7, #0
 8004954:	d0a9      	beq.n	80048aa <__sflush_r+0x1a>
 8004956:	0793      	lsls	r3, r2, #30
 8004958:	bf18      	it	ne
 800495a:	2300      	movne	r3, #0
 800495c:	680e      	ldr	r6, [r1, #0]
 800495e:	bf08      	it	eq
 8004960:	694b      	ldreq	r3, [r1, #20]
 8004962:	eba6 0807 	sub.w	r8, r6, r7
 8004966:	600f      	str	r7, [r1, #0]
 8004968:	608b      	str	r3, [r1, #8]
 800496a:	f1b8 0f00 	cmp.w	r8, #0
 800496e:	dd9c      	ble.n	80048aa <__sflush_r+0x1a>
 8004970:	4643      	mov	r3, r8
 8004972:	463a      	mov	r2, r7
 8004974:	4628      	mov	r0, r5
 8004976:	6a21      	ldr	r1, [r4, #32]
 8004978:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800497a:	47b0      	blx	r6
 800497c:	2800      	cmp	r0, #0
 800497e:	dc06      	bgt.n	800498e <__sflush_r+0xfe>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f04f 30ff 	mov.w	r0, #4294967295
 8004986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	e78e      	b.n	80048ac <__sflush_r+0x1c>
 800498e:	4407      	add	r7, r0
 8004990:	eba8 0800 	sub.w	r8, r8, r0
 8004994:	e7e9      	b.n	800496a <__sflush_r+0xda>
 8004996:	bf00      	nop
 8004998:	20400001 	.word	0x20400001

0800499c <_fflush_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	690b      	ldr	r3, [r1, #16]
 80049a0:	4605      	mov	r5, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	b913      	cbnz	r3, 80049ac <_fflush_r+0x10>
 80049a6:	2500      	movs	r5, #0
 80049a8:	4628      	mov	r0, r5
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	b118      	cbz	r0, 80049b6 <_fflush_r+0x1a>
 80049ae:	6983      	ldr	r3, [r0, #24]
 80049b0:	b90b      	cbnz	r3, 80049b6 <_fflush_r+0x1a>
 80049b2:	f000 f887 	bl	8004ac4 <__sinit>
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <_fflush_r+0x6c>)
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d11b      	bne.n	80049f4 <_fflush_r+0x58>
 80049bc:	686c      	ldr	r4, [r5, #4]
 80049be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ef      	beq.n	80049a6 <_fflush_r+0xa>
 80049c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049c8:	07d0      	lsls	r0, r2, #31
 80049ca:	d404      	bmi.n	80049d6 <_fflush_r+0x3a>
 80049cc:	0599      	lsls	r1, r3, #22
 80049ce:	d402      	bmi.n	80049d6 <_fflush_r+0x3a>
 80049d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d2:	f000 f915 	bl	8004c00 <__retarget_lock_acquire_recursive>
 80049d6:	4628      	mov	r0, r5
 80049d8:	4621      	mov	r1, r4
 80049da:	f7ff ff59 	bl	8004890 <__sflush_r>
 80049de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e0:	4605      	mov	r5, r0
 80049e2:	07da      	lsls	r2, r3, #31
 80049e4:	d4e0      	bmi.n	80049a8 <_fflush_r+0xc>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	059b      	lsls	r3, r3, #22
 80049ea:	d4dd      	bmi.n	80049a8 <_fflush_r+0xc>
 80049ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ee:	f000 f908 	bl	8004c02 <__retarget_lock_release_recursive>
 80049f2:	e7d9      	b.n	80049a8 <_fflush_r+0xc>
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <_fflush_r+0x70>)
 80049f6:	429c      	cmp	r4, r3
 80049f8:	d101      	bne.n	80049fe <_fflush_r+0x62>
 80049fa:	68ac      	ldr	r4, [r5, #8]
 80049fc:	e7df      	b.n	80049be <_fflush_r+0x22>
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <_fflush_r+0x74>)
 8004a00:	429c      	cmp	r4, r3
 8004a02:	bf08      	it	eq
 8004a04:	68ec      	ldreq	r4, [r5, #12]
 8004a06:	e7da      	b.n	80049be <_fflush_r+0x22>
 8004a08:	080053c0 	.word	0x080053c0
 8004a0c:	080053e0 	.word	0x080053e0
 8004a10:	080053a0 	.word	0x080053a0

08004a14 <std>:
 8004a14:	2300      	movs	r3, #0
 8004a16:	b510      	push	{r4, lr}
 8004a18:	4604      	mov	r4, r0
 8004a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a22:	6083      	str	r3, [r0, #8]
 8004a24:	8181      	strh	r1, [r0, #12]
 8004a26:	6643      	str	r3, [r0, #100]	; 0x64
 8004a28:	81c2      	strh	r2, [r0, #14]
 8004a2a:	6183      	str	r3, [r0, #24]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	2208      	movs	r2, #8
 8004a30:	305c      	adds	r0, #92	; 0x5c
 8004a32:	f7ff f819 	bl	8003a68 <memset>
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <std+0x38>)
 8004a38:	6224      	str	r4, [r4, #32]
 8004a3a:	6263      	str	r3, [r4, #36]	; 0x24
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <std+0x3c>)
 8004a3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <std+0x40>)
 8004a42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <std+0x44>)
 8004a46:	6323      	str	r3, [r4, #48]	; 0x30
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08004e25 	.word	0x08004e25
 8004a50:	08004e47 	.word	0x08004e47
 8004a54:	08004e7f 	.word	0x08004e7f
 8004a58:	08004ea3 	.word	0x08004ea3

08004a5c <_cleanup_r>:
 8004a5c:	4901      	ldr	r1, [pc, #4]	; (8004a64 <_cleanup_r+0x8>)
 8004a5e:	f000 b8af 	b.w	8004bc0 <_fwalk_reent>
 8004a62:	bf00      	nop
 8004a64:	0800499d 	.word	0x0800499d

08004a68 <__sfmoreglue>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	2568      	movs	r5, #104	; 0x68
 8004a6c:	1e4a      	subs	r2, r1, #1
 8004a6e:	4355      	muls	r5, r2
 8004a70:	460e      	mov	r6, r1
 8004a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a76:	f7ff f98f 	bl	8003d98 <_malloc_r>
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	b140      	cbz	r0, 8004a90 <__sfmoreglue+0x28>
 8004a7e:	2100      	movs	r1, #0
 8004a80:	e9c0 1600 	strd	r1, r6, [r0]
 8004a84:	300c      	adds	r0, #12
 8004a86:	60a0      	str	r0, [r4, #8]
 8004a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a8c:	f7fe ffec 	bl	8003a68 <memset>
 8004a90:	4620      	mov	r0, r4
 8004a92:	bd70      	pop	{r4, r5, r6, pc}

08004a94 <__sfp_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sfp_lock_acquire+0x8>)
 8004a96:	f000 b8b3 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	2000028c 	.word	0x2000028c

08004aa0 <__sfp_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sfp_lock_release+0x8>)
 8004aa2:	f000 b8ae 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	2000028c 	.word	0x2000028c

08004aac <__sinit_lock_acquire>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__sinit_lock_acquire+0x8>)
 8004aae:	f000 b8a7 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20000287 	.word	0x20000287

08004ab8 <__sinit_lock_release>:
 8004ab8:	4801      	ldr	r0, [pc, #4]	; (8004ac0 <__sinit_lock_release+0x8>)
 8004aba:	f000 b8a2 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004abe:	bf00      	nop
 8004ac0:	20000287 	.word	0x20000287

08004ac4 <__sinit>:
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	f7ff fff0 	bl	8004aac <__sinit_lock_acquire>
 8004acc:	69a3      	ldr	r3, [r4, #24]
 8004ace:	b11b      	cbz	r3, 8004ad8 <__sinit+0x14>
 8004ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad4:	f7ff bff0 	b.w	8004ab8 <__sinit_lock_release>
 8004ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004adc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <__sinit+0x68>)
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <__sinit+0x6c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	bf08      	it	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	4620      	mov	r0, r4
 8004aee:	bf08      	it	eq
 8004af0:	61a3      	streq	r3, [r4, #24]
 8004af2:	f000 f81f 	bl	8004b34 <__sfp>
 8004af6:	6060      	str	r0, [r4, #4]
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 f81b 	bl	8004b34 <__sfp>
 8004afe:	60a0      	str	r0, [r4, #8]
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 f817 	bl	8004b34 <__sfp>
 8004b06:	2200      	movs	r2, #0
 8004b08:	2104      	movs	r1, #4
 8004b0a:	60e0      	str	r0, [r4, #12]
 8004b0c:	6860      	ldr	r0, [r4, #4]
 8004b0e:	f7ff ff81 	bl	8004a14 <std>
 8004b12:	2201      	movs	r2, #1
 8004b14:	2109      	movs	r1, #9
 8004b16:	68a0      	ldr	r0, [r4, #8]
 8004b18:	f7ff ff7c 	bl	8004a14 <std>
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	2112      	movs	r1, #18
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	f7ff ff77 	bl	8004a14 <std>
 8004b26:	2301      	movs	r3, #1
 8004b28:	61a3      	str	r3, [r4, #24]
 8004b2a:	e7d1      	b.n	8004ad0 <__sinit+0xc>
 8004b2c:	080051b4 	.word	0x080051b4
 8004b30:	08004a5d 	.word	0x08004a5d

08004b34 <__sfp>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	4607      	mov	r7, r0
 8004b38:	f7ff ffac 	bl	8004a94 <__sfp_lock_acquire>
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <__sfp+0x84>)
 8004b3e:	681e      	ldr	r6, [r3, #0]
 8004b40:	69b3      	ldr	r3, [r6, #24]
 8004b42:	b913      	cbnz	r3, 8004b4a <__sfp+0x16>
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7ff ffbd 	bl	8004ac4 <__sinit>
 8004b4a:	3648      	adds	r6, #72	; 0x48
 8004b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	d503      	bpl.n	8004b5c <__sfp+0x28>
 8004b54:	6833      	ldr	r3, [r6, #0]
 8004b56:	b30b      	cbz	r3, 8004b9c <__sfp+0x68>
 8004b58:	6836      	ldr	r6, [r6, #0]
 8004b5a:	e7f7      	b.n	8004b4c <__sfp+0x18>
 8004b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b60:	b9d5      	cbnz	r5, 8004b98 <__sfp+0x64>
 8004b62:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <__sfp+0x88>)
 8004b64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b68:	60e3      	str	r3, [r4, #12]
 8004b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b6c:	f000 f847 	bl	8004bfe <__retarget_lock_init_recursive>
 8004b70:	f7ff ff96 	bl	8004aa0 <__sfp_lock_release>
 8004b74:	2208      	movs	r2, #8
 8004b76:	4629      	mov	r1, r5
 8004b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b80:	6025      	str	r5, [r4, #0]
 8004b82:	61a5      	str	r5, [r4, #24]
 8004b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b88:	f7fe ff6e 	bl	8003a68 <memset>
 8004b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b94:	4620      	mov	r0, r4
 8004b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b98:	3468      	adds	r4, #104	; 0x68
 8004b9a:	e7d9      	b.n	8004b50 <__sfp+0x1c>
 8004b9c:	2104      	movs	r1, #4
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7ff ff62 	bl	8004a68 <__sfmoreglue>
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	6030      	str	r0, [r6, #0]
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d1d5      	bne.n	8004b58 <__sfp+0x24>
 8004bac:	f7ff ff78 	bl	8004aa0 <__sfp_lock_release>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	e7ee      	b.n	8004b94 <__sfp+0x60>
 8004bb6:	bf00      	nop
 8004bb8:	080051b4 	.word	0x080051b4
 8004bbc:	ffff0001 	.word	0xffff0001

08004bc0 <_fwalk_reent>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	2700      	movs	r7, #0
 8004bca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bd6:	d505      	bpl.n	8004be4 <_fwalk_reent+0x24>
 8004bd8:	6824      	ldr	r4, [r4, #0]
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	d1f7      	bne.n	8004bce <_fwalk_reent+0xe>
 8004bde:	4638      	mov	r0, r7
 8004be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be4:	89ab      	ldrh	r3, [r5, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d907      	bls.n	8004bfa <_fwalk_reent+0x3a>
 8004bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	d003      	beq.n	8004bfa <_fwalk_reent+0x3a>
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	47c0      	blx	r8
 8004bf8:	4307      	orrs	r7, r0
 8004bfa:	3568      	adds	r5, #104	; 0x68
 8004bfc:	e7e9      	b.n	8004bd2 <_fwalk_reent+0x12>

08004bfe <__retarget_lock_init_recursive>:
 8004bfe:	4770      	bx	lr

08004c00 <__retarget_lock_acquire_recursive>:
 8004c00:	4770      	bx	lr

08004c02 <__retarget_lock_release_recursive>:
 8004c02:	4770      	bx	lr

08004c04 <__swhatbuf_r>:
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	460e      	mov	r6, r1
 8004c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	2900      	cmp	r1, #0
 8004c10:	461d      	mov	r5, r3
 8004c12:	b096      	sub	sp, #88	; 0x58
 8004c14:	da07      	bge.n	8004c26 <__swhatbuf_r+0x22>
 8004c16:	2300      	movs	r3, #0
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	89b3      	ldrh	r3, [r6, #12]
 8004c1c:	061a      	lsls	r2, r3, #24
 8004c1e:	d410      	bmi.n	8004c42 <__swhatbuf_r+0x3e>
 8004c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c24:	e00e      	b.n	8004c44 <__swhatbuf_r+0x40>
 8004c26:	466a      	mov	r2, sp
 8004c28:	f000 f962 	bl	8004ef0 <_fstat_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	dbf2      	blt.n	8004c16 <__swhatbuf_r+0x12>
 8004c30:	9a01      	ldr	r2, [sp, #4]
 8004c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c3a:	425a      	negs	r2, r3
 8004c3c:	415a      	adcs	r2, r3
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	e7ee      	b.n	8004c20 <__swhatbuf_r+0x1c>
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	2000      	movs	r0, #0
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	b016      	add	sp, #88	; 0x58
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}

08004c4c <__smakebuf_r>:
 8004c4c:	898b      	ldrh	r3, [r1, #12]
 8004c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c50:	079d      	lsls	r5, r3, #30
 8004c52:	4606      	mov	r6, r0
 8004c54:	460c      	mov	r4, r1
 8004c56:	d507      	bpl.n	8004c68 <__smakebuf_r+0x1c>
 8004c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	6123      	str	r3, [r4, #16]
 8004c60:	2301      	movs	r3, #1
 8004c62:	6163      	str	r3, [r4, #20]
 8004c64:	b002      	add	sp, #8
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	466a      	mov	r2, sp
 8004c6a:	ab01      	add	r3, sp, #4
 8004c6c:	f7ff ffca 	bl	8004c04 <__swhatbuf_r>
 8004c70:	9900      	ldr	r1, [sp, #0]
 8004c72:	4605      	mov	r5, r0
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7ff f88f 	bl	8003d98 <_malloc_r>
 8004c7a:	b948      	cbnz	r0, 8004c90 <__smakebuf_r+0x44>
 8004c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c80:	059a      	lsls	r2, r3, #22
 8004c82:	d4ef      	bmi.n	8004c64 <__smakebuf_r+0x18>
 8004c84:	f023 0303 	bic.w	r3, r3, #3
 8004c88:	f043 0302 	orr.w	r3, r3, #2
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	e7e3      	b.n	8004c58 <__smakebuf_r+0xc>
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <__smakebuf_r+0x7c>)
 8004c92:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	6020      	str	r0, [r4, #0]
 8004c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	9b00      	ldr	r3, [sp, #0]
 8004ca0:	6120      	str	r0, [r4, #16]
 8004ca2:	6163      	str	r3, [r4, #20]
 8004ca4:	9b01      	ldr	r3, [sp, #4]
 8004ca6:	b15b      	cbz	r3, 8004cc0 <__smakebuf_r+0x74>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cae:	f000 f931 	bl	8004f14 <_isatty_r>
 8004cb2:	b128      	cbz	r0, 8004cc0 <__smakebuf_r+0x74>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	89a0      	ldrh	r0, [r4, #12]
 8004cc2:	4305      	orrs	r5, r0
 8004cc4:	81a5      	strh	r5, [r4, #12]
 8004cc6:	e7cd      	b.n	8004c64 <__smakebuf_r+0x18>
 8004cc8:	08004a5d 	.word	0x08004a5d

08004ccc <memchr>:
 8004ccc:	4603      	mov	r3, r0
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	b2c9      	uxtb	r1, r1
 8004cd2:	4402      	add	r2, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	d101      	bne.n	8004cde <memchr+0x12>
 8004cda:	2000      	movs	r0, #0
 8004cdc:	e003      	b.n	8004ce6 <memchr+0x1a>
 8004cde:	7804      	ldrb	r4, [r0, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	428c      	cmp	r4, r1
 8004ce4:	d1f6      	bne.n	8004cd4 <memchr+0x8>
 8004ce6:	bd10      	pop	{r4, pc}

08004ce8 <memcpy>:
 8004ce8:	440a      	add	r2, r1
 8004cea:	4291      	cmp	r1, r2
 8004cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf0:	d100      	bne.n	8004cf4 <memcpy+0xc>
 8004cf2:	4770      	bx	lr
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfa:	4291      	cmp	r1, r2
 8004cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d00:	d1f9      	bne.n	8004cf6 <memcpy+0xe>
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <memmove>:
 8004d04:	4288      	cmp	r0, r1
 8004d06:	b510      	push	{r4, lr}
 8004d08:	eb01 0402 	add.w	r4, r1, r2
 8004d0c:	d902      	bls.n	8004d14 <memmove+0x10>
 8004d0e:	4284      	cmp	r4, r0
 8004d10:	4623      	mov	r3, r4
 8004d12:	d807      	bhi.n	8004d24 <memmove+0x20>
 8004d14:	1e43      	subs	r3, r0, #1
 8004d16:	42a1      	cmp	r1, r4
 8004d18:	d008      	beq.n	8004d2c <memmove+0x28>
 8004d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d22:	e7f8      	b.n	8004d16 <memmove+0x12>
 8004d24:	4601      	mov	r1, r0
 8004d26:	4402      	add	r2, r0
 8004d28:	428a      	cmp	r2, r1
 8004d2a:	d100      	bne.n	8004d2e <memmove+0x2a>
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d36:	e7f7      	b.n	8004d28 <memmove+0x24>

08004d38 <__malloc_lock>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__malloc_lock+0x8>)
 8004d3a:	f7ff bf61 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004d3e:	bf00      	nop
 8004d40:	20000288 	.word	0x20000288

08004d44 <__malloc_unlock>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__malloc_unlock+0x8>)
 8004d46:	f7ff bf5c 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	20000288 	.word	0x20000288

08004d50 <_realloc_r>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	4607      	mov	r7, r0
 8004d54:	4614      	mov	r4, r2
 8004d56:	460e      	mov	r6, r1
 8004d58:	b921      	cbnz	r1, 8004d64 <_realloc_r+0x14>
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d60:	f7ff b81a 	b.w	8003d98 <_malloc_r>
 8004d64:	b922      	cbnz	r2, 8004d70 <_realloc_r+0x20>
 8004d66:	f7fe ffcb 	bl	8003d00 <_free_r>
 8004d6a:	4625      	mov	r5, r4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d70:	f000 f8f2 	bl	8004f58 <_malloc_usable_size_r>
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d20f      	bcs.n	8004d98 <_realloc_r+0x48>
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	f7ff f80c 	bl	8003d98 <_malloc_r>
 8004d80:	4605      	mov	r5, r0
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d0f2      	beq.n	8004d6c <_realloc_r+0x1c>
 8004d86:	4631      	mov	r1, r6
 8004d88:	4622      	mov	r2, r4
 8004d8a:	f7ff ffad 	bl	8004ce8 <memcpy>
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4638      	mov	r0, r7
 8004d92:	f7fe ffb5 	bl	8003d00 <_free_r>
 8004d96:	e7e9      	b.n	8004d6c <_realloc_r+0x1c>
 8004d98:	4635      	mov	r5, r6
 8004d9a:	e7e7      	b.n	8004d6c <_realloc_r+0x1c>

08004d9c <_raise_r>:
 8004d9c:	291f      	cmp	r1, #31
 8004d9e:	b538      	push	{r3, r4, r5, lr}
 8004da0:	4604      	mov	r4, r0
 8004da2:	460d      	mov	r5, r1
 8004da4:	d904      	bls.n	8004db0 <_raise_r+0x14>
 8004da6:	2316      	movs	r3, #22
 8004da8:	6003      	str	r3, [r0, #0]
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004db2:	b112      	cbz	r2, 8004dba <_raise_r+0x1e>
 8004db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004db8:	b94b      	cbnz	r3, 8004dce <_raise_r+0x32>
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 f830 	bl	8004e20 <_getpid_r>
 8004dc0:	462a      	mov	r2, r5
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dca:	f000 b817 	b.w	8004dfc <_kill_r>
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d00a      	beq.n	8004de8 <_raise_r+0x4c>
 8004dd2:	1c59      	adds	r1, r3, #1
 8004dd4:	d103      	bne.n	8004dde <_raise_r+0x42>
 8004dd6:	2316      	movs	r3, #22
 8004dd8:	6003      	str	r3, [r0, #0]
 8004dda:	2001      	movs	r0, #1
 8004ddc:	e7e7      	b.n	8004dae <_raise_r+0x12>
 8004dde:	2400      	movs	r4, #0
 8004de0:	4628      	mov	r0, r5
 8004de2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004de6:	4798      	blx	r3
 8004de8:	2000      	movs	r0, #0
 8004dea:	e7e0      	b.n	8004dae <_raise_r+0x12>

08004dec <raise>:
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <raise+0xc>)
 8004dee:	4601      	mov	r1, r0
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	f7ff bfd3 	b.w	8004d9c <_raise_r>
 8004df6:	bf00      	nop
 8004df8:	2000000c 	.word	0x2000000c

08004dfc <_kill_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	2300      	movs	r3, #0
 8004e00:	4d06      	ldr	r5, [pc, #24]	; (8004e1c <_kill_r+0x20>)
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	f7fb fefe 	bl	8000c0a <_kill>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	d102      	bne.n	8004e18 <_kill_r+0x1c>
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	b103      	cbz	r3, 8004e18 <_kill_r+0x1c>
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000290 	.word	0x20000290

08004e20 <_getpid_r>:
 8004e20:	f7fb beec 	b.w	8000bfc <_getpid>

08004e24 <__sread>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	460c      	mov	r4, r1
 8004e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2c:	f000 f89c 	bl	8004f68 <_read_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	bfab      	itete	ge
 8004e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e36:	89a3      	ldrhlt	r3, [r4, #12]
 8004e38:	181b      	addge	r3, r3, r0
 8004e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e3e:	bfac      	ite	ge
 8004e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e42:	81a3      	strhlt	r3, [r4, #12]
 8004e44:	bd10      	pop	{r4, pc}

08004e46 <__swrite>:
 8004e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4a:	461f      	mov	r7, r3
 8004e4c:	898b      	ldrh	r3, [r1, #12]
 8004e4e:	4605      	mov	r5, r0
 8004e50:	05db      	lsls	r3, r3, #23
 8004e52:	460c      	mov	r4, r1
 8004e54:	4616      	mov	r6, r2
 8004e56:	d505      	bpl.n	8004e64 <__swrite+0x1e>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	f000 f868 	bl	8004f34 <_lseek_r>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	4632      	mov	r2, r6
 8004e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	4628      	mov	r0, r5
 8004e70:	463b      	mov	r3, r7
 8004e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	f000 b817 	b.w	8004eac <_write_r>

08004e7e <__sseek>:
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	460c      	mov	r4, r1
 8004e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e86:	f000 f855 	bl	8004f34 <_lseek_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	bf15      	itete	ne
 8004e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e9a:	81a3      	strheq	r3, [r4, #12]
 8004e9c:	bf18      	it	ne
 8004e9e:	81a3      	strhne	r3, [r4, #12]
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <__sclose>:
 8004ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea6:	f000 b813 	b.w	8004ed0 <_close_r>
	...

08004eac <_write_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4604      	mov	r4, r0
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4d05      	ldr	r5, [pc, #20]	; (8004ecc <_write_r+0x20>)
 8004eb8:	602a      	str	r2, [r5, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f7fb fedc 	bl	8000c78 <_write>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_write_r+0x1e>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_write_r+0x1e>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000290 	.word	0x20000290

08004ed0 <_close_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4d05      	ldr	r5, [pc, #20]	; (8004eec <_close_r+0x1c>)
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fb fee8 	bl	8000cb0 <_close>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_close_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_close_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20000290 	.word	0x20000290

08004ef0 <_fstat_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4d06      	ldr	r5, [pc, #24]	; (8004f10 <_fstat_r+0x20>)
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	f7fb fee2 	bl	8000cc6 <_fstat>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d102      	bne.n	8004f0c <_fstat_r+0x1c>
 8004f06:	682b      	ldr	r3, [r5, #0]
 8004f08:	b103      	cbz	r3, 8004f0c <_fstat_r+0x1c>
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000290 	.word	0x20000290

08004f14 <_isatty_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	2300      	movs	r3, #0
 8004f18:	4d05      	ldr	r5, [pc, #20]	; (8004f30 <_isatty_r+0x1c>)
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fb fee0 	bl	8000ce4 <_isatty>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_isatty_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_isatty_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20000290 	.word	0x20000290

08004f34 <_lseek_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4d05      	ldr	r5, [pc, #20]	; (8004f54 <_lseek_r+0x20>)
 8004f40:	602a      	str	r2, [r5, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fb fed8 	bl	8000cf8 <_lseek>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_lseek_r+0x1e>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_lseek_r+0x1e>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000290 	.word	0x20000290

08004f58 <_malloc_usable_size_r>:
 8004f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f5c:	1f18      	subs	r0, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfbc      	itt	lt
 8004f62:	580b      	ldrlt	r3, [r1, r0]
 8004f64:	18c0      	addlt	r0, r0, r3
 8004f66:	4770      	bx	lr

08004f68 <_read_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	2200      	movs	r2, #0
 8004f72:	4d05      	ldr	r5, [pc, #20]	; (8004f88 <_read_r+0x20>)
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fb fe61 	bl	8000c3e <_read>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_read_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_read_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	20000290 	.word	0x20000290

08004f8c <_init>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr

08004f98 <_fini>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr


VehicleControls_stm32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fbc  08004fbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004fbc  08004fbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fbc  08004fbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08005034  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005034  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100c2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a5  00000000  00000000  0003015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00032b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000338e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001949c  00000000  00000000  000345a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcbe  00000000  00000000  0004da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a317  00000000  00000000  0005d702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004420  00000000  00000000  000e7a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b4c 	.word	0x08004b4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004b4c 	.word	0x08004b4c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <JDY09_StartNewIRQRx>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_StartNewIRQRx(JDY09_t *jdy09)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	// start another IRQ for single sign
	HAL_UART_Receive_IT(jdy09->huart, &(jdy09->RecieveBufferIT), 1);
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	6818      	ldr	r0, [r3, #0]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3324      	adds	r3, #36	; 0x24
 8000170:	2201      	movs	r2, #1
 8000172:	4619      	mov	r1, r3
 8000174:	f002 fdd2 	bl	8002d1c <HAL_UART_Receive_IT>
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <JDY09_DisplayTerminal>:
 *
 * @return - void
 */

static void JDY09_DisplayTerminal(char *Msg)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
	...

08000194 <JDY09_Init>:
void JDY09_Init(JDY09_t *jdy09, UART_HandleTypeDef *huart
#if (JDY09_USE_STATE_PIN == 1)
		,GPIO_TypeDef *StateGPIOPort, uint16_t StateGPIOPin
#endif
		)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]

	// init msg
	JDY09_DisplayTerminal("JDY-09 Initializing... \n\r");
 800019e:	4809      	ldr	r0, [pc, #36]	; (80001c4 <JDY09_Init+0x30>)
 80001a0:	f7ff ffee 	bl	8000180 <JDY09_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(jdy09->RingBuffer));
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	3326      	adds	r3, #38	; 0x26
 80001a8:	4618      	mov	r0, r3
 80001aa:	f000 fa88 	bl	80006be <RB_Flush>

	// Assign uart
	jdy09->huart = huart;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	601a      	str	r2, [r3, #0]
	jdy09->StateGPIOPort = StateGPIOPort;
	jdy09->StatePinNumber = StateGPIOPin;
#endif
	// if irq mode is used for receive
#if (JDY09_UART_RX_IT == 1)
	JDY09_StartNewIRQRx(jdy09);
 80001b4:	6878      	ldr	r0, [r7, #4]
 80001b6:	f7ff ffd3 	bl	8000160 <JDY09_StartNewIRQRx>
	JDY09_SendCommand(jdy09, JDY09_CMD_GETADRESS);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETBAUDRATE);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETNAME);
	JDY09_SendCommand(jdy09, JDY09_CMD_GETPASSWORD);
#endif
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	08004ba4 	.word	0x08004ba4

080001c8 <JDY09_ClearMsgPendingFlag>:
 *
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @return - void
 */
void JDY09_ClearMsgPendingFlag(JDY09_t *jdy09)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	jdy09->MessagePending = JDY09_NOMESSAGE;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2200      	movs	r2, #0
 80001d4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <JDY09_CheckPendingMessages>:
 * @param[*jdy09] - pointer to struct for JDY09 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t JDY09_CheckPendingMessages(JDY09_t *jdy09, uint8_t *MsgBuffer)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b084      	sub	sp, #16
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (jdy09->LinesRecieved > 0)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d032      	beq.n	800025e <JDY09_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(jdy09->RingBuffer), &temp);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	3326      	adds	r3, #38	; 0x26
 8000204:	f107 020e 	add.w	r2, r7, #14
 8000208:	4611      	mov	r1, r2
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fa00 	bl	8000610 <RB_Read>
			if (temp == JDY09_LASTCHARACTER)
 8000210:	7bbb      	ldrb	r3, [r7, #14]
 8000212:	2b0a      	cmp	r3, #10
 8000214:	d10b      	bne.n	800022e <JDY09_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = JDY09_LASTCHARACTER;
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	4413      	add	r3, r2
 800021c:	220a      	movs	r2, #10
 800021e:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	3301      	adds	r3, #1
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	4413      	add	r3, r2
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	e004      	b.n	8000238 <JDY09_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	4413      	add	r3, r2
 8000234:	7bba      	ldrb	r2, [r7, #14]
 8000236:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	3301      	adds	r3, #1
 800023c:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != JDY09_LASTCHARACTER);
 800023e:	7bbb      	ldrb	r3, [r7, #14]
 8000240:	2b0a      	cmp	r3, #10
 8000242:	d1dd      	bne.n	8000200 <JDY09_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		jdy09->LinesRecieved--;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800024a:	b2db      	uxtb	r3, r3
 800024c:	3b01      	subs	r3, #1
 800024e:	b2da      	uxtb	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		//set up flag that message is ready to parse
		jdy09->MessagePending = JDY09_MESSAGEPENDING;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2201      	movs	r2, #1
 800025a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	}

	// return if flag status
	return jdy09->MessagePending;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
}
 8000264:	4618      	mov	r0, r3
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <JDY09_RxCpltCallbackIT>:
 * @param[*huart] - uart handle
 * @return - void
 */
#if (JDY09_UART_RX_IT == 1)
void JDY09_RxCpltCallbackIT(JDY09_t *jdy09, UART_HandleTypeDef *huart)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]

	//check if IRQ is coming from correct uart
	if (jdy09->huart->Instance == huart->Instance)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d11b      	bne.n	80002bc <JDY09_RxCpltCallbackIT+0x50>
	{
		//write a sign to ring buffer
		RB_Write((&(jdy09->RingBuffer)), jdy09->RecieveBufferIT);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000290:	4619      	mov	r1, r3
 8000292:	4610      	mov	r0, r2
 8000294:	f000 f9e8 	bl	8000668 <RB_Write>

		// when line is complete -> add 1 to received lines
		if (jdy09->RecieveBufferIT == JDY09_LASTCHARACTER)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800029e:	2b0a      	cmp	r3, #10
 80002a0:	d109      	bne.n	80002b6 <JDY09_RxCpltCallbackIT+0x4a>
		{
			(jdy09->LinesRecieved)++;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	3301      	adds	r3, #1
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

			// if user wants to start irq in this momemnt
#if(JDY09_IRQ_CONTINUOUSSTART == 1)
			JDY09_StartNewIRQRx(jdy09);
#endif
			return;
 80002b4:	e002      	b.n	80002bc <JDY09_RxCpltCallbackIT+0x50>
		}
		// start another IRQ for single sign
		JDY09_StartNewIRQRx(jdy09);
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f7ff ff52 	bl	8000160 <JDY09_StartNewIRQRx>
	}
}
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_DMA_Init+0x28>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <MX_DMA_Init+0x28>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <MX_DMA_Init+0x28>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_GPIO_Init+0x78>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <MX_GPIO_Init+0x78>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_GPIO_Init+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_GPIO_Init+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a11      	ldr	r2, [pc, #68]	; (8000368 <MX_GPIO_Init+0x78>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_GPIO_Init+0x78>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR1_Pin|MOTOR_DIR2_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <MX_GPIO_Init+0x7c>)
 800033c:	f001 f9d4 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_DIR1_Pin|MOTOR_DIR2_Pin;
 8000340:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2302      	movs	r3, #2
 8000350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4619      	mov	r1, r3
 8000358:	4804      	ldr	r0, [pc, #16]	; (800036c <MX_GPIO_Init+0x7c>)
 800035a:	f001 f84b 	bl	80013f4 <HAL_GPIO_Init>

}
 800035e:	bf00      	nop
 8000360:	3718      	adds	r7, #24
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000
 800036c:	40010c00 	.word	0x40010c00

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000376:	f000 fcbd 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037a:	f000 f8ab 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037e:	f7ff ffb7 	bl	80002f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000382:	f7ff ff9f 	bl	80002c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000386:	f000 fbe1 	bl	8000b4c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800038a:	f000 fadd 	bl	8000948 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800038e:	f000 f8e2 	bl	8000556 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  JDY09_Init(&JDY09_1, &huart1);
 8000392:	494a      	ldr	r1, [pc, #296]	; (80004bc <main+0x14c>)
 8000394:	484a      	ldr	r0, [pc, #296]	; (80004c0 <main+0x150>)
 8000396:	f7ff fefd 	bl	8000194 <JDY09_Init>

  uint8_t AckMsg[8];
	uint8_t Len;
	uint16_t NewServoX, NewMotorY;
	uint16_t LastServoX = 0, LastMotorY = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	82fb      	strh	r3, [r7, #22]
 800039e:	2300      	movs	r3, #0
 80003a0:	82bb      	strh	r3, [r7, #20]
	uint16_t MotorSpeed;
	Len = sprintf((char*) AckMsg, "OKAY\n");
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4947      	ldr	r1, [pc, #284]	; (80004c4 <main+0x154>)
 80003a8:	4618      	mov	r0, r3
 80003aa:	f003 f945 	bl	8003638 <siprintf>
 80003ae:	4603      	mov	r3, r0
 80003b0:	747b      	strb	r3, [r7, #17]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003b2:	2100      	movs	r1, #0
 80003b4:	4844      	ldr	r0, [pc, #272]	; (80004c8 <main+0x158>)
 80003b6:	f001 fe71 	bl	800209c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003ba:	2104      	movs	r1, #4
 80003bc:	4842      	ldr	r0, [pc, #264]	; (80004c8 <main+0x158>)
 80003be:	f001 fe6d 	bl	800209c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// check if there is msg - if yes transfer it to a buffer
		if (JDY09_CheckPendingMessages(&JDY09_1,
 80003c2:	4942      	ldr	r1, [pc, #264]	; (80004cc <main+0x15c>)
 80003c4:	483e      	ldr	r0, [pc, #248]	; (80004c0 <main+0x150>)
 80003c6:	f7ff ff0c 	bl	80001e2 <JDY09_CheckPendingMessages>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d1f8      	bne.n	80003c2 <main+0x52>
				TransferBuffer) == JDY09_MESSAGEPENDING)
		{
			//clear pending flag
			JDY09_ClearMsgPendingFlag(&JDY09_1);
 80003d0:	483b      	ldr	r0, [pc, #236]	; (80004c0 <main+0x150>)
 80003d2:	f7ff fef9 	bl	80001c8 <JDY09_ClearMsgPendingFlag>

			HAL_UART_Transmit(&huart1, AckMsg, Len, 1000);
 80003d6:	7c7b      	ldrb	r3, [r7, #17]
 80003d8:	b29a      	uxth	r2, r3
 80003da:	f107 0108 	add.w	r1, r7, #8
 80003de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e2:	4836      	ldr	r0, [pc, #216]	; (80004bc <main+0x14c>)
 80003e4:	f002 fc08 	bl	8002bf8 <HAL_UART_Transmit>

			Parser_Parse(TransferBuffer, &NewServoX, &NewMotorY);
 80003e8:	1d3a      	adds	r2, r7, #4
 80003ea:	1dbb      	adds	r3, r7, #6
 80003ec:	4619      	mov	r1, r3
 80003ee:	4837      	ldr	r0, [pc, #220]	; (80004cc <main+0x15c>)
 80003f0:	f000 f8da 	bl	80005a8 <Parser_Parse>

			// move only when value changes by 1 degree
			if (abs(NewServoX - LastServoX) > SERVO_RESOLUTION_1DEGREE)
 80003f4:	88fb      	ldrh	r3, [r7, #6]
 80003f6:	461a      	mov	r2, r3
 80003f8:	8afb      	ldrh	r3, [r7, #22]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	bfb8      	it	lt
 8000400:	425b      	neglt	r3, r3
 8000402:	2b16      	cmp	r3, #22
 8000404:	dd03      	ble.n	800040e <main+0x9e>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, NewServoX);
 8000406:	88fa      	ldrh	r2, [r7, #6]
 8000408:	4b2f      	ldr	r3, [pc, #188]	; (80004c8 <main+0x158>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
			}

			if (NewMotorY < MOTOR_DEADBAND_LOW_LIMIT)
 800040e:	88bb      	ldrh	r3, [r7, #4]
 8000410:	f244 624f 	movw	r2, #17999	; 0x464f
 8000414:	4293      	cmp	r3, r2
 8000416:	d811      	bhi.n	800043c <main+0xcc>
			{
				LN298N_MOTOR_BACKWARD();
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	482c      	ldr	r0, [pc, #176]	; (80004d0 <main+0x160>)
 8000420:	f001 f962 	bl	80016e8 <HAL_GPIO_WritePin>
 8000424:	2201      	movs	r2, #1
 8000426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042a:	4829      	ldr	r0, [pc, #164]	; (80004d0 <main+0x160>)
 800042c:	f001 f95c 	bl	80016e8 <HAL_GPIO_WritePin>
				MotorSpeed = NewMotorY + MOTOR_DEADBAND_LOW_LIMIT;
 8000430:	88bb      	ldrh	r3, [r7, #4]
 8000432:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8000436:	3350      	adds	r3, #80	; 0x50
 8000438:	827b      	strh	r3, [r7, #18]
 800043a:	e00d      	b.n	8000458 <main+0xe8>
			}
			else
			{
			LN298N_MOTOR_FORWARD();
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4823      	ldr	r0, [pc, #140]	; (80004d0 <main+0x160>)
 8000444:	f001 f950 	bl	80016e8 <HAL_GPIO_WritePin>
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800044e:	4820      	ldr	r0, [pc, #128]	; (80004d0 <main+0x160>)
 8000450:	f001 f94a 	bl	80016e8 <HAL_GPIO_WritePin>
			MotorSpeed = NewMotorY;
 8000454:	88bb      	ldrh	r3, [r7, #4]
 8000456:	827b      	strh	r3, [r7, #18]
			}

			if (NewMotorY > MOTOR_DEADBAND_LOW_LIMIT
 8000458:	88bb      	ldrh	r3, [r7, #4]
 800045a:	f244 6250 	movw	r2, #18000	; 0x4650
 800045e:	4293      	cmp	r3, r2
 8000460:	d915      	bls.n	800048e <main+0x11e>
					&& NewMotorY < MOTOR_DEADBAND_HIGH_LIMIT)
 8000462:	88bb      	ldrh	r3, [r7, #4]
 8000464:	f245 52ef 	movw	r2, #21999	; 0x55ef
 8000468:	4293      	cmp	r3, r2
 800046a:	d810      	bhi.n	800048e <main+0x11e>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <main+0x158>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2200      	movs	r2, #0
 8000472:	639a      	str	r2, [r3, #56]	; 0x38
				LN298N_MOTOR_OFF();
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047a:	4815      	ldr	r0, [pc, #84]	; (80004d0 <main+0x160>)
 800047c:	f001 f934 	bl	80016e8 <HAL_GPIO_WritePin>
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <main+0x160>)
 8000488:	f001 f92e 	bl	80016e8 <HAL_GPIO_WritePin>
 800048c:	e00d      	b.n	80004aa <main+0x13a>
			}
			// move only when value changes by 1 %
			else if (abs(NewMotorY - LastMotorY) > MOTOR_RESOLUTION_1PERCENT)
 800048e:	88bb      	ldrh	r3, [r7, #4]
 8000490:	461a      	mov	r2, r3
 8000492:	8abb      	ldrh	r3, [r7, #20]
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	2b00      	cmp	r3, #0
 8000498:	bfb8      	it	lt
 800049a:	425b      	neglt	r3, r3
 800049c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80004a0:	dd03      	ble.n	80004aa <main+0x13a>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MotorSpeed);
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <main+0x158>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	8a7a      	ldrh	r2, [r7, #18]
 80004a8:	639a      	str	r2, [r3, #56]	; 0x38
			}

			LastMotorY = NewMotorY;
 80004aa:	88bb      	ldrh	r3, [r7, #4]
 80004ac:	82bb      	strh	r3, [r7, #20]
			LastServoX = NewServoX;
 80004ae:	88fb      	ldrh	r3, [r7, #6]
 80004b0:	82fb      	strh	r3, [r7, #22]
			

			JDY09_StartNewIRQRx(&JDY09_1);
 80004b2:	4803      	ldr	r0, [pc, #12]	; (80004c0 <main+0x150>)
 80004b4:	f7ff fe54 	bl	8000160 <JDY09_StartNewIRQRx>
		if (JDY09_CheckPendingMessages(&JDY09_1,
 80004b8:	e783      	b.n	80003c2 <main+0x52>
 80004ba:	bf00      	nop
 80004bc:	20000218 	.word	0x20000218
 80004c0:	20000098 	.word	0x20000098
 80004c4:	08004d38 	.word	0x08004d38
 80004c8:	2000018c 	.word	0x2000018c
 80004cc:	2000014c 	.word	0x2000014c
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b090      	sub	sp, #64	; 0x40
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 f8a0 	bl	8003628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f6:	2302      	movs	r3, #2
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	2301      	movs	r3, #1
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	2310      	movs	r3, #16
 8000500:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000506:	2300      	movs	r3, #0
 8000508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800050a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800050e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	4618      	mov	r0, r3
 8000516:	f001 f8ff 	bl	8001718 <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000520:	f000 f83c 	bl	800059c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	230f      	movs	r3, #15
 8000526:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	2302      	movs	r3, #2
 800052a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2102      	movs	r1, #2
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fb6a 	bl	8001c18 <HAL_RCC_ClockConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800054a:	f000 f827 	bl	800059c <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3740      	adds	r7, #64	; 0x40
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	2025      	movs	r0, #37	; 0x25
 8000560:	f000 fd01 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000564:	2025      	movs	r0, #37	; 0x25
 8000566:	f000 fd1a 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	200f      	movs	r0, #15
 8000570:	f000 fcf9 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000574:	200f      	movs	r0, #15
 8000576:	f000 fd12 	bl	8000f9e <HAL_NVIC_EnableIRQ>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
#if (JDY09_UART_RX_IT == 1)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

	// Callback from BT module
	JDY09_RxCpltCallbackIT(&JDY09_1, huart);
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <HAL_UART_RxCpltCallback+0x18>)
 800058c:	f7ff fe6e 	bl	800026c <JDY09_RxCpltCallbackIT>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000098 	.word	0x20000098

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <Parser_Parse>:

/*
 * @ function parse message and start command procedures
 */
uint8_t Parser_Parse(uint8_t *ParseBuffer, uint16_t *ServoX, uint16_t *ServoY)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	uint8_t *ParsePointer;

	ParsePointer = (uint8_t*)(strtok((char*)ParseBuffer, ";"));
 80005b4:	4914      	ldr	r1, [pc, #80]	; (8000608 <Parser_Parse+0x60>)
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f003 f85e 	bl	8003678 <strtok>
 80005bc:	6178      	str	r0, [r7, #20]

	if(strcmp((char*)ParsePointer,"ACK") == 0)
 80005be:	4913      	ldr	r1, [pc, #76]	; (800060c <Parser_Parse+0x64>)
 80005c0:	6978      	ldr	r0, [r7, #20]
 80005c2:	f7ff fdc3 	bl	800014c <strcmp>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d117      	bne.n	80005fc <Parser_Parse+0x54>
	{
		ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 80005cc:	490e      	ldr	r1, [pc, #56]	; (8000608 <Parser_Parse+0x60>)
 80005ce:	2000      	movs	r0, #0
 80005d0:	f003 f852 	bl	8003678 <strtok>
 80005d4:	6178      	str	r0, [r7, #20]
		*ServoX = atoi((const char*) ParsePointer);
 80005d6:	6978      	ldr	r0, [r7, #20]
 80005d8:	f002 fff8 	bl	80035cc <atoi>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	801a      	strh	r2, [r3, #0]

		ParsePointer = (uint8_t*)(strtok(NULL, ";"));
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <Parser_Parse+0x60>)
 80005e6:	2000      	movs	r0, #0
 80005e8:	f003 f846 	bl	8003678 <strtok>
 80005ec:	6178      	str	r0, [r7, #20]
		*ServoY = atoi((const char*) ParsePointer);
 80005ee:	6978      	ldr	r0, [r7, #20]
 80005f0:	f002 ffec 	bl	80035cc <atoi>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	801a      	strh	r2, [r3, #0]
	}

	return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08004d40 	.word	0x08004d40
 800060c:	08004d44 	.word	0x08004d44

08000610 <RB_Read>:
 */

#include "ringbuffer.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000626:	429a      	cmp	r2, r3
 8000628:	d101      	bne.n	800062e <RB_Read+0x1e>
	{
		return RB_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e017      	b.n	800065e <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	5c9a      	ldrb	r2, [r3, r2]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000644:	3301      	adds	r3, #1
 8000646:	425a      	negs	r2, r3
 8000648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800064c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000650:	bf58      	it	pl
 8000652:	4253      	negpl	r3, r2
 8000654:	b29a      	uxth	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800067a:	3301      	adds	r3, #1
 800067c:	425a      	negs	r2, r3
 800067e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000682:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000686:	bf58      	it	pl
 8000688:	4253      	negpl	r3, r2
 800068a:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000692:	89fa      	ldrh	r2, [r7, #14]
 8000694:	429a      	cmp	r2, r3
 8000696:	d101      	bne.n	800069c <RB_Write+0x34>
	{
		return RB_ERROR;
 8000698:	2301      	movs	r3, #1
 800069a:	e00b      	b.n	80006b4 <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80006a2:	4619      	mov	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	78fa      	ldrb	r2, [r7, #3]
 80006a8:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	89fa      	ldrh	r2, [r7, #14]
 80006ae:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <HAL_MspInit+0x5c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_MspInit+0x5c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x5c>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x5c>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_MspInit+0x60>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_MspInit+0x60>)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 faf9 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <DMA1_Channel5_IRQHandler+0x10>)
 800079a:	f000 fd25 	bl	80011e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001d4 	.word	0x200001d4

080007a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <USART1_IRQHandler+0x10>)
 80007ae:	f002 fae5 	bl	8002d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000218 	.word	0x20000218

080007bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return 1;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <_kill>:

int _kill(int pid, int sig)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007d4:	f002 fefe 	bl	80035d4 <__errno>
 80007d8:	4603      	mov	r3, r0
 80007da:	2216      	movs	r2, #22
 80007dc:	601a      	str	r2, [r3, #0]
	return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_exit>:

void _exit (int status)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007f2:	f04f 31ff 	mov.w	r1, #4294967295
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffe7 	bl	80007ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80007fc:	e7fe      	b.n	80007fc <_exit+0x12>

080007fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e00a      	b.n	8000826 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000810:	f3af 8000 	nop.w
 8000814:	4601      	mov	r1, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	60ba      	str	r2, [r7, #8]
 800081c:	b2ca      	uxtb	r2, r1
 800081e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbf0      	blt.n	8000810 <_read+0x12>
	}

return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e009      	b.n	800085e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	60ba      	str	r2, [r7, #8]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	dbf1      	blt.n	800084a <_write+0x12>
	}
	return len;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_close>:

int _close(int file)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	return -1;
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000896:	605a      	str	r2, [r3, #4]
	return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <_isatty>:

int _isatty(int file)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	return 1;
 80008ac:	2301      	movs	r3, #1
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f002 fe68 	bl	80035d4 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20002800 	.word	0x20002800
 8000930:	00000400 	.word	0x00000400
 8000934:	2000008c 	.word	0x2000008c
 8000938:	20000270 	.word	0x20000270

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b096      	sub	sp, #88	; 0x58
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2220      	movs	r2, #32
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fe51 	bl	8003628 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <MX_TIM1_Init+0x158>)
 8000988:	4a46      	ldr	r2, [pc, #280]	; (8000aa4 <MX_TIM1_Init+0x15c>)
 800098a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800098c:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <MX_TIM1_Init+0x158>)
 800098e:	221f      	movs	r2, #31
 8000990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <MX_TIM1_Init+0x158>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8000998:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <MX_TIM1_Init+0x158>)
 800099a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800099e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <MX_TIM1_Init+0x158>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MX_TIM1_Init+0x158>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <MX_TIM1_Init+0x158>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b2:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <MX_TIM1_Init+0x158>)
 80009b4:	f001 faca 	bl	8001f4c <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009be:	f7ff fded 	bl	800059c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009cc:	4619      	mov	r1, r3
 80009ce:	4834      	ldr	r0, [pc, #208]	; (8000aa0 <MX_TIM1_Init+0x158>)
 80009d0:	f001 fcbe 	bl	8002350 <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009da:	f7ff fddf 	bl	800059c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009de:	4830      	ldr	r0, [pc, #192]	; (8000aa0 <MX_TIM1_Init+0x158>)
 80009e0:	f001 fb03 	bl	8001fea <HAL_TIM_PWM_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009ea:	f7ff fdd7 	bl	800059c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009fa:	4619      	mov	r1, r3
 80009fc:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <MX_TIM1_Init+0x158>)
 80009fe:	f002 f805 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a08:	f7ff fdc8 	bl	800059c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 8000a10:	23c8      	movs	r3, #200	; 0xc8
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <MX_TIM1_Init+0x158>)
 8000a32:	f001 fbcf 	bl	80021d4 <HAL_TIM_PWM_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a3c:	f7ff fdae 	bl	800059c <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 8000a40:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <MX_TIM1_Init+0x158>)
 8000a50:	f001 fbc0 	bl	80021d4 <HAL_TIM_PWM_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a5a:	f7ff fd9f 	bl	800059c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM1_Init+0x158>)
 8000a82:	f002 f81b 	bl	8002abc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000a8c:	f7ff fd86 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM1_Init+0x158>)
 8000a92:	f000 f827 	bl	8000ae4 <HAL_TIM_MspPostInit>

}
 8000a96:	bf00      	nop
 8000a98:	3758      	adds	r7, #88	; 0x58
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000018c 	.word	0x2000018c
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <HAL_TIM_Base_MspInit+0x34>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_TIM_MspPostInit+0x5c>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d118      	bne.n	8000b36 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_TIM_MspPostInit+0x60>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_TIM_MspPostInit+0x60>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_TIM_MspPostInit+0x60>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_TIM_MspPostInit+0x64>)
 8000b32:	f000 fc5f 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40012c00 	.word	0x40012c00
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010800 	.word	0x40010800

08000b4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART1_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b58:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f001 ffeb 	bl	8002b5e <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f7ff fd05 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000218 	.word	0x20000218
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a35      	ldr	r2, [pc, #212]	; (8000c90 <HAL_UART_MspInit+0xf0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d163      	bne.n	8000c88 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <HAL_UART_MspInit+0xf4>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a33      	ldr	r2, [pc, #204]	; (8000c94 <HAL_UART_MspInit+0xf4>)
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <HAL_UART_MspInit+0xf4>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <HAL_UART_MspInit+0xf4>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a2d      	ldr	r2, [pc, #180]	; (8000c94 <HAL_UART_MspInit+0xf4>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <HAL_UART_MspInit+0xf4>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4825      	ldr	r0, [pc, #148]	; (8000c98 <HAL_UART_MspInit+0xf8>)
 8000c04:	f000 fbf6 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481f      	ldr	r0, [pc, #124]	; (8000c98 <HAL_UART_MspInit+0xf8>)
 8000c1c:	f000 fbea 	bl	80013f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <HAL_UART_MspInit+0xfc>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
 8000c36:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_UART_MspInit+0xfc>)
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_UART_MspInit+0x104>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c6e:	f000 f9b1 	bl	8000fd4 <HAL_DMA_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8000c78:	f7ff fc90 	bl	800059c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_UART_MspInit+0x100>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013800 	.word	0x40013800
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	200001d4 	.word	0x200001d4
 8000ca4:	40020058 	.word	0x40020058

08000ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	; (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cce:	f7ff fe35 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f002 fc85 	bl	80035e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fb4b 	bl	8000370 <main>
  bx lr
 8000cda:	4770      	bx	lr
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce4:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 8000ce8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cec:	20000270 	.word	0x20000270

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x28>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f923 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fce6 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f93b 	bl	8000fba <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f903 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x20>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <HAL_IncTick+0x20>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	2000025c 	.word	0x2000025c

08000da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_GetTick+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	2000025c 	.word	0x2000025c

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <__NVIC_EnableIRQ+0x34>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff90 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff2d 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff42 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff90 	bl	8000ea8 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5f 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff35 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e043      	b.n	8001072 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_DMA_Init+0xa8>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_DMA_Init+0xac>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <HAL_DMA_Init+0xb0>)
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800101e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800102c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	bffdfff8 	.word	0xbffdfff8
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800109a:	2b02      	cmp	r3, #2
 800109c:	d008      	beq.n	80010b0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e020      	b.n	80010f2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 020e 	bic.w	r2, r2, #14
 80010be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d8:	2101      	movs	r1, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800110e:	2b02      	cmp	r3, #2
 8001110:	d005      	beq.n	800111e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2204      	movs	r2, #4
 8001116:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e051      	b.n	80011c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 020e 	bic.w	r2, r2, #14
 800112c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0201 	bic.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_DMA_Abort_IT+0xd0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d029      	beq.n	800119c <HAL_DMA_Abort_IT+0xa0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a20      	ldr	r2, [pc, #128]	; (80011d0 <HAL_DMA_Abort_IT+0xd4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d022      	beq.n	8001198 <HAL_DMA_Abort_IT+0x9c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_DMA_Abort_IT+0xd8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d01a      	beq.n	8001192 <HAL_DMA_Abort_IT+0x96>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_DMA_Abort_IT+0xdc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d012      	beq.n	800118c <HAL_DMA_Abort_IT+0x90>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <HAL_DMA_Abort_IT+0xe0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00a      	beq.n	8001186 <HAL_DMA_Abort_IT+0x8a>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <HAL_DMA_Abort_IT+0xe4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d102      	bne.n	8001180 <HAL_DMA_Abort_IT+0x84>
 800117a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800117e:	e00e      	b.n	800119e <HAL_DMA_Abort_IT+0xa2>
 8001180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001184:	e00b      	b.n	800119e <HAL_DMA_Abort_IT+0xa2>
 8001186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118a:	e008      	b.n	800119e <HAL_DMA_Abort_IT+0xa2>
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	e005      	b.n	800119e <HAL_DMA_Abort_IT+0xa2>
 8001192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001196:	e002      	b.n	800119e <HAL_DMA_Abort_IT+0xa2>
 8001198:	2310      	movs	r3, #16
 800119a:	e000      	b.n	800119e <HAL_DMA_Abort_IT+0xa2>
 800119c:	2301      	movs	r3, #1
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_DMA_Abort_IT+0xe8>)
 80011a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
    } 
  }
  return status;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020008 	.word	0x40020008
 80011d0:	4002001c 	.word	0x4002001c
 80011d4:	40020030 	.word	0x40020030
 80011d8:	40020044 	.word	0x40020044
 80011dc:	40020058 	.word	0x40020058
 80011e0:	4002006c 	.word	0x4002006c
 80011e4:	40020000 	.word	0x40020000

080011e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	2204      	movs	r2, #4
 8001206:	409a      	lsls	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d04f      	beq.n	80012b0 <HAL_DMA_IRQHandler+0xc8>
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d04a      	beq.n	80012b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0320 	and.w	r3, r3, #32
 8001224:	2b00      	cmp	r3, #0
 8001226:	d107      	bne.n	8001238 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0204 	bic.w	r2, r2, #4
 8001236:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a66      	ldr	r2, [pc, #408]	; (80013d8 <HAL_DMA_IRQHandler+0x1f0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d029      	beq.n	8001296 <HAL_DMA_IRQHandler+0xae>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a65      	ldr	r2, [pc, #404]	; (80013dc <HAL_DMA_IRQHandler+0x1f4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d022      	beq.n	8001292 <HAL_DMA_IRQHandler+0xaa>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a63      	ldr	r2, [pc, #396]	; (80013e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01a      	beq.n	800128c <HAL_DMA_IRQHandler+0xa4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a62      	ldr	r2, [pc, #392]	; (80013e4 <HAL_DMA_IRQHandler+0x1fc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d012      	beq.n	8001286 <HAL_DMA_IRQHandler+0x9e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a60      	ldr	r2, [pc, #384]	; (80013e8 <HAL_DMA_IRQHandler+0x200>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00a      	beq.n	8001280 <HAL_DMA_IRQHandler+0x98>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <HAL_DMA_IRQHandler+0x204>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d102      	bne.n	800127a <HAL_DMA_IRQHandler+0x92>
 8001274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001278:	e00e      	b.n	8001298 <HAL_DMA_IRQHandler+0xb0>
 800127a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800127e:	e00b      	b.n	8001298 <HAL_DMA_IRQHandler+0xb0>
 8001280:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001284:	e008      	b.n	8001298 <HAL_DMA_IRQHandler+0xb0>
 8001286:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800128a:	e005      	b.n	8001298 <HAL_DMA_IRQHandler+0xb0>
 800128c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001290:	e002      	b.n	8001298 <HAL_DMA_IRQHandler+0xb0>
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	e000      	b.n	8001298 <HAL_DMA_IRQHandler+0xb0>
 8001296:	2304      	movs	r3, #4
 8001298:	4a55      	ldr	r2, [pc, #340]	; (80013f0 <HAL_DMA_IRQHandler+0x208>)
 800129a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 8094 	beq.w	80013ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012ae:	e08e      	b.n	80013ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	2202      	movs	r2, #2
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d056      	beq.n	800136e <HAL_DMA_IRQHandler+0x186>
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d051      	beq.n	800136e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10b      	bne.n	80012f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 020a 	bic.w	r2, r2, #10
 80012e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_DMA_IRQHandler+0x1f0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d029      	beq.n	800134e <HAL_DMA_IRQHandler+0x166>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a37      	ldr	r2, [pc, #220]	; (80013dc <HAL_DMA_IRQHandler+0x1f4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d022      	beq.n	800134a <HAL_DMA_IRQHandler+0x162>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a35      	ldr	r2, [pc, #212]	; (80013e0 <HAL_DMA_IRQHandler+0x1f8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x15c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a34      	ldr	r2, [pc, #208]	; (80013e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d012      	beq.n	800133e <HAL_DMA_IRQHandler+0x156>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_DMA_IRQHandler+0x200>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00a      	beq.n	8001338 <HAL_DMA_IRQHandler+0x150>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a31      	ldr	r2, [pc, #196]	; (80013ec <HAL_DMA_IRQHandler+0x204>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d102      	bne.n	8001332 <HAL_DMA_IRQHandler+0x14a>
 800132c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001330:	e00e      	b.n	8001350 <HAL_DMA_IRQHandler+0x168>
 8001332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001336:	e00b      	b.n	8001350 <HAL_DMA_IRQHandler+0x168>
 8001338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133c:	e008      	b.n	8001350 <HAL_DMA_IRQHandler+0x168>
 800133e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001342:	e005      	b.n	8001350 <HAL_DMA_IRQHandler+0x168>
 8001344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001348:	e002      	b.n	8001350 <HAL_DMA_IRQHandler+0x168>
 800134a:	2320      	movs	r3, #32
 800134c:	e000      	b.n	8001350 <HAL_DMA_IRQHandler+0x168>
 800134e:	2302      	movs	r3, #2
 8001350:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <HAL_DMA_IRQHandler+0x208>)
 8001352:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	2b00      	cmp	r3, #0
 8001362:	d034      	beq.n	80013ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800136c:	e02f      	b.n	80013ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	2208      	movs	r2, #8
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d028      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x1e8>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d023      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 020e 	bic.w	r2, r2, #14
 8001396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f202 	lsl.w	r2, r1, r2
 80013a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	4798      	blx	r3
    }
  }
  return;
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
}
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020008 	.word	0x40020008
 80013dc:	4002001c 	.word	0x4002001c
 80013e0:	40020030 	.word	0x40020030
 80013e4:	40020044 	.word	0x40020044
 80013e8:	40020058 	.word	0x40020058
 80013ec:	4002006c 	.word	0x4002006c
 80013f0:	40020000 	.word	0x40020000

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e148      	b.n	800169a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001408:	2201      	movs	r2, #1
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8137 	bne.w	8001694 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4aa3      	ldr	r2, [pc, #652]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d05e      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001430:	4aa1      	ldr	r2, [pc, #644]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d875      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001436:	4aa1      	ldr	r2, [pc, #644]	; (80016bc <HAL_GPIO_Init+0x2c8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d058      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 800143c:	4a9f      	ldr	r2, [pc, #636]	; (80016bc <HAL_GPIO_Init+0x2c8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d86f      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001442:	4a9f      	ldr	r2, [pc, #636]	; (80016c0 <HAL_GPIO_Init+0x2cc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d052      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001448:	4a9d      	ldr	r2, [pc, #628]	; (80016c0 <HAL_GPIO_Init+0x2cc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d869      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800144e:	4a9d      	ldr	r2, [pc, #628]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d04c      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001454:	4a9b      	ldr	r2, [pc, #620]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d863      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800145a:	4a9b      	ldr	r2, [pc, #620]	; (80016c8 <HAL_GPIO_Init+0x2d4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d046      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001460:	4a99      	ldr	r2, [pc, #612]	; (80016c8 <HAL_GPIO_Init+0x2d4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d85d      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001466:	2b12      	cmp	r3, #18
 8001468:	d82a      	bhi.n	80014c0 <HAL_GPIO_Init+0xcc>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d859      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <HAL_GPIO_Init+0x80>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	080014ef 	.word	0x080014ef
 8001478:	080014c9 	.word	0x080014c9
 800147c:	080014db 	.word	0x080014db
 8001480:	0800151d 	.word	0x0800151d
 8001484:	08001523 	.word	0x08001523
 8001488:	08001523 	.word	0x08001523
 800148c:	08001523 	.word	0x08001523
 8001490:	08001523 	.word	0x08001523
 8001494:	08001523 	.word	0x08001523
 8001498:	08001523 	.word	0x08001523
 800149c:	08001523 	.word	0x08001523
 80014a0:	08001523 	.word	0x08001523
 80014a4:	08001523 	.word	0x08001523
 80014a8:	08001523 	.word	0x08001523
 80014ac:	08001523 	.word	0x08001523
 80014b0:	08001523 	.word	0x08001523
 80014b4:	08001523 	.word	0x08001523
 80014b8:	080014d1 	.word	0x080014d1
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	4a82      	ldr	r2, [pc, #520]	; (80016cc <HAL_GPIO_Init+0x2d8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014c6:	e02c      	b.n	8001522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e029      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	3304      	adds	r3, #4
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e024      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	3308      	adds	r3, #8
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e01f      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	330c      	adds	r3, #12
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e01a      	b.n	8001524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f6:	2304      	movs	r3, #4
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e013      	b.n	8001524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	611a      	str	r2, [r3, #16]
          break;
 800150e:	e009      	b.n	8001524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	615a      	str	r2, [r3, #20]
          break;
 800151a:	e003      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x130>
          break;
 8001522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d801      	bhi.n	800152e <HAL_GPIO_Init+0x13a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_Init+0x13e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3304      	adds	r3, #4
 8001532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d802      	bhi.n	8001540 <HAL_GPIO_Init+0x14c>
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x152>
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	3b08      	subs	r3, #8
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	210f      	movs	r1, #15
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	6a39      	ldr	r1, [r7, #32]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8090 	beq.w	8001694 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001574:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <HAL_GPIO_Init+0x2dc>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a55      	ldr	r2, [pc, #340]	; (80016d0 <HAL_GPIO_Init+0x2dc>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_GPIO_Init+0x2dc>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800158c:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_GPIO_Init+0x2e0>)
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a49      	ldr	r2, [pc, #292]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00d      	beq.n	80015d4 <HAL_GPIO_Init+0x1e0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a48      	ldr	r2, [pc, #288]	; (80016dc <HAL_GPIO_Init+0x2e8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d007      	beq.n	80015d0 <HAL_GPIO_Init+0x1dc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <HAL_GPIO_Init+0x2ec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d101      	bne.n	80015cc <HAL_GPIO_Init+0x1d8>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e004      	b.n	80015d6 <HAL_GPIO_Init+0x1e2>
 80015cc:	2303      	movs	r3, #3
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x1e2>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_GPIO_Init+0x1e2>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d8:	f002 0203 	and.w	r2, r2, #3
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	4093      	lsls	r3, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e6:	493b      	ldr	r1, [pc, #236]	; (80016d4 <HAL_GPIO_Init+0x2e0>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4937      	ldr	r1, [pc, #220]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160e:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4933      	ldr	r1, [pc, #204]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001618:	4013      	ands	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	492d      	ldr	r1, [pc, #180]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4929      	ldr	r1, [pc, #164]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001640:	4013      	ands	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4923      	ldr	r1, [pc, #140]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	491f      	ldr	r1, [pc, #124]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001668:	4013      	ands	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4919      	ldr	r1, [pc, #100]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4915      	ldr	r1, [pc, #84]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 8001690:	4013      	ands	r3, r2
 8001692:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	3301      	adds	r3, #1
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f47f aeaf 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	372c      	adds	r7, #44	; 0x2c
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	10320000 	.word	0x10320000
 80016bc:	10310000 	.word	0x10310000
 80016c0:	10220000 	.word	0x10220000
 80016c4:	10210000 	.word	0x10210000
 80016c8:	10120000 	.word	0x10120000
 80016cc:	10110000 	.word	0x10110000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	611a      	str	r2, [r3, #16]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e26c      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8087 	beq.w	8001846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b04      	cmp	r3, #4
 8001742:	d00c      	beq.n	800175e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001744:	4b8f      	ldr	r3, [pc, #572]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d112      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
 8001750:	4b8c      	ldr	r3, [pc, #560]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d10b      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4b89      	ldr	r3, [pc, #548]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d06c      	beq.n	8001844 <HAL_RCC_OscConfig+0x12c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d168      	bne.n	8001844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e246      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x76>
 8001780:	4b80      	ldr	r3, [pc, #512]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a7f      	ldr	r2, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e02e      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7a      	ldr	r2, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b78      	ldr	r3, [pc, #480]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a77      	ldr	r2, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01d      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0xbc>
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a71      	ldr	r2, [pc, #452]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6e      	ldr	r2, [pc, #440]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017d4:	4b6b      	ldr	r3, [pc, #428]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a6a      	ldr	r2, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b68      	ldr	r3, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a67      	ldr	r2, [pc, #412]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fad6 	bl	8000da4 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fad2 	bl	8000da4 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1fa      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0xe4>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fac2 	bl	8000da4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fabe 	bl	8000da4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1e6      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x10c>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d063      	beq.n	800191a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800185e:	4b49      	ldr	r3, [pc, #292]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d11c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d116      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	4b43      	ldr	r3, [pc, #268]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e1ba      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4939      	ldr	r1, [pc, #228]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	e03a      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x270>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa77 	bl	8000da4 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fa73 	bl	8000da4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e19b      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4927      	ldr	r1, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_OscConfig+0x270>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa56 	bl	8000da4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff fa52 	bl	8000da4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e17a      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03a      	beq.n	800199c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d019      	beq.n	8001962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_RCC_OscConfig+0x274>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fa36 	bl	8000da4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fa32 	bl	8000da4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e15a      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 fad8 	bl	8001f10 <RCC_Delay>
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_RCC_OscConfig+0x274>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fa1c 	bl	8000da4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196e:	e00f      	b.n	8001990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fa18 	bl	8000da4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d908      	bls.n	8001990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e140      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	42420000 	.word	0x42420000
 800198c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b9e      	ldr	r3, [pc, #632]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e9      	bne.n	8001970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a6 	beq.w	8001af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b97      	ldr	r3, [pc, #604]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b94      	ldr	r3, [pc, #592]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a93      	ldr	r2, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b91      	ldr	r3, [pc, #580]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b8e      	ldr	r3, [pc, #568]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a8a      	ldr	r2, [pc, #552]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff f9d9 	bl	8000da4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff f9d5 	bl	8000da4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0fd      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b81      	ldr	r3, [pc, #516]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x312>
 8001a1c:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a7a      	ldr	r2, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	e02d      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x334>
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a75      	ldr	r2, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	e01c      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x356>
 8001a54:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a6c      	ldr	r2, [pc, #432]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a6e:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a66      	ldr	r2, [pc, #408]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d015      	beq.n	8001aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f989 	bl	8000da4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff f985 	bl	8000da4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0ab      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ee      	beq.n	8001a96 <HAL_RCC_OscConfig+0x37e>
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f973 	bl	8000da4 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f96f 	bl	8000da4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e095      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aea:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8081 	beq.w	8001c02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d061      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d146      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f943 	bl	8000da4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f93f 	bl	8000da4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e067      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	492d      	ldr	r1, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a19      	ldr	r1, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	4927      	ldr	r1, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f913 	bl	8000da4 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f90f 	bl	8000da4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e037      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46a>
 8001ba0:	e02f      	b.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f8fc 	bl	8000da4 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f8f8 	bl	8000da4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e020      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x498>
 8001bce:	e018      	b.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e013      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
 8001c14:	42420060 	.word	0x42420060

08001c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0d0      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4965      	ldr	r1, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d040      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e073      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4936      	ldr	r1, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f84c 	bl	8000da4 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff f848 	bl	8000da4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e053      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d210      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f821 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	490a      	ldr	r1, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	5ccb      	ldrb	r3, [r1, r3]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ffaa 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08004d58 	.word	0x08004d58
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b490      	push	{r4, r7}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df4:	1d3c      	adds	r4, r7, #4
 8001df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dfc:	f240 2301 	movw	r3, #513	; 0x201
 8001e00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x40>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x46>
 8001e2a:	e02d      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2e:	623b      	str	r3, [r7, #32]
      break;
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0c9b      	lsrs	r3, r3, #18
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e3e:	4413      	add	r3, r2
 8001e40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c5b      	lsrs	r3, r3, #17
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e5e:	4413      	add	r3, r2
 8001e60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6a:	fb02 f203 	mul.w	r2, r2, r3
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	e004      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	623b      	str	r3, [r7, #32]
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8a:	623b      	str	r3, [r7, #32]
      break;
 8001e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc90      	pop	{r4, r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	08004d48 	.word	0x08004d48
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	007a1200 	.word	0x007a1200
 8001ea8:	003d0900 	.word	0x003d0900

08001eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec4:	f7ff fff2 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08004d68 	.word	0x08004d68

08001ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eec:	f7ff ffde 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	0adb      	lsrs	r3, r3, #11
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4903      	ldr	r1, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08004d68 	.word	0x08004d68

08001f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <RCC_Delay+0x34>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <RCC_Delay+0x38>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0a5b      	lsrs	r3, r3, #9
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f2c:	bf00      	nop
  }
  while (Delay --);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <RCC_Delay+0x1c>
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000000 	.word	0x20000000
 8001f48:	10624dd3 	.word	0x10624dd3

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fd98 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 faa4 	bl	80024d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e041      	b.n	8002080 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f839 	bl	8002088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f000 fa55 	bl	80024d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
	...

0800209c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_TIM_PWM_Start+0x24>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e022      	b.n	8002106 <HAL_TIM_PWM_Start+0x6a>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d109      	bne.n	80020da <HAL_TIM_PWM_Start+0x3e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e015      	b.n	8002106 <HAL_TIM_PWM_Start+0x6a>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d109      	bne.n	80020f4 <HAL_TIM_PWM_Start+0x58>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e008      	b.n	8002106 <HAL_TIM_PWM_Start+0x6a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e059      	b.n	80021c2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <HAL_TIM_PWM_Start+0x82>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800211c:	e013      	b.n	8002146 <HAL_TIM_PWM_Start+0xaa>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d104      	bne.n	800212e <HAL_TIM_PWM_Start+0x92>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800212c:	e00b      	b.n	8002146 <HAL_TIM_PWM_Start+0xaa>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d104      	bne.n	800213e <HAL_TIM_PWM_Start+0xa2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800213c:	e003      	b.n	8002146 <HAL_TIM_PWM_Start+0xaa>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2201      	movs	r2, #1
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fc38 	bl	80029c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_TIM_PWM_Start+0x130>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d107      	bne.n	800216e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_TIM_PWM_Start+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_TIM_PWM_Start+0xf0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d004      	beq.n	800218c <HAL_TIM_PWM_Start+0xf0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_TIM_PWM_Start+0x134>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d111      	bne.n	80021b0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d010      	beq.n	80021c0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ae:	e007      	b.n	80021c0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40000400 	.word	0x40000400

080021d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0ac      	b.n	8002348 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	f200 809f 	bhi.w	800233c <HAL_TIM_PWM_ConfigChannel+0x168>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002239 	.word	0x08002239
 8002208:	0800233d 	.word	0x0800233d
 800220c:	0800233d 	.word	0x0800233d
 8002210:	0800233d 	.word	0x0800233d
 8002214:	08002279 	.word	0x08002279
 8002218:	0800233d 	.word	0x0800233d
 800221c:	0800233d 	.word	0x0800233d
 8002220:	0800233d 	.word	0x0800233d
 8002224:	080022bb 	.word	0x080022bb
 8002228:	0800233d 	.word	0x0800233d
 800222c:	0800233d 	.word	0x0800233d
 8002230:	0800233d 	.word	0x0800233d
 8002234:	080022fb 	.word	0x080022fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f9a2 	bl	8002588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0204 	bic.w	r2, r2, #4
 8002262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6999      	ldr	r1, [r3, #24]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	619a      	str	r2, [r3, #24]
      break;
 8002276:	e062      	b.n	800233e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f9e8 	bl	8002654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6999      	ldr	r1, [r3, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	619a      	str	r2, [r3, #24]
      break;
 80022b8:	e041      	b.n	800233e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fa31 	bl	8002728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0208 	orr.w	r2, r2, #8
 80022d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0204 	bic.w	r2, r2, #4
 80022e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69d9      	ldr	r1, [r3, #28]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
      break;
 80022f8:	e021      	b.n	800233e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fa7b 	bl	80027fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69d9      	ldr	r1, [r3, #28]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	61da      	str	r2, [r3, #28]
      break;
 800233a:	e000      	b.n	800233e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800233c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_TIM_ConfigClockSource+0x18>
 8002364:	2302      	movs	r3, #2
 8002366:	e0b3      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x180>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a0:	d03e      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0xd0>
 80023a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a6:	f200 8087 	bhi.w	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ae:	f000 8085 	beq.w	80024bc <HAL_TIM_ConfigClockSource+0x16c>
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d87f      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023b8:	2b70      	cmp	r3, #112	; 0x70
 80023ba:	d01a      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xa2>
 80023bc:	2b70      	cmp	r3, #112	; 0x70
 80023be:	d87b      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d050      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x116>
 80023c4:	2b60      	cmp	r3, #96	; 0x60
 80023c6:	d877      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023c8:	2b50      	cmp	r3, #80	; 0x50
 80023ca:	d03c      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xf6>
 80023cc:	2b50      	cmp	r3, #80	; 0x50
 80023ce:	d873      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d058      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x136>
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d86f      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d064      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x156>
 80023dc:	2b30      	cmp	r3, #48	; 0x30
 80023de:	d86b      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d060      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x156>
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d867      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05c      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x156>
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d05a      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023f0:	e062      	b.n	80024b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f000 fac0 	bl	8002986 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002414:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	609a      	str	r2, [r3, #8]
      break;
 800241e:	e04e      	b.n	80024be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f000 faa9 	bl	8002986 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002442:	609a      	str	r2, [r3, #8]
      break;
 8002444:	e03b      	b.n	80024be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	461a      	mov	r2, r3
 8002454:	f000 fa20 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2150      	movs	r1, #80	; 0x50
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fa77 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 8002464:	e02b      	b.n	80024be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 fa3e 	bl	80028f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2160      	movs	r1, #96	; 0x60
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fa67 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 8002484:	e01b      	b.n	80024be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	461a      	mov	r2, r3
 8002494:	f000 fa00 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fa57 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 80024a4:	e00b      	b.n	80024be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f000 fa4e 	bl	8002952 <TIM_ITRx_SetConfig>
        break;
 80024b6:	e002      	b.n	80024be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <TIM_Base_SetConfig+0xa8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x28>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x28>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <TIM_Base_SetConfig+0xac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <TIM_Base_SetConfig+0xa8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <TIM_Base_SetConfig+0x52>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0x52>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <TIM_Base_SetConfig+0xac>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d108      	bne.n	800253c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <TIM_Base_SetConfig+0xa8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d103      	bne.n	8002570 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	615a      	str	r2, [r3, #20]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400

08002588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f023 0201 	bic.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 0302 	bic.w	r3, r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <TIM_OC1_SetConfig+0xc8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d10c      	bne.n	80025fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f023 0308 	bic.w	r3, r3, #8
 80025ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a13      	ldr	r2, [pc, #76]	; (8002650 <TIM_OC1_SetConfig+0xc8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d111      	bne.n	800262a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800260c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	621a      	str	r2, [r3, #32]
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40012c00 	.word	0x40012c00

08002654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f023 0210 	bic.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f023 0320 	bic.w	r3, r3, #32
 800269e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <TIM_OC2_SetConfig+0xd0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d10d      	bne.n	80026d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a14      	ldr	r2, [pc, #80]	; (8002724 <TIM_OC2_SetConfig+0xd0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d113      	bne.n	8002700 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	621a      	str	r2, [r3, #32]
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40012c00 	.word	0x40012c00

08002728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a1d      	ldr	r2, [pc, #116]	; (80027f8 <TIM_OC3_SetConfig+0xd0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10d      	bne.n	80027a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800278c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <TIM_OC3_SetConfig+0xd0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d113      	bne.n	80027d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	621a      	str	r2, [r3, #32]
}
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40012c00 	.word	0x40012c00

080027fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	031b      	lsls	r3, r3, #12
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <TIM_OC4_SetConfig+0x98>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d109      	bne.n	8002870 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	019b      	lsls	r3, r3, #6
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40012c00 	.word	0x40012c00

08002898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 030a 	bic.w	r3, r3, #10
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 0210 	bic.w	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800291e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	031b      	lsls	r3, r3, #12
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	f043 0307 	orr.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2201      	movs	r2, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1a      	ldr	r2, [r3, #32]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e041      	b.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d004      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10c      	bne.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e03d      	b.n	8002b54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e03f      	b.n	8002bf0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe f80b 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2224      	movs	r2, #36	; 0x24
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fc84 	bl	80034b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d17c      	bne.n	8002d12 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_UART_Transmit+0x2c>
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e075      	b.n	8002d14 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Transmit+0x3e>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e06e      	b.n	8002d14 <HAL_UART_Transmit+0x11c>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe f8aa 	bl	8000da4 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	d108      	bne.n	8002c7a <HAL_UART_Transmit+0x82>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e003      	b.n	8002c82 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c8a:	e02a      	b.n	8002ce2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fa37 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e036      	b.n	8002d14 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	e007      	b.n	8002cd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1cf      	bne.n	8002c8c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2140      	movs	r1, #64	; 0x40
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fa07 	bl	800310a <UART_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e006      	b.n	8002d14 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d11d      	bne.n	8002d72 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_UART_Receive_IT+0x26>
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e016      	b.n	8002d74 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_UART_Receive_IT+0x38>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e00f      	b.n	8002d74 <HAL_UART_Receive_IT+0x58>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	461a      	mov	r2, r3
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fa18 	bl	800319e <UART_Start_Receive_IT>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	e000      	b.n	8002d74 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10d      	bne.n	8002dce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_UART_IRQHandler+0x52>
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fac9 	bl	800335e <UART_Receive_IT>
      return;
 8002dcc:	e17b      	b.n	80030c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80b1 	beq.w	8002f38 <HAL_UART_IRQHandler+0x1bc>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_UART_IRQHandler+0x70>
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80a6 	beq.w	8002f38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_UART_IRQHandler+0x90>
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_UART_IRQHandler+0xb0>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_UART_IRQHandler+0xd0>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00f      	beq.n	8002e76 <HAL_UART_IRQHandler+0xfa>
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <HAL_UART_IRQHandler+0xee>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f043 0208 	orr.w	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 811e 	beq.w	80030bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_UART_IRQHandler+0x11e>
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fa62 	bl	800335e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x146>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d031      	beq.n	8002f26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f9a4 	bl	8003210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d013      	beq.n	8002f16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	4a76      	ldr	r2, [pc, #472]	; (80030cc <HAL_UART_IRQHandler+0x350>)
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe f8fe 	bl	80010fc <HAL_DMA_Abort_IT>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f10:	4610      	mov	r0, r2
 8002f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	e00e      	b.n	8002f34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8e3 	bl	80030e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1c:	e00a      	b.n	8002f34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f8df 	bl	80030e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	e006      	b.n	8002f34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8db 	bl	80030e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f32:	e0c3      	b.n	80030bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	bf00      	nop
    return;
 8002f36:	e0c1      	b.n	80030bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f040 80a1 	bne.w	8003084 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 809b 	beq.w	8003084 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8095 	beq.w	8003084 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d04e      	beq.n	800301c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f88:	8a3b      	ldrh	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8098 	beq.w	80030c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f94:	8a3a      	ldrh	r2, [r7, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	f080 8092 	bcs.w	80030c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8a3a      	ldrh	r2, [r7, #16]
 8002fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d02b      	beq.n	8003004 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0210 	bic.w	r2, r2, #16
 8002ff8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe f842 	bl	8001088 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800300c:	b29b      	uxth	r3, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	b29b      	uxth	r3, r3
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f86d 	bl	80030f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800301a:	e051      	b.n	80030c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003024:	b29b      	uxth	r3, r3
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d047      	beq.n	80030c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003034:	8a7b      	ldrh	r3, [r7, #18]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d044      	beq.n	80030c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003048:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0210 	bic.w	r2, r2, #16
 8003076:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003078:	8a7b      	ldrh	r3, [r7, #18]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f839 	bl	80030f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003082:	e01f      	b.n	80030c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_UART_IRQHandler+0x324>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8f9 	bl	8003290 <UART_Transmit_IT>
    return;
 800309e:	e012      	b.n	80030c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_UART_IRQHandler+0x34a>
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f93a 	bl	800332e <UART_EndTransmit_IT>
    return;
 80030ba:	e004      	b.n	80030c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80030bc:	bf00      	nop
 80030be:	e002      	b.n	80030c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030c4:	bf00      	nop
  }
}
 80030c6:	3728      	adds	r7, #40	; 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	08003269 	.word	0x08003269

080030d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311a:	e02c      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d028      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <UART_WaitOnFlagUntilTimeout+0x30>
 800312a:	f7fd fe3b 	bl	8000da4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	429a      	cmp	r2, r3
 8003138:	d21d      	bcs.n	8003176 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003148:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e00f      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d0c3      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	88fa      	ldrh	r2, [r7, #6]
 80031b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2222      	movs	r2, #34	; 0x22
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003226:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0210 	bic.w	r2, r2, #16
 800324e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff ff2d 	bl	80030e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b21      	cmp	r3, #33	; 0x21
 80032a2:	d13e      	bne.n	8003322 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d114      	bne.n	80032d8 <UART_Transmit_IT+0x48>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d110      	bne.n	80032d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	1c9a      	adds	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]
 80032d6:	e008      	b.n	80032ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	1c59      	adds	r1, r3, #1
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6211      	str	r1, [r2, #32]
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4619      	mov	r1, r3
 80032f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff febe 	bl	80030d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b22      	cmp	r3, #34	; 0x22
 8003370:	f040 8099 	bne.w	80034a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d117      	bne.n	80033ae <UART_Receive_IT+0x50>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d113      	bne.n	80033ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339c:	b29a      	uxth	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	1c9a      	adds	r2, r3, #2
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
 80033ac:	e026      	b.n	80033fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d007      	beq.n	80033d2 <UART_Receive_IT+0x74>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <UART_Receive_IT+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e008      	b.n	80033f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4619      	mov	r1, r3
 800340a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800340c:	2b00      	cmp	r3, #0
 800340e:	d148      	bne.n	80034a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0220 	bic.w	r2, r2, #32
 800341e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800342e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	2b01      	cmp	r3, #1
 800344e:	d123      	bne.n	8003498 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0210 	bic.w	r2, r2, #16
 8003464:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b10      	cmp	r3, #16
 8003472:	d10a      	bne.n	800348a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fe2f 	bl	80030f4 <HAL_UARTEx_RxEventCallback>
 8003496:	e002      	b.n	800349e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fd f871 	bl	8000580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e002      	b.n	80034a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034ea:	f023 030c 	bic.w	r3, r3, #12
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <UART_SetConfig+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d103      	bne.n	8003520 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7fe fce6 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	e002      	b.n	8003526 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7fe fcce 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8003524:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <UART_SetConfig+0x118>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	0119      	lsls	r1, r3, #4
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009a      	lsls	r2, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	fbb2 f2f3 	udiv	r2, r2, r3
 800355c:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <UART_SetConfig+0x118>)
 800355e:	fba3 0302 	umull	r0, r3, r3, r2
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2064      	movs	r0, #100	; 0x64
 8003566:	fb00 f303 	mul.w	r3, r0, r3
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	3332      	adds	r3, #50	; 0x32
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <UART_SetConfig+0x118>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357c:	4419      	add	r1, r3
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009a      	lsls	r2, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <UART_SetConfig+0x118>)
 8003596:	fba3 0302 	umull	r0, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2064      	movs	r0, #100	; 0x64
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	; 0x32
 80035a8:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	440a      	add	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40013800 	.word	0x40013800
 80035c8:	51eb851f 	.word	0x51eb851f

080035cc <atoi>:
 80035cc:	220a      	movs	r2, #10
 80035ce:	2100      	movs	r1, #0
 80035d0:	f000 b934 	b.w	800383c <strtol>

080035d4 <__errno>:
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <__errno+0x8>)
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	2000000c 	.word	0x2000000c

080035e0 <__libc_init_array>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	2600      	movs	r6, #0
 80035e4:	4d0c      	ldr	r5, [pc, #48]	; (8003618 <__libc_init_array+0x38>)
 80035e6:	4c0d      	ldr	r4, [pc, #52]	; (800361c <__libc_init_array+0x3c>)
 80035e8:	1b64      	subs	r4, r4, r5
 80035ea:	10a4      	asrs	r4, r4, #2
 80035ec:	42a6      	cmp	r6, r4
 80035ee:	d109      	bne.n	8003604 <__libc_init_array+0x24>
 80035f0:	f001 faac 	bl	8004b4c <_init>
 80035f4:	2600      	movs	r6, #0
 80035f6:	4d0a      	ldr	r5, [pc, #40]	; (8003620 <__libc_init_array+0x40>)
 80035f8:	4c0a      	ldr	r4, [pc, #40]	; (8003624 <__libc_init_array+0x44>)
 80035fa:	1b64      	subs	r4, r4, r5
 80035fc:	10a4      	asrs	r4, r4, #2
 80035fe:	42a6      	cmp	r6, r4
 8003600:	d105      	bne.n	800360e <__libc_init_array+0x2e>
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	f855 3b04 	ldr.w	r3, [r5], #4
 8003608:	4798      	blx	r3
 800360a:	3601      	adds	r6, #1
 800360c:	e7ee      	b.n	80035ec <__libc_init_array+0xc>
 800360e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003612:	4798      	blx	r3
 8003614:	3601      	adds	r6, #1
 8003616:	e7f2      	b.n	80035fe <__libc_init_array+0x1e>
 8003618:	08004fbc 	.word	0x08004fbc
 800361c:	08004fbc 	.word	0x08004fbc
 8003620:	08004fbc 	.word	0x08004fbc
 8003624:	08004fc0 	.word	0x08004fc0

08003628 <memset>:
 8003628:	4603      	mov	r3, r0
 800362a:	4402      	add	r2, r0
 800362c:	4293      	cmp	r3, r2
 800362e:	d100      	bne.n	8003632 <memset+0xa>
 8003630:	4770      	bx	lr
 8003632:	f803 1b01 	strb.w	r1, [r3], #1
 8003636:	e7f9      	b.n	800362c <memset+0x4>

08003638 <siprintf>:
 8003638:	b40e      	push	{r1, r2, r3}
 800363a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800363e:	b500      	push	{lr}
 8003640:	b09c      	sub	sp, #112	; 0x70
 8003642:	ab1d      	add	r3, sp, #116	; 0x74
 8003644:	9002      	str	r0, [sp, #8]
 8003646:	9006      	str	r0, [sp, #24]
 8003648:	9107      	str	r1, [sp, #28]
 800364a:	9104      	str	r1, [sp, #16]
 800364c:	4808      	ldr	r0, [pc, #32]	; (8003670 <siprintf+0x38>)
 800364e:	4909      	ldr	r1, [pc, #36]	; (8003674 <siprintf+0x3c>)
 8003650:	f853 2b04 	ldr.w	r2, [r3], #4
 8003654:	9105      	str	r1, [sp, #20]
 8003656:	6800      	ldr	r0, [r0, #0]
 8003658:	a902      	add	r1, sp, #8
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	f000 fa32 	bl	8003ac4 <_svfiprintf_r>
 8003660:	2200      	movs	r2, #0
 8003662:	9b02      	ldr	r3, [sp, #8]
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	b01c      	add	sp, #112	; 0x70
 8003668:	f85d eb04 	ldr.w	lr, [sp], #4
 800366c:	b003      	add	sp, #12
 800366e:	4770      	bx	lr
 8003670:	2000000c 	.word	0x2000000c
 8003674:	ffff0208 	.word	0xffff0208

08003678 <strtok>:
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <strtok+0x5c>)
 800367a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800367e:	681f      	ldr	r7, [r3, #0]
 8003680:	4605      	mov	r5, r0
 8003682:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003684:	460e      	mov	r6, r1
 8003686:	b9ec      	cbnz	r4, 80036c4 <strtok+0x4c>
 8003688:	2050      	movs	r0, #80	; 0x50
 800368a:	f000 f911 	bl	80038b0 <malloc>
 800368e:	4602      	mov	r2, r0
 8003690:	65b8      	str	r0, [r7, #88]	; 0x58
 8003692:	b920      	cbnz	r0, 800369e <strtok+0x26>
 8003694:	2157      	movs	r1, #87	; 0x57
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <strtok+0x60>)
 8003698:	4810      	ldr	r0, [pc, #64]	; (80036dc <strtok+0x64>)
 800369a:	f000 f8d9 	bl	8003850 <__assert_func>
 800369e:	e9c0 4400 	strd	r4, r4, [r0]
 80036a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80036a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80036aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80036ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80036b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80036b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80036ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80036be:	6184      	str	r4, [r0, #24]
 80036c0:	7704      	strb	r4, [r0, #28]
 80036c2:	6244      	str	r4, [r0, #36]	; 0x24
 80036c4:	4631      	mov	r1, r6
 80036c6:	4628      	mov	r0, r5
 80036c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ca:	2301      	movs	r3, #1
 80036cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d0:	f000 b806 	b.w	80036e0 <__strtok_r>
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	08004d74 	.word	0x08004d74
 80036dc:	08004d8b 	.word	0x08004d8b

080036e0 <__strtok_r>:
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	b908      	cbnz	r0, 80036e8 <__strtok_r+0x8>
 80036e4:	6810      	ldr	r0, [r2, #0]
 80036e6:	b188      	cbz	r0, 800370c <__strtok_r+0x2c>
 80036e8:	4604      	mov	r4, r0
 80036ea:	460f      	mov	r7, r1
 80036ec:	4620      	mov	r0, r4
 80036ee:	f814 5b01 	ldrb.w	r5, [r4], #1
 80036f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80036f6:	b91e      	cbnz	r6, 8003700 <__strtok_r+0x20>
 80036f8:	b965      	cbnz	r5, 8003714 <__strtok_r+0x34>
 80036fa:	4628      	mov	r0, r5
 80036fc:	6015      	str	r5, [r2, #0]
 80036fe:	e005      	b.n	800370c <__strtok_r+0x2c>
 8003700:	42b5      	cmp	r5, r6
 8003702:	d1f6      	bne.n	80036f2 <__strtok_r+0x12>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <__strtok_r+0xa>
 8003708:	6014      	str	r4, [r2, #0]
 800370a:	7003      	strb	r3, [r0, #0]
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370e:	461c      	mov	r4, r3
 8003710:	e00c      	b.n	800372c <__strtok_r+0x4c>
 8003712:	b915      	cbnz	r5, 800371a <__strtok_r+0x3a>
 8003714:	460e      	mov	r6, r1
 8003716:	f814 3b01 	ldrb.w	r3, [r4], #1
 800371a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800371e:	42ab      	cmp	r3, r5
 8003720:	d1f7      	bne.n	8003712 <__strtok_r+0x32>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f3      	beq.n	800370e <__strtok_r+0x2e>
 8003726:	2300      	movs	r3, #0
 8003728:	f804 3c01 	strb.w	r3, [r4, #-1]
 800372c:	6014      	str	r4, [r2, #0]
 800372e:	e7ed      	b.n	800370c <__strtok_r+0x2c>

08003730 <_strtol_l.isra.0>:
 8003730:	2b01      	cmp	r3, #1
 8003732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003736:	4686      	mov	lr, r0
 8003738:	d001      	beq.n	800373e <_strtol_l.isra.0+0xe>
 800373a:	2b24      	cmp	r3, #36	; 0x24
 800373c:	d906      	bls.n	800374c <_strtol_l.isra.0+0x1c>
 800373e:	f7ff ff49 	bl	80035d4 <__errno>
 8003742:	2316      	movs	r3, #22
 8003744:	6003      	str	r3, [r0, #0]
 8003746:	2000      	movs	r0, #0
 8003748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374c:	468c      	mov	ip, r1
 800374e:	4e3a      	ldr	r6, [pc, #232]	; (8003838 <_strtol_l.isra.0+0x108>)
 8003750:	4660      	mov	r0, ip
 8003752:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003756:	5da5      	ldrb	r5, [r4, r6]
 8003758:	f015 0508 	ands.w	r5, r5, #8
 800375c:	d1f8      	bne.n	8003750 <_strtol_l.isra.0+0x20>
 800375e:	2c2d      	cmp	r4, #45	; 0x2d
 8003760:	d133      	bne.n	80037ca <_strtol_l.isra.0+0x9a>
 8003762:	f04f 0801 	mov.w	r8, #1
 8003766:	f89c 4000 	ldrb.w	r4, [ip]
 800376a:	f100 0c02 	add.w	ip, r0, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d05d      	beq.n	800382e <_strtol_l.isra.0+0xfe>
 8003772:	2b10      	cmp	r3, #16
 8003774:	d10c      	bne.n	8003790 <_strtol_l.isra.0+0x60>
 8003776:	2c30      	cmp	r4, #48	; 0x30
 8003778:	d10a      	bne.n	8003790 <_strtol_l.isra.0+0x60>
 800377a:	f89c 0000 	ldrb.w	r0, [ip]
 800377e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003782:	2858      	cmp	r0, #88	; 0x58
 8003784:	d14e      	bne.n	8003824 <_strtol_l.isra.0+0xf4>
 8003786:	2310      	movs	r3, #16
 8003788:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800378c:	f10c 0c02 	add.w	ip, ip, #2
 8003790:	2500      	movs	r5, #0
 8003792:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8003796:	3f01      	subs	r7, #1
 8003798:	fbb7 f9f3 	udiv	r9, r7, r3
 800379c:	4628      	mov	r0, r5
 800379e:	fb03 7a19 	mls	sl, r3, r9, r7
 80037a2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80037a6:	2e09      	cmp	r6, #9
 80037a8:	d818      	bhi.n	80037dc <_strtol_l.isra.0+0xac>
 80037aa:	4634      	mov	r4, r6
 80037ac:	42a3      	cmp	r3, r4
 80037ae:	dd24      	ble.n	80037fa <_strtol_l.isra.0+0xca>
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	db1f      	blt.n	80037f4 <_strtol_l.isra.0+0xc4>
 80037b4:	4581      	cmp	r9, r0
 80037b6:	d31d      	bcc.n	80037f4 <_strtol_l.isra.0+0xc4>
 80037b8:	d101      	bne.n	80037be <_strtol_l.isra.0+0x8e>
 80037ba:	45a2      	cmp	sl, r4
 80037bc:	db1a      	blt.n	80037f4 <_strtol_l.isra.0+0xc4>
 80037be:	2501      	movs	r5, #1
 80037c0:	fb00 4003 	mla	r0, r0, r3, r4
 80037c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80037c8:	e7eb      	b.n	80037a2 <_strtol_l.isra.0+0x72>
 80037ca:	2c2b      	cmp	r4, #43	; 0x2b
 80037cc:	bf08      	it	eq
 80037ce:	f89c 4000 	ldrbeq.w	r4, [ip]
 80037d2:	46a8      	mov	r8, r5
 80037d4:	bf08      	it	eq
 80037d6:	f100 0c02 	addeq.w	ip, r0, #2
 80037da:	e7c8      	b.n	800376e <_strtol_l.isra.0+0x3e>
 80037dc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80037e0:	2e19      	cmp	r6, #25
 80037e2:	d801      	bhi.n	80037e8 <_strtol_l.isra.0+0xb8>
 80037e4:	3c37      	subs	r4, #55	; 0x37
 80037e6:	e7e1      	b.n	80037ac <_strtol_l.isra.0+0x7c>
 80037e8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80037ec:	2e19      	cmp	r6, #25
 80037ee:	d804      	bhi.n	80037fa <_strtol_l.isra.0+0xca>
 80037f0:	3c57      	subs	r4, #87	; 0x57
 80037f2:	e7db      	b.n	80037ac <_strtol_l.isra.0+0x7c>
 80037f4:	f04f 35ff 	mov.w	r5, #4294967295
 80037f8:	e7e4      	b.n	80037c4 <_strtol_l.isra.0+0x94>
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	da08      	bge.n	8003810 <_strtol_l.isra.0+0xe0>
 80037fe:	2322      	movs	r3, #34	; 0x22
 8003800:	4638      	mov	r0, r7
 8003802:	f8ce 3000 	str.w	r3, [lr]
 8003806:	2a00      	cmp	r2, #0
 8003808:	d09e      	beq.n	8003748 <_strtol_l.isra.0+0x18>
 800380a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800380e:	e007      	b.n	8003820 <_strtol_l.isra.0+0xf0>
 8003810:	f1b8 0f00 	cmp.w	r8, #0
 8003814:	d000      	beq.n	8003818 <_strtol_l.isra.0+0xe8>
 8003816:	4240      	negs	r0, r0
 8003818:	2a00      	cmp	r2, #0
 800381a:	d095      	beq.n	8003748 <_strtol_l.isra.0+0x18>
 800381c:	2d00      	cmp	r5, #0
 800381e:	d1f4      	bne.n	800380a <_strtol_l.isra.0+0xda>
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	e791      	b.n	8003748 <_strtol_l.isra.0+0x18>
 8003824:	2430      	movs	r4, #48	; 0x30
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1b2      	bne.n	8003790 <_strtol_l.isra.0+0x60>
 800382a:	2308      	movs	r3, #8
 800382c:	e7b0      	b.n	8003790 <_strtol_l.isra.0+0x60>
 800382e:	2c30      	cmp	r4, #48	; 0x30
 8003830:	d0a3      	beq.n	800377a <_strtol_l.isra.0+0x4a>
 8003832:	230a      	movs	r3, #10
 8003834:	e7ac      	b.n	8003790 <_strtol_l.isra.0+0x60>
 8003836:	bf00      	nop
 8003838:	08004e29 	.word	0x08004e29

0800383c <strtol>:
 800383c:	4613      	mov	r3, r2
 800383e:	460a      	mov	r2, r1
 8003840:	4601      	mov	r1, r0
 8003842:	4802      	ldr	r0, [pc, #8]	; (800384c <strtol+0x10>)
 8003844:	6800      	ldr	r0, [r0, #0]
 8003846:	f7ff bf73 	b.w	8003730 <_strtol_l.isra.0>
 800384a:	bf00      	nop
 800384c:	2000000c 	.word	0x2000000c

08003850 <__assert_func>:
 8003850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003852:	4614      	mov	r4, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <__assert_func+0x2c>)
 8003858:	4605      	mov	r5, r0
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68d8      	ldr	r0, [r3, #12]
 800385e:	b14c      	cbz	r4, 8003874 <__assert_func+0x24>
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <__assert_func+0x30>)
 8003862:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003866:	9100      	str	r1, [sp, #0]
 8003868:	462b      	mov	r3, r5
 800386a:	4906      	ldr	r1, [pc, #24]	; (8003884 <__assert_func+0x34>)
 800386c:	f000 f80e 	bl	800388c <fiprintf>
 8003870:	f000 fde6 	bl	8004440 <abort>
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <__assert_func+0x38>)
 8003876:	461c      	mov	r4, r3
 8003878:	e7f3      	b.n	8003862 <__assert_func+0x12>
 800387a:	bf00      	nop
 800387c:	2000000c 	.word	0x2000000c
 8003880:	08004dec 	.word	0x08004dec
 8003884:	08004df9 	.word	0x08004df9
 8003888:	08004e27 	.word	0x08004e27

0800388c <fiprintf>:
 800388c:	b40e      	push	{r1, r2, r3}
 800388e:	b503      	push	{r0, r1, lr}
 8003890:	4601      	mov	r1, r0
 8003892:	ab03      	add	r3, sp, #12
 8003894:	4805      	ldr	r0, [pc, #20]	; (80038ac <fiprintf+0x20>)
 8003896:	f853 2b04 	ldr.w	r2, [r3], #4
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	f000 fa39 	bl	8003d14 <_vfiprintf_r>
 80038a2:	b002      	add	sp, #8
 80038a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038a8:	b003      	add	sp, #12
 80038aa:	4770      	bx	lr
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <malloc>:
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <malloc+0xc>)
 80038b2:	4601      	mov	r1, r0
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	f000 b84f 	b.w	8003958 <_malloc_r>
 80038ba:	bf00      	nop
 80038bc:	2000000c 	.word	0x2000000c

080038c0 <_free_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4605      	mov	r5, r0
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d043      	beq.n	8003950 <_free_r+0x90>
 80038c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038cc:	1f0c      	subs	r4, r1, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bfb8      	it	lt
 80038d2:	18e4      	addlt	r4, r4, r3
 80038d4:	f001 f810 	bl	80048f8 <__malloc_lock>
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <_free_r+0x94>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	4610      	mov	r0, r2
 80038de:	b933      	cbnz	r3, 80038ee <_free_r+0x2e>
 80038e0:	6063      	str	r3, [r4, #4]
 80038e2:	6014      	str	r4, [r2, #0]
 80038e4:	4628      	mov	r0, r5
 80038e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ea:	f001 b80b 	b.w	8004904 <__malloc_unlock>
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	d90a      	bls.n	8003908 <_free_r+0x48>
 80038f2:	6821      	ldr	r1, [r4, #0]
 80038f4:	1862      	adds	r2, r4, r1
 80038f6:	4293      	cmp	r3, r2
 80038f8:	bf01      	itttt	eq
 80038fa:	681a      	ldreq	r2, [r3, #0]
 80038fc:	685b      	ldreq	r3, [r3, #4]
 80038fe:	1852      	addeq	r2, r2, r1
 8003900:	6022      	streq	r2, [r4, #0]
 8003902:	6063      	str	r3, [r4, #4]
 8003904:	6004      	str	r4, [r0, #0]
 8003906:	e7ed      	b.n	80038e4 <_free_r+0x24>
 8003908:	461a      	mov	r2, r3
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	b10b      	cbz	r3, 8003912 <_free_r+0x52>
 800390e:	42a3      	cmp	r3, r4
 8003910:	d9fa      	bls.n	8003908 <_free_r+0x48>
 8003912:	6811      	ldr	r1, [r2, #0]
 8003914:	1850      	adds	r0, r2, r1
 8003916:	42a0      	cmp	r0, r4
 8003918:	d10b      	bne.n	8003932 <_free_r+0x72>
 800391a:	6820      	ldr	r0, [r4, #0]
 800391c:	4401      	add	r1, r0
 800391e:	1850      	adds	r0, r2, r1
 8003920:	4283      	cmp	r3, r0
 8003922:	6011      	str	r1, [r2, #0]
 8003924:	d1de      	bne.n	80038e4 <_free_r+0x24>
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4401      	add	r1, r0
 800392c:	6011      	str	r1, [r2, #0]
 800392e:	6053      	str	r3, [r2, #4]
 8003930:	e7d8      	b.n	80038e4 <_free_r+0x24>
 8003932:	d902      	bls.n	800393a <_free_r+0x7a>
 8003934:	230c      	movs	r3, #12
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	e7d4      	b.n	80038e4 <_free_r+0x24>
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	1821      	adds	r1, r4, r0
 800393e:	428b      	cmp	r3, r1
 8003940:	bf01      	itttt	eq
 8003942:	6819      	ldreq	r1, [r3, #0]
 8003944:	685b      	ldreq	r3, [r3, #4]
 8003946:	1809      	addeq	r1, r1, r0
 8003948:	6021      	streq	r1, [r4, #0]
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	6054      	str	r4, [r2, #4]
 800394e:	e7c9      	b.n	80038e4 <_free_r+0x24>
 8003950:	bd38      	pop	{r3, r4, r5, pc}
 8003952:	bf00      	nop
 8003954:	20000090 	.word	0x20000090

08003958 <_malloc_r>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	1ccd      	adds	r5, r1, #3
 800395c:	f025 0503 	bic.w	r5, r5, #3
 8003960:	3508      	adds	r5, #8
 8003962:	2d0c      	cmp	r5, #12
 8003964:	bf38      	it	cc
 8003966:	250c      	movcc	r5, #12
 8003968:	2d00      	cmp	r5, #0
 800396a:	4606      	mov	r6, r0
 800396c:	db01      	blt.n	8003972 <_malloc_r+0x1a>
 800396e:	42a9      	cmp	r1, r5
 8003970:	d903      	bls.n	800397a <_malloc_r+0x22>
 8003972:	230c      	movs	r3, #12
 8003974:	6033      	str	r3, [r6, #0]
 8003976:	2000      	movs	r0, #0
 8003978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800397a:	f000 ffbd 	bl	80048f8 <__malloc_lock>
 800397e:	4921      	ldr	r1, [pc, #132]	; (8003a04 <_malloc_r+0xac>)
 8003980:	680a      	ldr	r2, [r1, #0]
 8003982:	4614      	mov	r4, r2
 8003984:	b99c      	cbnz	r4, 80039ae <_malloc_r+0x56>
 8003986:	4f20      	ldr	r7, [pc, #128]	; (8003a08 <_malloc_r+0xb0>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b923      	cbnz	r3, 8003996 <_malloc_r+0x3e>
 800398c:	4621      	mov	r1, r4
 800398e:	4630      	mov	r0, r6
 8003990:	f000 fc86 	bl	80042a0 <_sbrk_r>
 8003994:	6038      	str	r0, [r7, #0]
 8003996:	4629      	mov	r1, r5
 8003998:	4630      	mov	r0, r6
 800399a:	f000 fc81 	bl	80042a0 <_sbrk_r>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d123      	bne.n	80039ea <_malloc_r+0x92>
 80039a2:	230c      	movs	r3, #12
 80039a4:	4630      	mov	r0, r6
 80039a6:	6033      	str	r3, [r6, #0]
 80039a8:	f000 ffac 	bl	8004904 <__malloc_unlock>
 80039ac:	e7e3      	b.n	8003976 <_malloc_r+0x1e>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	1b5b      	subs	r3, r3, r5
 80039b2:	d417      	bmi.n	80039e4 <_malloc_r+0x8c>
 80039b4:	2b0b      	cmp	r3, #11
 80039b6:	d903      	bls.n	80039c0 <_malloc_r+0x68>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	441c      	add	r4, r3
 80039bc:	6025      	str	r5, [r4, #0]
 80039be:	e004      	b.n	80039ca <_malloc_r+0x72>
 80039c0:	6863      	ldr	r3, [r4, #4]
 80039c2:	42a2      	cmp	r2, r4
 80039c4:	bf0c      	ite	eq
 80039c6:	600b      	streq	r3, [r1, #0]
 80039c8:	6053      	strne	r3, [r2, #4]
 80039ca:	4630      	mov	r0, r6
 80039cc:	f000 ff9a 	bl	8004904 <__malloc_unlock>
 80039d0:	f104 000b 	add.w	r0, r4, #11
 80039d4:	1d23      	adds	r3, r4, #4
 80039d6:	f020 0007 	bic.w	r0, r0, #7
 80039da:	1ac2      	subs	r2, r0, r3
 80039dc:	d0cc      	beq.n	8003978 <_malloc_r+0x20>
 80039de:	1a1b      	subs	r3, r3, r0
 80039e0:	50a3      	str	r3, [r4, r2]
 80039e2:	e7c9      	b.n	8003978 <_malloc_r+0x20>
 80039e4:	4622      	mov	r2, r4
 80039e6:	6864      	ldr	r4, [r4, #4]
 80039e8:	e7cc      	b.n	8003984 <_malloc_r+0x2c>
 80039ea:	1cc4      	adds	r4, r0, #3
 80039ec:	f024 0403 	bic.w	r4, r4, #3
 80039f0:	42a0      	cmp	r0, r4
 80039f2:	d0e3      	beq.n	80039bc <_malloc_r+0x64>
 80039f4:	1a21      	subs	r1, r4, r0
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 fc52 	bl	80042a0 <_sbrk_r>
 80039fc:	3001      	adds	r0, #1
 80039fe:	d1dd      	bne.n	80039bc <_malloc_r+0x64>
 8003a00:	e7cf      	b.n	80039a2 <_malloc_r+0x4a>
 8003a02:	bf00      	nop
 8003a04:	20000090 	.word	0x20000090
 8003a08:	20000094 	.word	0x20000094

08003a0c <__ssputs_r>:
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	688e      	ldr	r6, [r1, #8]
 8003a12:	4682      	mov	sl, r0
 8003a14:	429e      	cmp	r6, r3
 8003a16:	460c      	mov	r4, r1
 8003a18:	4690      	mov	r8, r2
 8003a1a:	461f      	mov	r7, r3
 8003a1c:	d838      	bhi.n	8003a90 <__ssputs_r+0x84>
 8003a1e:	898a      	ldrh	r2, [r1, #12]
 8003a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a24:	d032      	beq.n	8003a8c <__ssputs_r+0x80>
 8003a26:	6825      	ldr	r5, [r4, #0]
 8003a28:	6909      	ldr	r1, [r1, #16]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	eba5 0901 	sub.w	r9, r5, r1
 8003a30:	6965      	ldr	r5, [r4, #20]
 8003a32:	444b      	add	r3, r9
 8003a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a3c:	106d      	asrs	r5, r5, #1
 8003a3e:	429d      	cmp	r5, r3
 8003a40:	bf38      	it	cc
 8003a42:	461d      	movcc	r5, r3
 8003a44:	0553      	lsls	r3, r2, #21
 8003a46:	d531      	bpl.n	8003aac <__ssputs_r+0xa0>
 8003a48:	4629      	mov	r1, r5
 8003a4a:	f7ff ff85 	bl	8003958 <_malloc_r>
 8003a4e:	4606      	mov	r6, r0
 8003a50:	b950      	cbnz	r0, 8003a68 <__ssputs_r+0x5c>
 8003a52:	230c      	movs	r3, #12
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	f8ca 3000 	str.w	r3, [sl]
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a68:	464a      	mov	r2, r9
 8003a6a:	6921      	ldr	r1, [r4, #16]
 8003a6c:	f000 ff1c 	bl	80048a8 <memcpy>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	6126      	str	r6, [r4, #16]
 8003a7e:	444e      	add	r6, r9
 8003a80:	6026      	str	r6, [r4, #0]
 8003a82:	463e      	mov	r6, r7
 8003a84:	6165      	str	r5, [r4, #20]
 8003a86:	eba5 0509 	sub.w	r5, r5, r9
 8003a8a:	60a5      	str	r5, [r4, #8]
 8003a8c:	42be      	cmp	r6, r7
 8003a8e:	d900      	bls.n	8003a92 <__ssputs_r+0x86>
 8003a90:	463e      	mov	r6, r7
 8003a92:	4632      	mov	r2, r6
 8003a94:	4641      	mov	r1, r8
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	f000 ff14 	bl	80048c4 <memmove>
 8003a9c:	68a3      	ldr	r3, [r4, #8]
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	1b9b      	subs	r3, r3, r6
 8003aa2:	4432      	add	r2, r6
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	60a3      	str	r3, [r4, #8]
 8003aa8:	6022      	str	r2, [r4, #0]
 8003aaa:	e7db      	b.n	8003a64 <__ssputs_r+0x58>
 8003aac:	462a      	mov	r2, r5
 8003aae:	f000 ff2f 	bl	8004910 <_realloc_r>
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d1e1      	bne.n	8003a7c <__ssputs_r+0x70>
 8003ab8:	4650      	mov	r0, sl
 8003aba:	6921      	ldr	r1, [r4, #16]
 8003abc:	f7ff ff00 	bl	80038c0 <_free_r>
 8003ac0:	e7c7      	b.n	8003a52 <__ssputs_r+0x46>
	...

08003ac4 <_svfiprintf_r>:
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	4698      	mov	r8, r3
 8003aca:	898b      	ldrh	r3, [r1, #12]
 8003acc:	4607      	mov	r7, r0
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	460d      	mov	r5, r1
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	b09d      	sub	sp, #116	; 0x74
 8003ad6:	d50e      	bpl.n	8003af6 <_svfiprintf_r+0x32>
 8003ad8:	690b      	ldr	r3, [r1, #16]
 8003ada:	b963      	cbnz	r3, 8003af6 <_svfiprintf_r+0x32>
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	f7ff ff3b 	bl	8003958 <_malloc_r>
 8003ae2:	6028      	str	r0, [r5, #0]
 8003ae4:	6128      	str	r0, [r5, #16]
 8003ae6:	b920      	cbnz	r0, 8003af2 <_svfiprintf_r+0x2e>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	e0d1      	b.n	8003c96 <_svfiprintf_r+0x1d2>
 8003af2:	2340      	movs	r3, #64	; 0x40
 8003af4:	616b      	str	r3, [r5, #20]
 8003af6:	2300      	movs	r3, #0
 8003af8:	9309      	str	r3, [sp, #36]	; 0x24
 8003afa:	2320      	movs	r3, #32
 8003afc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b00:	2330      	movs	r3, #48	; 0x30
 8003b02:	f04f 0901 	mov.w	r9, #1
 8003b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cb0 <_svfiprintf_r+0x1ec>
 8003b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b12:	4623      	mov	r3, r4
 8003b14:	469a      	mov	sl, r3
 8003b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b1a:	b10a      	cbz	r2, 8003b20 <_svfiprintf_r+0x5c>
 8003b1c:	2a25      	cmp	r2, #37	; 0x25
 8003b1e:	d1f9      	bne.n	8003b14 <_svfiprintf_r+0x50>
 8003b20:	ebba 0b04 	subs.w	fp, sl, r4
 8003b24:	d00b      	beq.n	8003b3e <_svfiprintf_r+0x7a>
 8003b26:	465b      	mov	r3, fp
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f7ff ff6d 	bl	8003a0c <__ssputs_r>
 8003b32:	3001      	adds	r0, #1
 8003b34:	f000 80aa 	beq.w	8003c8c <_svfiprintf_r+0x1c8>
 8003b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b3a:	445a      	add	r2, fp
 8003b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 80a2 	beq.w	8003c8c <_svfiprintf_r+0x1c8>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b52:	f10a 0a01 	add.w	sl, sl, #1
 8003b56:	9304      	str	r3, [sp, #16]
 8003b58:	9307      	str	r3, [sp, #28]
 8003b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b60:	4654      	mov	r4, sl
 8003b62:	2205      	movs	r2, #5
 8003b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b68:	4851      	ldr	r0, [pc, #324]	; (8003cb0 <_svfiprintf_r+0x1ec>)
 8003b6a:	f000 fe8f 	bl	800488c <memchr>
 8003b6e:	9a04      	ldr	r2, [sp, #16]
 8003b70:	b9d8      	cbnz	r0, 8003baa <_svfiprintf_r+0xe6>
 8003b72:	06d0      	lsls	r0, r2, #27
 8003b74:	bf44      	itt	mi
 8003b76:	2320      	movmi	r3, #32
 8003b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b7c:	0711      	lsls	r1, r2, #28
 8003b7e:	bf44      	itt	mi
 8003b80:	232b      	movmi	r3, #43	; 0x2b
 8003b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b86:	f89a 3000 	ldrb.w	r3, [sl]
 8003b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b8c:	d015      	beq.n	8003bba <_svfiprintf_r+0xf6>
 8003b8e:	4654      	mov	r4, sl
 8003b90:	2000      	movs	r0, #0
 8003b92:	f04f 0c0a 	mov.w	ip, #10
 8003b96:	9a07      	ldr	r2, [sp, #28]
 8003b98:	4621      	mov	r1, r4
 8003b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b9e:	3b30      	subs	r3, #48	; 0x30
 8003ba0:	2b09      	cmp	r3, #9
 8003ba2:	d94e      	bls.n	8003c42 <_svfiprintf_r+0x17e>
 8003ba4:	b1b0      	cbz	r0, 8003bd4 <_svfiprintf_r+0x110>
 8003ba6:	9207      	str	r2, [sp, #28]
 8003ba8:	e014      	b.n	8003bd4 <_svfiprintf_r+0x110>
 8003baa:	eba0 0308 	sub.w	r3, r0, r8
 8003bae:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	46a2      	mov	sl, r4
 8003bb6:	9304      	str	r3, [sp, #16]
 8003bb8:	e7d2      	b.n	8003b60 <_svfiprintf_r+0x9c>
 8003bba:	9b03      	ldr	r3, [sp, #12]
 8003bbc:	1d19      	adds	r1, r3, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	9103      	str	r1, [sp, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bfbb      	ittet	lt
 8003bc6:	425b      	neglt	r3, r3
 8003bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8003bcc:	9307      	strge	r3, [sp, #28]
 8003bce:	9307      	strlt	r3, [sp, #28]
 8003bd0:	bfb8      	it	lt
 8003bd2:	9204      	strlt	r2, [sp, #16]
 8003bd4:	7823      	ldrb	r3, [r4, #0]
 8003bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8003bd8:	d10c      	bne.n	8003bf4 <_svfiprintf_r+0x130>
 8003bda:	7863      	ldrb	r3, [r4, #1]
 8003bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bde:	d135      	bne.n	8003c4c <_svfiprintf_r+0x188>
 8003be0:	9b03      	ldr	r3, [sp, #12]
 8003be2:	3402      	adds	r4, #2
 8003be4:	1d1a      	adds	r2, r3, #4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	9203      	str	r2, [sp, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bfb8      	it	lt
 8003bee:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bf2:	9305      	str	r3, [sp, #20]
 8003bf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cc0 <_svfiprintf_r+0x1fc>
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4650      	mov	r0, sl
 8003bfc:	7821      	ldrb	r1, [r4, #0]
 8003bfe:	f000 fe45 	bl	800488c <memchr>
 8003c02:	b140      	cbz	r0, 8003c16 <_svfiprintf_r+0x152>
 8003c04:	2340      	movs	r3, #64	; 0x40
 8003c06:	eba0 000a 	sub.w	r0, r0, sl
 8003c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c0e:	9b04      	ldr	r3, [sp, #16]
 8003c10:	3401      	adds	r4, #1
 8003c12:	4303      	orrs	r3, r0
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1a:	2206      	movs	r2, #6
 8003c1c:	4825      	ldr	r0, [pc, #148]	; (8003cb4 <_svfiprintf_r+0x1f0>)
 8003c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c22:	f000 fe33 	bl	800488c <memchr>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d038      	beq.n	8003c9c <_svfiprintf_r+0x1d8>
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <_svfiprintf_r+0x1f4>)
 8003c2c:	bb1b      	cbnz	r3, 8003c76 <_svfiprintf_r+0x1b2>
 8003c2e:	9b03      	ldr	r3, [sp, #12]
 8003c30:	3307      	adds	r3, #7
 8003c32:	f023 0307 	bic.w	r3, r3, #7
 8003c36:	3308      	adds	r3, #8
 8003c38:	9303      	str	r3, [sp, #12]
 8003c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c3c:	4433      	add	r3, r6
 8003c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c40:	e767      	b.n	8003b12 <_svfiprintf_r+0x4e>
 8003c42:	460c      	mov	r4, r1
 8003c44:	2001      	movs	r0, #1
 8003c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c4a:	e7a5      	b.n	8003b98 <_svfiprintf_r+0xd4>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f04f 0c0a 	mov.w	ip, #10
 8003c52:	4619      	mov	r1, r3
 8003c54:	3401      	adds	r4, #1
 8003c56:	9305      	str	r3, [sp, #20]
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c5e:	3a30      	subs	r2, #48	; 0x30
 8003c60:	2a09      	cmp	r2, #9
 8003c62:	d903      	bls.n	8003c6c <_svfiprintf_r+0x1a8>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0c5      	beq.n	8003bf4 <_svfiprintf_r+0x130>
 8003c68:	9105      	str	r1, [sp, #20]
 8003c6a:	e7c3      	b.n	8003bf4 <_svfiprintf_r+0x130>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	2301      	movs	r3, #1
 8003c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c74:	e7f0      	b.n	8003c58 <_svfiprintf_r+0x194>
 8003c76:	ab03      	add	r3, sp, #12
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	462a      	mov	r2, r5
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <_svfiprintf_r+0x1f8>)
 8003c80:	a904      	add	r1, sp, #16
 8003c82:	f3af 8000 	nop.w
 8003c86:	1c42      	adds	r2, r0, #1
 8003c88:	4606      	mov	r6, r0
 8003c8a:	d1d6      	bne.n	8003c3a <_svfiprintf_r+0x176>
 8003c8c:	89ab      	ldrh	r3, [r5, #12]
 8003c8e:	065b      	lsls	r3, r3, #25
 8003c90:	f53f af2c 	bmi.w	8003aec <_svfiprintf_r+0x28>
 8003c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c96:	b01d      	add	sp, #116	; 0x74
 8003c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9c:	ab03      	add	r3, sp, #12
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	462a      	mov	r2, r5
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <_svfiprintf_r+0x1f8>)
 8003ca6:	a904      	add	r1, sp, #16
 8003ca8:	f000 f9d4 	bl	8004054 <_printf_i>
 8003cac:	e7eb      	b.n	8003c86 <_svfiprintf_r+0x1c2>
 8003cae:	bf00      	nop
 8003cb0:	08004f29 	.word	0x08004f29
 8003cb4:	08004f33 	.word	0x08004f33
 8003cb8:	00000000 	.word	0x00000000
 8003cbc:	08003a0d 	.word	0x08003a0d
 8003cc0:	08004f2f 	.word	0x08004f2f

08003cc4 <__sfputc_r>:
 8003cc4:	6893      	ldr	r3, [r2, #8]
 8003cc6:	b410      	push	{r4}
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	6093      	str	r3, [r2, #8]
 8003cce:	da07      	bge.n	8003ce0 <__sfputc_r+0x1c>
 8003cd0:	6994      	ldr	r4, [r2, #24]
 8003cd2:	42a3      	cmp	r3, r4
 8003cd4:	db01      	blt.n	8003cda <__sfputc_r+0x16>
 8003cd6:	290a      	cmp	r1, #10
 8003cd8:	d102      	bne.n	8003ce0 <__sfputc_r+0x1c>
 8003cda:	bc10      	pop	{r4}
 8003cdc:	f000 baf0 	b.w	80042c0 <__swbuf_r>
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	1c58      	adds	r0, r3, #1
 8003ce4:	6010      	str	r0, [r2, #0]
 8003ce6:	7019      	strb	r1, [r3, #0]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	bc10      	pop	{r4}
 8003cec:	4770      	bx	lr

08003cee <__sfputs_r>:
 8003cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf0:	4606      	mov	r6, r0
 8003cf2:	460f      	mov	r7, r1
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	18d5      	adds	r5, r2, r3
 8003cf8:	42ac      	cmp	r4, r5
 8003cfa:	d101      	bne.n	8003d00 <__sfputs_r+0x12>
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e007      	b.n	8003d10 <__sfputs_r+0x22>
 8003d00:	463a      	mov	r2, r7
 8003d02:	4630      	mov	r0, r6
 8003d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d08:	f7ff ffdc 	bl	8003cc4 <__sfputc_r>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d1f3      	bne.n	8003cf8 <__sfputs_r+0xa>
 8003d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d14 <_vfiprintf_r>:
 8003d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d18:	460d      	mov	r5, r1
 8003d1a:	4614      	mov	r4, r2
 8003d1c:	4698      	mov	r8, r3
 8003d1e:	4606      	mov	r6, r0
 8003d20:	b09d      	sub	sp, #116	; 0x74
 8003d22:	b118      	cbz	r0, 8003d2c <_vfiprintf_r+0x18>
 8003d24:	6983      	ldr	r3, [r0, #24]
 8003d26:	b90b      	cbnz	r3, 8003d2c <_vfiprintf_r+0x18>
 8003d28:	f000 fcac 	bl	8004684 <__sinit>
 8003d2c:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <_vfiprintf_r+0x240>)
 8003d2e:	429d      	cmp	r5, r3
 8003d30:	d11b      	bne.n	8003d6a <_vfiprintf_r+0x56>
 8003d32:	6875      	ldr	r5, [r6, #4]
 8003d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d36:	07d9      	lsls	r1, r3, #31
 8003d38:	d405      	bmi.n	8003d46 <_vfiprintf_r+0x32>
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	059a      	lsls	r2, r3, #22
 8003d3e:	d402      	bmi.n	8003d46 <_vfiprintf_r+0x32>
 8003d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d42:	f000 fd3d 	bl	80047c0 <__retarget_lock_acquire_recursive>
 8003d46:	89ab      	ldrh	r3, [r5, #12]
 8003d48:	071b      	lsls	r3, r3, #28
 8003d4a:	d501      	bpl.n	8003d50 <_vfiprintf_r+0x3c>
 8003d4c:	692b      	ldr	r3, [r5, #16]
 8003d4e:	b9eb      	cbnz	r3, 8003d8c <_vfiprintf_r+0x78>
 8003d50:	4629      	mov	r1, r5
 8003d52:	4630      	mov	r0, r6
 8003d54:	f000 fb06 	bl	8004364 <__swsetup_r>
 8003d58:	b1c0      	cbz	r0, 8003d8c <_vfiprintf_r+0x78>
 8003d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d5c:	07dc      	lsls	r4, r3, #31
 8003d5e:	d50e      	bpl.n	8003d7e <_vfiprintf_r+0x6a>
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	b01d      	add	sp, #116	; 0x74
 8003d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6a:	4b7b      	ldr	r3, [pc, #492]	; (8003f58 <_vfiprintf_r+0x244>)
 8003d6c:	429d      	cmp	r5, r3
 8003d6e:	d101      	bne.n	8003d74 <_vfiprintf_r+0x60>
 8003d70:	68b5      	ldr	r5, [r6, #8]
 8003d72:	e7df      	b.n	8003d34 <_vfiprintf_r+0x20>
 8003d74:	4b79      	ldr	r3, [pc, #484]	; (8003f5c <_vfiprintf_r+0x248>)
 8003d76:	429d      	cmp	r5, r3
 8003d78:	bf08      	it	eq
 8003d7a:	68f5      	ldreq	r5, [r6, #12]
 8003d7c:	e7da      	b.n	8003d34 <_vfiprintf_r+0x20>
 8003d7e:	89ab      	ldrh	r3, [r5, #12]
 8003d80:	0598      	lsls	r0, r3, #22
 8003d82:	d4ed      	bmi.n	8003d60 <_vfiprintf_r+0x4c>
 8003d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d86:	f000 fd1c 	bl	80047c2 <__retarget_lock_release_recursive>
 8003d8a:	e7e9      	b.n	8003d60 <_vfiprintf_r+0x4c>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d90:	2320      	movs	r3, #32
 8003d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d96:	2330      	movs	r3, #48	; 0x30
 8003d98:	f04f 0901 	mov.w	r9, #1
 8003d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003f60 <_vfiprintf_r+0x24c>
 8003da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003da8:	4623      	mov	r3, r4
 8003daa:	469a      	mov	sl, r3
 8003dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db0:	b10a      	cbz	r2, 8003db6 <_vfiprintf_r+0xa2>
 8003db2:	2a25      	cmp	r2, #37	; 0x25
 8003db4:	d1f9      	bne.n	8003daa <_vfiprintf_r+0x96>
 8003db6:	ebba 0b04 	subs.w	fp, sl, r4
 8003dba:	d00b      	beq.n	8003dd4 <_vfiprintf_r+0xc0>
 8003dbc:	465b      	mov	r3, fp
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f7ff ff93 	bl	8003cee <__sfputs_r>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f000 80aa 	beq.w	8003f22 <_vfiprintf_r+0x20e>
 8003dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dd0:	445a      	add	r2, fp
 8003dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8003dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a2 	beq.w	8003f22 <_vfiprintf_r+0x20e>
 8003dde:	2300      	movs	r3, #0
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003de8:	f10a 0a01 	add.w	sl, sl, #1
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	9307      	str	r3, [sp, #28]
 8003df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003df4:	931a      	str	r3, [sp, #104]	; 0x68
 8003df6:	4654      	mov	r4, sl
 8003df8:	2205      	movs	r2, #5
 8003dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dfe:	4858      	ldr	r0, [pc, #352]	; (8003f60 <_vfiprintf_r+0x24c>)
 8003e00:	f000 fd44 	bl	800488c <memchr>
 8003e04:	9a04      	ldr	r2, [sp, #16]
 8003e06:	b9d8      	cbnz	r0, 8003e40 <_vfiprintf_r+0x12c>
 8003e08:	06d1      	lsls	r1, r2, #27
 8003e0a:	bf44      	itt	mi
 8003e0c:	2320      	movmi	r3, #32
 8003e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e12:	0713      	lsls	r3, r2, #28
 8003e14:	bf44      	itt	mi
 8003e16:	232b      	movmi	r3, #43	; 0x2b
 8003e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e20:	2b2a      	cmp	r3, #42	; 0x2a
 8003e22:	d015      	beq.n	8003e50 <_vfiprintf_r+0x13c>
 8003e24:	4654      	mov	r4, sl
 8003e26:	2000      	movs	r0, #0
 8003e28:	f04f 0c0a 	mov.w	ip, #10
 8003e2c:	9a07      	ldr	r2, [sp, #28]
 8003e2e:	4621      	mov	r1, r4
 8003e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e34:	3b30      	subs	r3, #48	; 0x30
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d94e      	bls.n	8003ed8 <_vfiprintf_r+0x1c4>
 8003e3a:	b1b0      	cbz	r0, 8003e6a <_vfiprintf_r+0x156>
 8003e3c:	9207      	str	r2, [sp, #28]
 8003e3e:	e014      	b.n	8003e6a <_vfiprintf_r+0x156>
 8003e40:	eba0 0308 	sub.w	r3, r0, r8
 8003e44:	fa09 f303 	lsl.w	r3, r9, r3
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	46a2      	mov	sl, r4
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	e7d2      	b.n	8003df6 <_vfiprintf_r+0xe2>
 8003e50:	9b03      	ldr	r3, [sp, #12]
 8003e52:	1d19      	adds	r1, r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	9103      	str	r1, [sp, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bfbb      	ittet	lt
 8003e5c:	425b      	neglt	r3, r3
 8003e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e62:	9307      	strge	r3, [sp, #28]
 8003e64:	9307      	strlt	r3, [sp, #28]
 8003e66:	bfb8      	it	lt
 8003e68:	9204      	strlt	r2, [sp, #16]
 8003e6a:	7823      	ldrb	r3, [r4, #0]
 8003e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e6e:	d10c      	bne.n	8003e8a <_vfiprintf_r+0x176>
 8003e70:	7863      	ldrb	r3, [r4, #1]
 8003e72:	2b2a      	cmp	r3, #42	; 0x2a
 8003e74:	d135      	bne.n	8003ee2 <_vfiprintf_r+0x1ce>
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	3402      	adds	r4, #2
 8003e7a:	1d1a      	adds	r2, r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	9203      	str	r2, [sp, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bfb8      	it	lt
 8003e84:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e88:	9305      	str	r3, [sp, #20]
 8003e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f70 <_vfiprintf_r+0x25c>
 8003e8e:	2203      	movs	r2, #3
 8003e90:	4650      	mov	r0, sl
 8003e92:	7821      	ldrb	r1, [r4, #0]
 8003e94:	f000 fcfa 	bl	800488c <memchr>
 8003e98:	b140      	cbz	r0, 8003eac <_vfiprintf_r+0x198>
 8003e9a:	2340      	movs	r3, #64	; 0x40
 8003e9c:	eba0 000a 	sub.w	r0, r0, sl
 8003ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ea4:	9b04      	ldr	r3, [sp, #16]
 8003ea6:	3401      	adds	r4, #1
 8003ea8:	4303      	orrs	r3, r0
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb0:	2206      	movs	r2, #6
 8003eb2:	482c      	ldr	r0, [pc, #176]	; (8003f64 <_vfiprintf_r+0x250>)
 8003eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eb8:	f000 fce8 	bl	800488c <memchr>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d03f      	beq.n	8003f40 <_vfiprintf_r+0x22c>
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <_vfiprintf_r+0x254>)
 8003ec2:	bb1b      	cbnz	r3, 8003f0c <_vfiprintf_r+0x1f8>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	f023 0307 	bic.w	r3, r3, #7
 8003ecc:	3308      	adds	r3, #8
 8003ece:	9303      	str	r3, [sp, #12]
 8003ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed2:	443b      	add	r3, r7
 8003ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed6:	e767      	b.n	8003da8 <_vfiprintf_r+0x94>
 8003ed8:	460c      	mov	r4, r1
 8003eda:	2001      	movs	r0, #1
 8003edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ee0:	e7a5      	b.n	8003e2e <_vfiprintf_r+0x11a>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f04f 0c0a 	mov.w	ip, #10
 8003ee8:	4619      	mov	r1, r3
 8003eea:	3401      	adds	r4, #1
 8003eec:	9305      	str	r3, [sp, #20]
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef4:	3a30      	subs	r2, #48	; 0x30
 8003ef6:	2a09      	cmp	r2, #9
 8003ef8:	d903      	bls.n	8003f02 <_vfiprintf_r+0x1ee>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0c5      	beq.n	8003e8a <_vfiprintf_r+0x176>
 8003efe:	9105      	str	r1, [sp, #20]
 8003f00:	e7c3      	b.n	8003e8a <_vfiprintf_r+0x176>
 8003f02:	4604      	mov	r4, r0
 8003f04:	2301      	movs	r3, #1
 8003f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f0a:	e7f0      	b.n	8003eee <_vfiprintf_r+0x1da>
 8003f0c:	ab03      	add	r3, sp, #12
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	462a      	mov	r2, r5
 8003f12:	4630      	mov	r0, r6
 8003f14:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <_vfiprintf_r+0x258>)
 8003f16:	a904      	add	r1, sp, #16
 8003f18:	f3af 8000 	nop.w
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	1c78      	adds	r0, r7, #1
 8003f20:	d1d6      	bne.n	8003ed0 <_vfiprintf_r+0x1bc>
 8003f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f24:	07d9      	lsls	r1, r3, #31
 8003f26:	d405      	bmi.n	8003f34 <_vfiprintf_r+0x220>
 8003f28:	89ab      	ldrh	r3, [r5, #12]
 8003f2a:	059a      	lsls	r2, r3, #22
 8003f2c:	d402      	bmi.n	8003f34 <_vfiprintf_r+0x220>
 8003f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f30:	f000 fc47 	bl	80047c2 <__retarget_lock_release_recursive>
 8003f34:	89ab      	ldrh	r3, [r5, #12]
 8003f36:	065b      	lsls	r3, r3, #25
 8003f38:	f53f af12 	bmi.w	8003d60 <_vfiprintf_r+0x4c>
 8003f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f3e:	e711      	b.n	8003d64 <_vfiprintf_r+0x50>
 8003f40:	ab03      	add	r3, sp, #12
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	462a      	mov	r2, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <_vfiprintf_r+0x258>)
 8003f4a:	a904      	add	r1, sp, #16
 8003f4c:	f000 f882 	bl	8004054 <_printf_i>
 8003f50:	e7e4      	b.n	8003f1c <_vfiprintf_r+0x208>
 8003f52:	bf00      	nop
 8003f54:	08004f7c 	.word	0x08004f7c
 8003f58:	08004f9c 	.word	0x08004f9c
 8003f5c:	08004f5c 	.word	0x08004f5c
 8003f60:	08004f29 	.word	0x08004f29
 8003f64:	08004f33 	.word	0x08004f33
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	08003cef 	.word	0x08003cef
 8003f70:	08004f2f 	.word	0x08004f2f

08003f74 <_printf_common>:
 8003f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	4616      	mov	r6, r2
 8003f7a:	4699      	mov	r9, r3
 8003f7c:	688a      	ldr	r2, [r1, #8]
 8003f7e:	690b      	ldr	r3, [r1, #16]
 8003f80:	4607      	mov	r7, r0
 8003f82:	4293      	cmp	r3, r2
 8003f84:	bfb8      	it	lt
 8003f86:	4613      	movlt	r3, r2
 8003f88:	6033      	str	r3, [r6, #0]
 8003f8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f8e:	460c      	mov	r4, r1
 8003f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f94:	b10a      	cbz	r2, 8003f9a <_printf_common+0x26>
 8003f96:	3301      	adds	r3, #1
 8003f98:	6033      	str	r3, [r6, #0]
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	0699      	lsls	r1, r3, #26
 8003f9e:	bf42      	ittt	mi
 8003fa0:	6833      	ldrmi	r3, [r6, #0]
 8003fa2:	3302      	addmi	r3, #2
 8003fa4:	6033      	strmi	r3, [r6, #0]
 8003fa6:	6825      	ldr	r5, [r4, #0]
 8003fa8:	f015 0506 	ands.w	r5, r5, #6
 8003fac:	d106      	bne.n	8003fbc <_printf_common+0x48>
 8003fae:	f104 0a19 	add.w	sl, r4, #25
 8003fb2:	68e3      	ldr	r3, [r4, #12]
 8003fb4:	6832      	ldr	r2, [r6, #0]
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	42ab      	cmp	r3, r5
 8003fba:	dc28      	bgt.n	800400e <_printf_common+0x9a>
 8003fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fc0:	1e13      	subs	r3, r2, #0
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	bf18      	it	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	0692      	lsls	r2, r2, #26
 8003fca:	d42d      	bmi.n	8004028 <_printf_common+0xb4>
 8003fcc:	4649      	mov	r1, r9
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fd4:	47c0      	blx	r8
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d020      	beq.n	800401c <_printf_common+0xa8>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	68e5      	ldr	r5, [r4, #12]
 8003fde:	f003 0306 	and.w	r3, r3, #6
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	bf18      	it	ne
 8003fe6:	2500      	movne	r5, #0
 8003fe8:	6832      	ldr	r2, [r6, #0]
 8003fea:	f04f 0600 	mov.w	r6, #0
 8003fee:	68a3      	ldr	r3, [r4, #8]
 8003ff0:	bf08      	it	eq
 8003ff2:	1aad      	subeq	r5, r5, r2
 8003ff4:	6922      	ldr	r2, [r4, #16]
 8003ff6:	bf08      	it	eq
 8003ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	bfc4      	itt	gt
 8004000:	1a9b      	subgt	r3, r3, r2
 8004002:	18ed      	addgt	r5, r5, r3
 8004004:	341a      	adds	r4, #26
 8004006:	42b5      	cmp	r5, r6
 8004008:	d11a      	bne.n	8004040 <_printf_common+0xcc>
 800400a:	2000      	movs	r0, #0
 800400c:	e008      	b.n	8004020 <_printf_common+0xac>
 800400e:	2301      	movs	r3, #1
 8004010:	4652      	mov	r2, sl
 8004012:	4649      	mov	r1, r9
 8004014:	4638      	mov	r0, r7
 8004016:	47c0      	blx	r8
 8004018:	3001      	adds	r0, #1
 800401a:	d103      	bne.n	8004024 <_printf_common+0xb0>
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004024:	3501      	adds	r5, #1
 8004026:	e7c4      	b.n	8003fb2 <_printf_common+0x3e>
 8004028:	2030      	movs	r0, #48	; 0x30
 800402a:	18e1      	adds	r1, r4, r3
 800402c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004036:	4422      	add	r2, r4
 8004038:	3302      	adds	r3, #2
 800403a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800403e:	e7c5      	b.n	8003fcc <_printf_common+0x58>
 8004040:	2301      	movs	r3, #1
 8004042:	4622      	mov	r2, r4
 8004044:	4649      	mov	r1, r9
 8004046:	4638      	mov	r0, r7
 8004048:	47c0      	blx	r8
 800404a:	3001      	adds	r0, #1
 800404c:	d0e6      	beq.n	800401c <_printf_common+0xa8>
 800404e:	3601      	adds	r6, #1
 8004050:	e7d9      	b.n	8004006 <_printf_common+0x92>
	...

08004054 <_printf_i>:
 8004054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004058:	460c      	mov	r4, r1
 800405a:	7e27      	ldrb	r7, [r4, #24]
 800405c:	4691      	mov	r9, r2
 800405e:	2f78      	cmp	r7, #120	; 0x78
 8004060:	4680      	mov	r8, r0
 8004062:	469a      	mov	sl, r3
 8004064:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004066:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800406a:	d807      	bhi.n	800407c <_printf_i+0x28>
 800406c:	2f62      	cmp	r7, #98	; 0x62
 800406e:	d80a      	bhi.n	8004086 <_printf_i+0x32>
 8004070:	2f00      	cmp	r7, #0
 8004072:	f000 80d9 	beq.w	8004228 <_printf_i+0x1d4>
 8004076:	2f58      	cmp	r7, #88	; 0x58
 8004078:	f000 80a4 	beq.w	80041c4 <_printf_i+0x170>
 800407c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004084:	e03a      	b.n	80040fc <_printf_i+0xa8>
 8004086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800408a:	2b15      	cmp	r3, #21
 800408c:	d8f6      	bhi.n	800407c <_printf_i+0x28>
 800408e:	a001      	add	r0, pc, #4	; (adr r0, 8004094 <_printf_i+0x40>)
 8004090:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004094:	080040ed 	.word	0x080040ed
 8004098:	08004101 	.word	0x08004101
 800409c:	0800407d 	.word	0x0800407d
 80040a0:	0800407d 	.word	0x0800407d
 80040a4:	0800407d 	.word	0x0800407d
 80040a8:	0800407d 	.word	0x0800407d
 80040ac:	08004101 	.word	0x08004101
 80040b0:	0800407d 	.word	0x0800407d
 80040b4:	0800407d 	.word	0x0800407d
 80040b8:	0800407d 	.word	0x0800407d
 80040bc:	0800407d 	.word	0x0800407d
 80040c0:	0800420f 	.word	0x0800420f
 80040c4:	08004131 	.word	0x08004131
 80040c8:	080041f1 	.word	0x080041f1
 80040cc:	0800407d 	.word	0x0800407d
 80040d0:	0800407d 	.word	0x0800407d
 80040d4:	08004231 	.word	0x08004231
 80040d8:	0800407d 	.word	0x0800407d
 80040dc:	08004131 	.word	0x08004131
 80040e0:	0800407d 	.word	0x0800407d
 80040e4:	0800407d 	.word	0x0800407d
 80040e8:	080041f9 	.word	0x080041f9
 80040ec:	680b      	ldr	r3, [r1, #0]
 80040ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	600a      	str	r2, [r1, #0]
 80040f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0a4      	b.n	800424a <_printf_i+0x1f6>
 8004100:	6825      	ldr	r5, [r4, #0]
 8004102:	6808      	ldr	r0, [r1, #0]
 8004104:	062e      	lsls	r6, r5, #24
 8004106:	f100 0304 	add.w	r3, r0, #4
 800410a:	d50a      	bpl.n	8004122 <_printf_i+0xce>
 800410c:	6805      	ldr	r5, [r0, #0]
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	2d00      	cmp	r5, #0
 8004112:	da03      	bge.n	800411c <_printf_i+0xc8>
 8004114:	232d      	movs	r3, #45	; 0x2d
 8004116:	426d      	negs	r5, r5
 8004118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411c:	230a      	movs	r3, #10
 800411e:	485e      	ldr	r0, [pc, #376]	; (8004298 <_printf_i+0x244>)
 8004120:	e019      	b.n	8004156 <_printf_i+0x102>
 8004122:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004126:	6805      	ldr	r5, [r0, #0]
 8004128:	600b      	str	r3, [r1, #0]
 800412a:	bf18      	it	ne
 800412c:	b22d      	sxthne	r5, r5
 800412e:	e7ef      	b.n	8004110 <_printf_i+0xbc>
 8004130:	680b      	ldr	r3, [r1, #0]
 8004132:	6825      	ldr	r5, [r4, #0]
 8004134:	1d18      	adds	r0, r3, #4
 8004136:	6008      	str	r0, [r1, #0]
 8004138:	0628      	lsls	r0, r5, #24
 800413a:	d501      	bpl.n	8004140 <_printf_i+0xec>
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	e002      	b.n	8004146 <_printf_i+0xf2>
 8004140:	0669      	lsls	r1, r5, #25
 8004142:	d5fb      	bpl.n	800413c <_printf_i+0xe8>
 8004144:	881d      	ldrh	r5, [r3, #0]
 8004146:	2f6f      	cmp	r7, #111	; 0x6f
 8004148:	bf0c      	ite	eq
 800414a:	2308      	moveq	r3, #8
 800414c:	230a      	movne	r3, #10
 800414e:	4852      	ldr	r0, [pc, #328]	; (8004298 <_printf_i+0x244>)
 8004150:	2100      	movs	r1, #0
 8004152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004156:	6866      	ldr	r6, [r4, #4]
 8004158:	2e00      	cmp	r6, #0
 800415a:	bfa8      	it	ge
 800415c:	6821      	ldrge	r1, [r4, #0]
 800415e:	60a6      	str	r6, [r4, #8]
 8004160:	bfa4      	itt	ge
 8004162:	f021 0104 	bicge.w	r1, r1, #4
 8004166:	6021      	strge	r1, [r4, #0]
 8004168:	b90d      	cbnz	r5, 800416e <_printf_i+0x11a>
 800416a:	2e00      	cmp	r6, #0
 800416c:	d04d      	beq.n	800420a <_printf_i+0x1b6>
 800416e:	4616      	mov	r6, r2
 8004170:	fbb5 f1f3 	udiv	r1, r5, r3
 8004174:	fb03 5711 	mls	r7, r3, r1, r5
 8004178:	5dc7      	ldrb	r7, [r0, r7]
 800417a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800417e:	462f      	mov	r7, r5
 8004180:	42bb      	cmp	r3, r7
 8004182:	460d      	mov	r5, r1
 8004184:	d9f4      	bls.n	8004170 <_printf_i+0x11c>
 8004186:	2b08      	cmp	r3, #8
 8004188:	d10b      	bne.n	80041a2 <_printf_i+0x14e>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	07df      	lsls	r7, r3, #31
 800418e:	d508      	bpl.n	80041a2 <_printf_i+0x14e>
 8004190:	6923      	ldr	r3, [r4, #16]
 8004192:	6861      	ldr	r1, [r4, #4]
 8004194:	4299      	cmp	r1, r3
 8004196:	bfde      	ittt	le
 8004198:	2330      	movle	r3, #48	; 0x30
 800419a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800419e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041a2:	1b92      	subs	r2, r2, r6
 80041a4:	6122      	str	r2, [r4, #16]
 80041a6:	464b      	mov	r3, r9
 80041a8:	4621      	mov	r1, r4
 80041aa:	4640      	mov	r0, r8
 80041ac:	f8cd a000 	str.w	sl, [sp]
 80041b0:	aa03      	add	r2, sp, #12
 80041b2:	f7ff fedf 	bl	8003f74 <_printf_common>
 80041b6:	3001      	adds	r0, #1
 80041b8:	d14c      	bne.n	8004254 <_printf_i+0x200>
 80041ba:	f04f 30ff 	mov.w	r0, #4294967295
 80041be:	b004      	add	sp, #16
 80041c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c4:	4834      	ldr	r0, [pc, #208]	; (8004298 <_printf_i+0x244>)
 80041c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041ca:	680e      	ldr	r6, [r1, #0]
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80041d2:	061f      	lsls	r7, r3, #24
 80041d4:	600e      	str	r6, [r1, #0]
 80041d6:	d514      	bpl.n	8004202 <_printf_i+0x1ae>
 80041d8:	07d9      	lsls	r1, r3, #31
 80041da:	bf44      	itt	mi
 80041dc:	f043 0320 	orrmi.w	r3, r3, #32
 80041e0:	6023      	strmi	r3, [r4, #0]
 80041e2:	b91d      	cbnz	r5, 80041ec <_printf_i+0x198>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	f023 0320 	bic.w	r3, r3, #32
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	2310      	movs	r3, #16
 80041ee:	e7af      	b.n	8004150 <_printf_i+0xfc>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f043 0320 	orr.w	r3, r3, #32
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	2378      	movs	r3, #120	; 0x78
 80041fa:	4828      	ldr	r0, [pc, #160]	; (800429c <_printf_i+0x248>)
 80041fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004200:	e7e3      	b.n	80041ca <_printf_i+0x176>
 8004202:	065e      	lsls	r6, r3, #25
 8004204:	bf48      	it	mi
 8004206:	b2ad      	uxthmi	r5, r5
 8004208:	e7e6      	b.n	80041d8 <_printf_i+0x184>
 800420a:	4616      	mov	r6, r2
 800420c:	e7bb      	b.n	8004186 <_printf_i+0x132>
 800420e:	680b      	ldr	r3, [r1, #0]
 8004210:	6826      	ldr	r6, [r4, #0]
 8004212:	1d1d      	adds	r5, r3, #4
 8004214:	6960      	ldr	r0, [r4, #20]
 8004216:	600d      	str	r5, [r1, #0]
 8004218:	0635      	lsls	r5, r6, #24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	d501      	bpl.n	8004222 <_printf_i+0x1ce>
 800421e:	6018      	str	r0, [r3, #0]
 8004220:	e002      	b.n	8004228 <_printf_i+0x1d4>
 8004222:	0671      	lsls	r1, r6, #25
 8004224:	d5fb      	bpl.n	800421e <_printf_i+0x1ca>
 8004226:	8018      	strh	r0, [r3, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	4616      	mov	r6, r2
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	e7ba      	b.n	80041a6 <_printf_i+0x152>
 8004230:	680b      	ldr	r3, [r1, #0]
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	600a      	str	r2, [r1, #0]
 8004236:	681e      	ldr	r6, [r3, #0]
 8004238:	2100      	movs	r1, #0
 800423a:	4630      	mov	r0, r6
 800423c:	6862      	ldr	r2, [r4, #4]
 800423e:	f000 fb25 	bl	800488c <memchr>
 8004242:	b108      	cbz	r0, 8004248 <_printf_i+0x1f4>
 8004244:	1b80      	subs	r0, r0, r6
 8004246:	6060      	str	r0, [r4, #4]
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	6123      	str	r3, [r4, #16]
 800424c:	2300      	movs	r3, #0
 800424e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004252:	e7a8      	b.n	80041a6 <_printf_i+0x152>
 8004254:	4632      	mov	r2, r6
 8004256:	4649      	mov	r1, r9
 8004258:	4640      	mov	r0, r8
 800425a:	6923      	ldr	r3, [r4, #16]
 800425c:	47d0      	blx	sl
 800425e:	3001      	adds	r0, #1
 8004260:	d0ab      	beq.n	80041ba <_printf_i+0x166>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	079b      	lsls	r3, r3, #30
 8004266:	d413      	bmi.n	8004290 <_printf_i+0x23c>
 8004268:	68e0      	ldr	r0, [r4, #12]
 800426a:	9b03      	ldr	r3, [sp, #12]
 800426c:	4298      	cmp	r0, r3
 800426e:	bfb8      	it	lt
 8004270:	4618      	movlt	r0, r3
 8004272:	e7a4      	b.n	80041be <_printf_i+0x16a>
 8004274:	2301      	movs	r3, #1
 8004276:	4632      	mov	r2, r6
 8004278:	4649      	mov	r1, r9
 800427a:	4640      	mov	r0, r8
 800427c:	47d0      	blx	sl
 800427e:	3001      	adds	r0, #1
 8004280:	d09b      	beq.n	80041ba <_printf_i+0x166>
 8004282:	3501      	adds	r5, #1
 8004284:	68e3      	ldr	r3, [r4, #12]
 8004286:	9903      	ldr	r1, [sp, #12]
 8004288:	1a5b      	subs	r3, r3, r1
 800428a:	42ab      	cmp	r3, r5
 800428c:	dcf2      	bgt.n	8004274 <_printf_i+0x220>
 800428e:	e7eb      	b.n	8004268 <_printf_i+0x214>
 8004290:	2500      	movs	r5, #0
 8004292:	f104 0619 	add.w	r6, r4, #25
 8004296:	e7f5      	b.n	8004284 <_printf_i+0x230>
 8004298:	08004f3a 	.word	0x08004f3a
 800429c:	08004f4b 	.word	0x08004f4b

080042a0 <_sbrk_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	2300      	movs	r3, #0
 80042a4:	4d05      	ldr	r5, [pc, #20]	; (80042bc <_sbrk_r+0x1c>)
 80042a6:	4604      	mov	r4, r0
 80042a8:	4608      	mov	r0, r1
 80042aa:	602b      	str	r3, [r5, #0]
 80042ac:	f7fc fb10 	bl	80008d0 <_sbrk>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_sbrk_r+0x1a>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_sbrk_r+0x1a>
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	2000026c 	.word	0x2000026c

080042c0 <__swbuf_r>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	460e      	mov	r6, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	4605      	mov	r5, r0
 80042c8:	b118      	cbz	r0, 80042d2 <__swbuf_r+0x12>
 80042ca:	6983      	ldr	r3, [r0, #24]
 80042cc:	b90b      	cbnz	r3, 80042d2 <__swbuf_r+0x12>
 80042ce:	f000 f9d9 	bl	8004684 <__sinit>
 80042d2:	4b21      	ldr	r3, [pc, #132]	; (8004358 <__swbuf_r+0x98>)
 80042d4:	429c      	cmp	r4, r3
 80042d6:	d12b      	bne.n	8004330 <__swbuf_r+0x70>
 80042d8:	686c      	ldr	r4, [r5, #4]
 80042da:	69a3      	ldr	r3, [r4, #24]
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	071a      	lsls	r2, r3, #28
 80042e2:	d52f      	bpl.n	8004344 <__swbuf_r+0x84>
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	b36b      	cbz	r3, 8004344 <__swbuf_r+0x84>
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	6820      	ldr	r0, [r4, #0]
 80042ec:	b2f6      	uxtb	r6, r6
 80042ee:	1ac0      	subs	r0, r0, r3
 80042f0:	6963      	ldr	r3, [r4, #20]
 80042f2:	4637      	mov	r7, r6
 80042f4:	4283      	cmp	r3, r0
 80042f6:	dc04      	bgt.n	8004302 <__swbuf_r+0x42>
 80042f8:	4621      	mov	r1, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 f92e 	bl	800455c <_fflush_r>
 8004300:	bb30      	cbnz	r0, 8004350 <__swbuf_r+0x90>
 8004302:	68a3      	ldr	r3, [r4, #8]
 8004304:	3001      	adds	r0, #1
 8004306:	3b01      	subs	r3, #1
 8004308:	60a3      	str	r3, [r4, #8]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	6022      	str	r2, [r4, #0]
 8004310:	701e      	strb	r6, [r3, #0]
 8004312:	6963      	ldr	r3, [r4, #20]
 8004314:	4283      	cmp	r3, r0
 8004316:	d004      	beq.n	8004322 <__swbuf_r+0x62>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	07db      	lsls	r3, r3, #31
 800431c:	d506      	bpl.n	800432c <__swbuf_r+0x6c>
 800431e:	2e0a      	cmp	r6, #10
 8004320:	d104      	bne.n	800432c <__swbuf_r+0x6c>
 8004322:	4621      	mov	r1, r4
 8004324:	4628      	mov	r0, r5
 8004326:	f000 f919 	bl	800455c <_fflush_r>
 800432a:	b988      	cbnz	r0, 8004350 <__swbuf_r+0x90>
 800432c:	4638      	mov	r0, r7
 800432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <__swbuf_r+0x9c>)
 8004332:	429c      	cmp	r4, r3
 8004334:	d101      	bne.n	800433a <__swbuf_r+0x7a>
 8004336:	68ac      	ldr	r4, [r5, #8]
 8004338:	e7cf      	b.n	80042da <__swbuf_r+0x1a>
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <__swbuf_r+0xa0>)
 800433c:	429c      	cmp	r4, r3
 800433e:	bf08      	it	eq
 8004340:	68ec      	ldreq	r4, [r5, #12]
 8004342:	e7ca      	b.n	80042da <__swbuf_r+0x1a>
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f80c 	bl	8004364 <__swsetup_r>
 800434c:	2800      	cmp	r0, #0
 800434e:	d0cb      	beq.n	80042e8 <__swbuf_r+0x28>
 8004350:	f04f 37ff 	mov.w	r7, #4294967295
 8004354:	e7ea      	b.n	800432c <__swbuf_r+0x6c>
 8004356:	bf00      	nop
 8004358:	08004f7c 	.word	0x08004f7c
 800435c:	08004f9c 	.word	0x08004f9c
 8004360:	08004f5c 	.word	0x08004f5c

08004364 <__swsetup_r>:
 8004364:	4b32      	ldr	r3, [pc, #200]	; (8004430 <__swsetup_r+0xcc>)
 8004366:	b570      	push	{r4, r5, r6, lr}
 8004368:	681d      	ldr	r5, [r3, #0]
 800436a:	4606      	mov	r6, r0
 800436c:	460c      	mov	r4, r1
 800436e:	b125      	cbz	r5, 800437a <__swsetup_r+0x16>
 8004370:	69ab      	ldr	r3, [r5, #24]
 8004372:	b913      	cbnz	r3, 800437a <__swsetup_r+0x16>
 8004374:	4628      	mov	r0, r5
 8004376:	f000 f985 	bl	8004684 <__sinit>
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <__swsetup_r+0xd0>)
 800437c:	429c      	cmp	r4, r3
 800437e:	d10f      	bne.n	80043a0 <__swsetup_r+0x3c>
 8004380:	686c      	ldr	r4, [r5, #4]
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004388:	0719      	lsls	r1, r3, #28
 800438a:	d42c      	bmi.n	80043e6 <__swsetup_r+0x82>
 800438c:	06dd      	lsls	r5, r3, #27
 800438e:	d411      	bmi.n	80043b4 <__swsetup_r+0x50>
 8004390:	2309      	movs	r3, #9
 8004392:	6033      	str	r3, [r6, #0]
 8004394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	e03e      	b.n	800441e <__swsetup_r+0xba>
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <__swsetup_r+0xd4>)
 80043a2:	429c      	cmp	r4, r3
 80043a4:	d101      	bne.n	80043aa <__swsetup_r+0x46>
 80043a6:	68ac      	ldr	r4, [r5, #8]
 80043a8:	e7eb      	b.n	8004382 <__swsetup_r+0x1e>
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <__swsetup_r+0xd8>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	bf08      	it	eq
 80043b0:	68ec      	ldreq	r4, [r5, #12]
 80043b2:	e7e6      	b.n	8004382 <__swsetup_r+0x1e>
 80043b4:	0758      	lsls	r0, r3, #29
 80043b6:	d512      	bpl.n	80043de <__swsetup_r+0x7a>
 80043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ba:	b141      	cbz	r1, 80043ce <__swsetup_r+0x6a>
 80043bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c0:	4299      	cmp	r1, r3
 80043c2:	d002      	beq.n	80043ca <__swsetup_r+0x66>
 80043c4:	4630      	mov	r0, r6
 80043c6:	f7ff fa7b 	bl	80038c0 <_free_r>
 80043ca:	2300      	movs	r3, #0
 80043cc:	6363      	str	r3, [r4, #52]	; 0x34
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	2300      	movs	r3, #0
 80043d8:	6063      	str	r3, [r4, #4]
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	81a3      	strh	r3, [r4, #12]
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	b94b      	cbnz	r3, 80043fe <__swsetup_r+0x9a>
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d003      	beq.n	80043fe <__swsetup_r+0x9a>
 80043f6:	4621      	mov	r1, r4
 80043f8:	4630      	mov	r0, r6
 80043fa:	f000 fa07 	bl	800480c <__smakebuf_r>
 80043fe:	89a0      	ldrh	r0, [r4, #12]
 8004400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004404:	f010 0301 	ands.w	r3, r0, #1
 8004408:	d00a      	beq.n	8004420 <__swsetup_r+0xbc>
 800440a:	2300      	movs	r3, #0
 800440c:	60a3      	str	r3, [r4, #8]
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	425b      	negs	r3, r3
 8004412:	61a3      	str	r3, [r4, #24]
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	b943      	cbnz	r3, 800442a <__swsetup_r+0xc6>
 8004418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800441c:	d1ba      	bne.n	8004394 <__swsetup_r+0x30>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	0781      	lsls	r1, r0, #30
 8004422:	bf58      	it	pl
 8004424:	6963      	ldrpl	r3, [r4, #20]
 8004426:	60a3      	str	r3, [r4, #8]
 8004428:	e7f4      	b.n	8004414 <__swsetup_r+0xb0>
 800442a:	2000      	movs	r0, #0
 800442c:	e7f7      	b.n	800441e <__swsetup_r+0xba>
 800442e:	bf00      	nop
 8004430:	2000000c 	.word	0x2000000c
 8004434:	08004f7c 	.word	0x08004f7c
 8004438:	08004f9c 	.word	0x08004f9c
 800443c:	08004f5c 	.word	0x08004f5c

08004440 <abort>:
 8004440:	2006      	movs	r0, #6
 8004442:	b508      	push	{r3, lr}
 8004444:	f000 fab2 	bl	80049ac <raise>
 8004448:	2001      	movs	r0, #1
 800444a:	f7fc f9ce 	bl	80007ea <_exit>
	...

08004450 <__sflush_r>:
 8004450:	898a      	ldrh	r2, [r1, #12]
 8004452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	4605      	mov	r5, r0
 8004458:	0710      	lsls	r0, r2, #28
 800445a:	460c      	mov	r4, r1
 800445c:	d458      	bmi.n	8004510 <__sflush_r+0xc0>
 800445e:	684b      	ldr	r3, [r1, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	dc05      	bgt.n	8004470 <__sflush_r+0x20>
 8004464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	dc02      	bgt.n	8004470 <__sflush_r+0x20>
 800446a:	2000      	movs	r0, #0
 800446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004472:	2e00      	cmp	r6, #0
 8004474:	d0f9      	beq.n	800446a <__sflush_r+0x1a>
 8004476:	2300      	movs	r3, #0
 8004478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800447c:	682f      	ldr	r7, [r5, #0]
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	d032      	beq.n	80044e8 <__sflush_r+0x98>
 8004482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	075a      	lsls	r2, r3, #29
 8004488:	d505      	bpl.n	8004496 <__sflush_r+0x46>
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	1ac0      	subs	r0, r0, r3
 800448e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004490:	b10b      	cbz	r3, 8004496 <__sflush_r+0x46>
 8004492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004494:	1ac0      	subs	r0, r0, r3
 8004496:	2300      	movs	r3, #0
 8004498:	4602      	mov	r2, r0
 800449a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800449c:	4628      	mov	r0, r5
 800449e:	6a21      	ldr	r1, [r4, #32]
 80044a0:	47b0      	blx	r6
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	d106      	bne.n	80044b6 <__sflush_r+0x66>
 80044a8:	6829      	ldr	r1, [r5, #0]
 80044aa:	291d      	cmp	r1, #29
 80044ac:	d82c      	bhi.n	8004508 <__sflush_r+0xb8>
 80044ae:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <__sflush_r+0x108>)
 80044b0:	40ca      	lsrs	r2, r1
 80044b2:	07d6      	lsls	r6, r2, #31
 80044b4:	d528      	bpl.n	8004508 <__sflush_r+0xb8>
 80044b6:	2200      	movs	r2, #0
 80044b8:	6062      	str	r2, [r4, #4]
 80044ba:	6922      	ldr	r2, [r4, #16]
 80044bc:	04d9      	lsls	r1, r3, #19
 80044be:	6022      	str	r2, [r4, #0]
 80044c0:	d504      	bpl.n	80044cc <__sflush_r+0x7c>
 80044c2:	1c42      	adds	r2, r0, #1
 80044c4:	d101      	bne.n	80044ca <__sflush_r+0x7a>
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	b903      	cbnz	r3, 80044cc <__sflush_r+0x7c>
 80044ca:	6560      	str	r0, [r4, #84]	; 0x54
 80044cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ce:	602f      	str	r7, [r5, #0]
 80044d0:	2900      	cmp	r1, #0
 80044d2:	d0ca      	beq.n	800446a <__sflush_r+0x1a>
 80044d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044d8:	4299      	cmp	r1, r3
 80044da:	d002      	beq.n	80044e2 <__sflush_r+0x92>
 80044dc:	4628      	mov	r0, r5
 80044de:	f7ff f9ef 	bl	80038c0 <_free_r>
 80044e2:	2000      	movs	r0, #0
 80044e4:	6360      	str	r0, [r4, #52]	; 0x34
 80044e6:	e7c1      	b.n	800446c <__sflush_r+0x1c>
 80044e8:	6a21      	ldr	r1, [r4, #32]
 80044ea:	2301      	movs	r3, #1
 80044ec:	4628      	mov	r0, r5
 80044ee:	47b0      	blx	r6
 80044f0:	1c41      	adds	r1, r0, #1
 80044f2:	d1c7      	bne.n	8004484 <__sflush_r+0x34>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0c4      	beq.n	8004484 <__sflush_r+0x34>
 80044fa:	2b1d      	cmp	r3, #29
 80044fc:	d001      	beq.n	8004502 <__sflush_r+0xb2>
 80044fe:	2b16      	cmp	r3, #22
 8004500:	d101      	bne.n	8004506 <__sflush_r+0xb6>
 8004502:	602f      	str	r7, [r5, #0]
 8004504:	e7b1      	b.n	800446a <__sflush_r+0x1a>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	e7ad      	b.n	800446c <__sflush_r+0x1c>
 8004510:	690f      	ldr	r7, [r1, #16]
 8004512:	2f00      	cmp	r7, #0
 8004514:	d0a9      	beq.n	800446a <__sflush_r+0x1a>
 8004516:	0793      	lsls	r3, r2, #30
 8004518:	bf18      	it	ne
 800451a:	2300      	movne	r3, #0
 800451c:	680e      	ldr	r6, [r1, #0]
 800451e:	bf08      	it	eq
 8004520:	694b      	ldreq	r3, [r1, #20]
 8004522:	eba6 0807 	sub.w	r8, r6, r7
 8004526:	600f      	str	r7, [r1, #0]
 8004528:	608b      	str	r3, [r1, #8]
 800452a:	f1b8 0f00 	cmp.w	r8, #0
 800452e:	dd9c      	ble.n	800446a <__sflush_r+0x1a>
 8004530:	4643      	mov	r3, r8
 8004532:	463a      	mov	r2, r7
 8004534:	4628      	mov	r0, r5
 8004536:	6a21      	ldr	r1, [r4, #32]
 8004538:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800453a:	47b0      	blx	r6
 800453c:	2800      	cmp	r0, #0
 800453e:	dc06      	bgt.n	800454e <__sflush_r+0xfe>
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	f04f 30ff 	mov.w	r0, #4294967295
 8004546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454a:	81a3      	strh	r3, [r4, #12]
 800454c:	e78e      	b.n	800446c <__sflush_r+0x1c>
 800454e:	4407      	add	r7, r0
 8004550:	eba8 0800 	sub.w	r8, r8, r0
 8004554:	e7e9      	b.n	800452a <__sflush_r+0xda>
 8004556:	bf00      	nop
 8004558:	20400001 	.word	0x20400001

0800455c <_fflush_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	690b      	ldr	r3, [r1, #16]
 8004560:	4605      	mov	r5, r0
 8004562:	460c      	mov	r4, r1
 8004564:	b913      	cbnz	r3, 800456c <_fflush_r+0x10>
 8004566:	2500      	movs	r5, #0
 8004568:	4628      	mov	r0, r5
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	b118      	cbz	r0, 8004576 <_fflush_r+0x1a>
 800456e:	6983      	ldr	r3, [r0, #24]
 8004570:	b90b      	cbnz	r3, 8004576 <_fflush_r+0x1a>
 8004572:	f000 f887 	bl	8004684 <__sinit>
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <_fflush_r+0x6c>)
 8004578:	429c      	cmp	r4, r3
 800457a:	d11b      	bne.n	80045b4 <_fflush_r+0x58>
 800457c:	686c      	ldr	r4, [r5, #4]
 800457e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ef      	beq.n	8004566 <_fflush_r+0xa>
 8004586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004588:	07d0      	lsls	r0, r2, #31
 800458a:	d404      	bmi.n	8004596 <_fflush_r+0x3a>
 800458c:	0599      	lsls	r1, r3, #22
 800458e:	d402      	bmi.n	8004596 <_fflush_r+0x3a>
 8004590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004592:	f000 f915 	bl	80047c0 <__retarget_lock_acquire_recursive>
 8004596:	4628      	mov	r0, r5
 8004598:	4621      	mov	r1, r4
 800459a:	f7ff ff59 	bl	8004450 <__sflush_r>
 800459e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045a0:	4605      	mov	r5, r0
 80045a2:	07da      	lsls	r2, r3, #31
 80045a4:	d4e0      	bmi.n	8004568 <_fflush_r+0xc>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	059b      	lsls	r3, r3, #22
 80045aa:	d4dd      	bmi.n	8004568 <_fflush_r+0xc>
 80045ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ae:	f000 f908 	bl	80047c2 <__retarget_lock_release_recursive>
 80045b2:	e7d9      	b.n	8004568 <_fflush_r+0xc>
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <_fflush_r+0x70>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d101      	bne.n	80045be <_fflush_r+0x62>
 80045ba:	68ac      	ldr	r4, [r5, #8]
 80045bc:	e7df      	b.n	800457e <_fflush_r+0x22>
 80045be:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <_fflush_r+0x74>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	bf08      	it	eq
 80045c4:	68ec      	ldreq	r4, [r5, #12]
 80045c6:	e7da      	b.n	800457e <_fflush_r+0x22>
 80045c8:	08004f7c 	.word	0x08004f7c
 80045cc:	08004f9c 	.word	0x08004f9c
 80045d0:	08004f5c 	.word	0x08004f5c

080045d4 <std>:
 80045d4:	2300      	movs	r3, #0
 80045d6:	b510      	push	{r4, lr}
 80045d8:	4604      	mov	r4, r0
 80045da:	e9c0 3300 	strd	r3, r3, [r0]
 80045de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045e2:	6083      	str	r3, [r0, #8]
 80045e4:	8181      	strh	r1, [r0, #12]
 80045e6:	6643      	str	r3, [r0, #100]	; 0x64
 80045e8:	81c2      	strh	r2, [r0, #14]
 80045ea:	6183      	str	r3, [r0, #24]
 80045ec:	4619      	mov	r1, r3
 80045ee:	2208      	movs	r2, #8
 80045f0:	305c      	adds	r0, #92	; 0x5c
 80045f2:	f7ff f819 	bl	8003628 <memset>
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <std+0x38>)
 80045f8:	6224      	str	r4, [r4, #32]
 80045fa:	6263      	str	r3, [r4, #36]	; 0x24
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <std+0x3c>)
 80045fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <std+0x40>)
 8004602:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <std+0x44>)
 8004606:	6323      	str	r3, [r4, #48]	; 0x30
 8004608:	bd10      	pop	{r4, pc}
 800460a:	bf00      	nop
 800460c:	080049e5 	.word	0x080049e5
 8004610:	08004a07 	.word	0x08004a07
 8004614:	08004a3f 	.word	0x08004a3f
 8004618:	08004a63 	.word	0x08004a63

0800461c <_cleanup_r>:
 800461c:	4901      	ldr	r1, [pc, #4]	; (8004624 <_cleanup_r+0x8>)
 800461e:	f000 b8af 	b.w	8004780 <_fwalk_reent>
 8004622:	bf00      	nop
 8004624:	0800455d 	.word	0x0800455d

08004628 <__sfmoreglue>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	2568      	movs	r5, #104	; 0x68
 800462c:	1e4a      	subs	r2, r1, #1
 800462e:	4355      	muls	r5, r2
 8004630:	460e      	mov	r6, r1
 8004632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004636:	f7ff f98f 	bl	8003958 <_malloc_r>
 800463a:	4604      	mov	r4, r0
 800463c:	b140      	cbz	r0, 8004650 <__sfmoreglue+0x28>
 800463e:	2100      	movs	r1, #0
 8004640:	e9c0 1600 	strd	r1, r6, [r0]
 8004644:	300c      	adds	r0, #12
 8004646:	60a0      	str	r0, [r4, #8]
 8004648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800464c:	f7fe ffec 	bl	8003628 <memset>
 8004650:	4620      	mov	r0, r4
 8004652:	bd70      	pop	{r4, r5, r6, pc}

08004654 <__sfp_lock_acquire>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__sfp_lock_acquire+0x8>)
 8004656:	f000 b8b3 	b.w	80047c0 <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	20000268 	.word	0x20000268

08004660 <__sfp_lock_release>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__sfp_lock_release+0x8>)
 8004662:	f000 b8ae 	b.w	80047c2 <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	20000268 	.word	0x20000268

0800466c <__sinit_lock_acquire>:
 800466c:	4801      	ldr	r0, [pc, #4]	; (8004674 <__sinit_lock_acquire+0x8>)
 800466e:	f000 b8a7 	b.w	80047c0 <__retarget_lock_acquire_recursive>
 8004672:	bf00      	nop
 8004674:	20000263 	.word	0x20000263

08004678 <__sinit_lock_release>:
 8004678:	4801      	ldr	r0, [pc, #4]	; (8004680 <__sinit_lock_release+0x8>)
 800467a:	f000 b8a2 	b.w	80047c2 <__retarget_lock_release_recursive>
 800467e:	bf00      	nop
 8004680:	20000263 	.word	0x20000263

08004684 <__sinit>:
 8004684:	b510      	push	{r4, lr}
 8004686:	4604      	mov	r4, r0
 8004688:	f7ff fff0 	bl	800466c <__sinit_lock_acquire>
 800468c:	69a3      	ldr	r3, [r4, #24]
 800468e:	b11b      	cbz	r3, 8004698 <__sinit+0x14>
 8004690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004694:	f7ff bff0 	b.w	8004678 <__sinit_lock_release>
 8004698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800469c:	6523      	str	r3, [r4, #80]	; 0x50
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <__sinit+0x68>)
 80046a0:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <__sinit+0x6c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80046a6:	42a3      	cmp	r3, r4
 80046a8:	bf08      	it	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	4620      	mov	r0, r4
 80046ae:	bf08      	it	eq
 80046b0:	61a3      	streq	r3, [r4, #24]
 80046b2:	f000 f81f 	bl	80046f4 <__sfp>
 80046b6:	6060      	str	r0, [r4, #4]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 f81b 	bl	80046f4 <__sfp>
 80046be:	60a0      	str	r0, [r4, #8]
 80046c0:	4620      	mov	r0, r4
 80046c2:	f000 f817 	bl	80046f4 <__sfp>
 80046c6:	2200      	movs	r2, #0
 80046c8:	2104      	movs	r1, #4
 80046ca:	60e0      	str	r0, [r4, #12]
 80046cc:	6860      	ldr	r0, [r4, #4]
 80046ce:	f7ff ff81 	bl	80045d4 <std>
 80046d2:	2201      	movs	r2, #1
 80046d4:	2109      	movs	r1, #9
 80046d6:	68a0      	ldr	r0, [r4, #8]
 80046d8:	f7ff ff7c 	bl	80045d4 <std>
 80046dc:	2202      	movs	r2, #2
 80046de:	2112      	movs	r1, #18
 80046e0:	68e0      	ldr	r0, [r4, #12]
 80046e2:	f7ff ff77 	bl	80045d4 <std>
 80046e6:	2301      	movs	r3, #1
 80046e8:	61a3      	str	r3, [r4, #24]
 80046ea:	e7d1      	b.n	8004690 <__sinit+0xc>
 80046ec:	08004d70 	.word	0x08004d70
 80046f0:	0800461d 	.word	0x0800461d

080046f4 <__sfp>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	4607      	mov	r7, r0
 80046f8:	f7ff ffac 	bl	8004654 <__sfp_lock_acquire>
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <__sfp+0x84>)
 80046fe:	681e      	ldr	r6, [r3, #0]
 8004700:	69b3      	ldr	r3, [r6, #24]
 8004702:	b913      	cbnz	r3, 800470a <__sfp+0x16>
 8004704:	4630      	mov	r0, r6
 8004706:	f7ff ffbd 	bl	8004684 <__sinit>
 800470a:	3648      	adds	r6, #72	; 0x48
 800470c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004710:	3b01      	subs	r3, #1
 8004712:	d503      	bpl.n	800471c <__sfp+0x28>
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	b30b      	cbz	r3, 800475c <__sfp+0x68>
 8004718:	6836      	ldr	r6, [r6, #0]
 800471a:	e7f7      	b.n	800470c <__sfp+0x18>
 800471c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004720:	b9d5      	cbnz	r5, 8004758 <__sfp+0x64>
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <__sfp+0x88>)
 8004724:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004728:	60e3      	str	r3, [r4, #12]
 800472a:	6665      	str	r5, [r4, #100]	; 0x64
 800472c:	f000 f847 	bl	80047be <__retarget_lock_init_recursive>
 8004730:	f7ff ff96 	bl	8004660 <__sfp_lock_release>
 8004734:	2208      	movs	r2, #8
 8004736:	4629      	mov	r1, r5
 8004738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800473c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004740:	6025      	str	r5, [r4, #0]
 8004742:	61a5      	str	r5, [r4, #24]
 8004744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004748:	f7fe ff6e 	bl	8003628 <memset>
 800474c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004754:	4620      	mov	r0, r4
 8004756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004758:	3468      	adds	r4, #104	; 0x68
 800475a:	e7d9      	b.n	8004710 <__sfp+0x1c>
 800475c:	2104      	movs	r1, #4
 800475e:	4638      	mov	r0, r7
 8004760:	f7ff ff62 	bl	8004628 <__sfmoreglue>
 8004764:	4604      	mov	r4, r0
 8004766:	6030      	str	r0, [r6, #0]
 8004768:	2800      	cmp	r0, #0
 800476a:	d1d5      	bne.n	8004718 <__sfp+0x24>
 800476c:	f7ff ff78 	bl	8004660 <__sfp_lock_release>
 8004770:	230c      	movs	r3, #12
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	e7ee      	b.n	8004754 <__sfp+0x60>
 8004776:	bf00      	nop
 8004778:	08004d70 	.word	0x08004d70
 800477c:	ffff0001 	.word	0xffff0001

08004780 <_fwalk_reent>:
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004784:	4606      	mov	r6, r0
 8004786:	4688      	mov	r8, r1
 8004788:	2700      	movs	r7, #0
 800478a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800478e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004792:	f1b9 0901 	subs.w	r9, r9, #1
 8004796:	d505      	bpl.n	80047a4 <_fwalk_reent+0x24>
 8004798:	6824      	ldr	r4, [r4, #0]
 800479a:	2c00      	cmp	r4, #0
 800479c:	d1f7      	bne.n	800478e <_fwalk_reent+0xe>
 800479e:	4638      	mov	r0, r7
 80047a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a4:	89ab      	ldrh	r3, [r5, #12]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d907      	bls.n	80047ba <_fwalk_reent+0x3a>
 80047aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ae:	3301      	adds	r3, #1
 80047b0:	d003      	beq.n	80047ba <_fwalk_reent+0x3a>
 80047b2:	4629      	mov	r1, r5
 80047b4:	4630      	mov	r0, r6
 80047b6:	47c0      	blx	r8
 80047b8:	4307      	orrs	r7, r0
 80047ba:	3568      	adds	r5, #104	; 0x68
 80047bc:	e7e9      	b.n	8004792 <_fwalk_reent+0x12>

080047be <__retarget_lock_init_recursive>:
 80047be:	4770      	bx	lr

080047c0 <__retarget_lock_acquire_recursive>:
 80047c0:	4770      	bx	lr

080047c2 <__retarget_lock_release_recursive>:
 80047c2:	4770      	bx	lr

080047c4 <__swhatbuf_r>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	460e      	mov	r6, r1
 80047c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047cc:	4614      	mov	r4, r2
 80047ce:	2900      	cmp	r1, #0
 80047d0:	461d      	mov	r5, r3
 80047d2:	b096      	sub	sp, #88	; 0x58
 80047d4:	da07      	bge.n	80047e6 <__swhatbuf_r+0x22>
 80047d6:	2300      	movs	r3, #0
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	89b3      	ldrh	r3, [r6, #12]
 80047dc:	061a      	lsls	r2, r3, #24
 80047de:	d410      	bmi.n	8004802 <__swhatbuf_r+0x3e>
 80047e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e4:	e00e      	b.n	8004804 <__swhatbuf_r+0x40>
 80047e6:	466a      	mov	r2, sp
 80047e8:	f000 f962 	bl	8004ab0 <_fstat_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	dbf2      	blt.n	80047d6 <__swhatbuf_r+0x12>
 80047f0:	9a01      	ldr	r2, [sp, #4]
 80047f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047fa:	425a      	negs	r2, r3
 80047fc:	415a      	adcs	r2, r3
 80047fe:	602a      	str	r2, [r5, #0]
 8004800:	e7ee      	b.n	80047e0 <__swhatbuf_r+0x1c>
 8004802:	2340      	movs	r3, #64	; 0x40
 8004804:	2000      	movs	r0, #0
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	b016      	add	sp, #88	; 0x58
 800480a:	bd70      	pop	{r4, r5, r6, pc}

0800480c <__smakebuf_r>:
 800480c:	898b      	ldrh	r3, [r1, #12]
 800480e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004810:	079d      	lsls	r5, r3, #30
 8004812:	4606      	mov	r6, r0
 8004814:	460c      	mov	r4, r1
 8004816:	d507      	bpl.n	8004828 <__smakebuf_r+0x1c>
 8004818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	6123      	str	r3, [r4, #16]
 8004820:	2301      	movs	r3, #1
 8004822:	6163      	str	r3, [r4, #20]
 8004824:	b002      	add	sp, #8
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	466a      	mov	r2, sp
 800482a:	ab01      	add	r3, sp, #4
 800482c:	f7ff ffca 	bl	80047c4 <__swhatbuf_r>
 8004830:	9900      	ldr	r1, [sp, #0]
 8004832:	4605      	mov	r5, r0
 8004834:	4630      	mov	r0, r6
 8004836:	f7ff f88f 	bl	8003958 <_malloc_r>
 800483a:	b948      	cbnz	r0, 8004850 <__smakebuf_r+0x44>
 800483c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004840:	059a      	lsls	r2, r3, #22
 8004842:	d4ef      	bmi.n	8004824 <__smakebuf_r+0x18>
 8004844:	f023 0303 	bic.w	r3, r3, #3
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	e7e3      	b.n	8004818 <__smakebuf_r+0xc>
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <__smakebuf_r+0x7c>)
 8004852:	62b3      	str	r3, [r6, #40]	; 0x28
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	6020      	str	r0, [r4, #0]
 8004858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	9b00      	ldr	r3, [sp, #0]
 8004860:	6120      	str	r0, [r4, #16]
 8004862:	6163      	str	r3, [r4, #20]
 8004864:	9b01      	ldr	r3, [sp, #4]
 8004866:	b15b      	cbz	r3, 8004880 <__smakebuf_r+0x74>
 8004868:	4630      	mov	r0, r6
 800486a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800486e:	f000 f931 	bl	8004ad4 <_isatty_r>
 8004872:	b128      	cbz	r0, 8004880 <__smakebuf_r+0x74>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	89a0      	ldrh	r0, [r4, #12]
 8004882:	4305      	orrs	r5, r0
 8004884:	81a5      	strh	r5, [r4, #12]
 8004886:	e7cd      	b.n	8004824 <__smakebuf_r+0x18>
 8004888:	0800461d 	.word	0x0800461d

0800488c <memchr>:
 800488c:	4603      	mov	r3, r0
 800488e:	b510      	push	{r4, lr}
 8004890:	b2c9      	uxtb	r1, r1
 8004892:	4402      	add	r2, r0
 8004894:	4293      	cmp	r3, r2
 8004896:	4618      	mov	r0, r3
 8004898:	d101      	bne.n	800489e <memchr+0x12>
 800489a:	2000      	movs	r0, #0
 800489c:	e003      	b.n	80048a6 <memchr+0x1a>
 800489e:	7804      	ldrb	r4, [r0, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	428c      	cmp	r4, r1
 80048a4:	d1f6      	bne.n	8004894 <memchr+0x8>
 80048a6:	bd10      	pop	{r4, pc}

080048a8 <memcpy>:
 80048a8:	440a      	add	r2, r1
 80048aa:	4291      	cmp	r1, r2
 80048ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b0:	d100      	bne.n	80048b4 <memcpy+0xc>
 80048b2:	4770      	bx	lr
 80048b4:	b510      	push	{r4, lr}
 80048b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ba:	4291      	cmp	r1, r2
 80048bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c0:	d1f9      	bne.n	80048b6 <memcpy+0xe>
 80048c2:	bd10      	pop	{r4, pc}

080048c4 <memmove>:
 80048c4:	4288      	cmp	r0, r1
 80048c6:	b510      	push	{r4, lr}
 80048c8:	eb01 0402 	add.w	r4, r1, r2
 80048cc:	d902      	bls.n	80048d4 <memmove+0x10>
 80048ce:	4284      	cmp	r4, r0
 80048d0:	4623      	mov	r3, r4
 80048d2:	d807      	bhi.n	80048e4 <memmove+0x20>
 80048d4:	1e43      	subs	r3, r0, #1
 80048d6:	42a1      	cmp	r1, r4
 80048d8:	d008      	beq.n	80048ec <memmove+0x28>
 80048da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048e2:	e7f8      	b.n	80048d6 <memmove+0x12>
 80048e4:	4601      	mov	r1, r0
 80048e6:	4402      	add	r2, r0
 80048e8:	428a      	cmp	r2, r1
 80048ea:	d100      	bne.n	80048ee <memmove+0x2a>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048f6:	e7f7      	b.n	80048e8 <memmove+0x24>

080048f8 <__malloc_lock>:
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <__malloc_lock+0x8>)
 80048fa:	f7ff bf61 	b.w	80047c0 <__retarget_lock_acquire_recursive>
 80048fe:	bf00      	nop
 8004900:	20000264 	.word	0x20000264

08004904 <__malloc_unlock>:
 8004904:	4801      	ldr	r0, [pc, #4]	; (800490c <__malloc_unlock+0x8>)
 8004906:	f7ff bf5c 	b.w	80047c2 <__retarget_lock_release_recursive>
 800490a:	bf00      	nop
 800490c:	20000264 	.word	0x20000264

08004910 <_realloc_r>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	4607      	mov	r7, r0
 8004914:	4614      	mov	r4, r2
 8004916:	460e      	mov	r6, r1
 8004918:	b921      	cbnz	r1, 8004924 <_realloc_r+0x14>
 800491a:	4611      	mov	r1, r2
 800491c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004920:	f7ff b81a 	b.w	8003958 <_malloc_r>
 8004924:	b922      	cbnz	r2, 8004930 <_realloc_r+0x20>
 8004926:	f7fe ffcb 	bl	80038c0 <_free_r>
 800492a:	4625      	mov	r5, r4
 800492c:	4628      	mov	r0, r5
 800492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004930:	f000 f8f2 	bl	8004b18 <_malloc_usable_size_r>
 8004934:	42a0      	cmp	r0, r4
 8004936:	d20f      	bcs.n	8004958 <_realloc_r+0x48>
 8004938:	4621      	mov	r1, r4
 800493a:	4638      	mov	r0, r7
 800493c:	f7ff f80c 	bl	8003958 <_malloc_r>
 8004940:	4605      	mov	r5, r0
 8004942:	2800      	cmp	r0, #0
 8004944:	d0f2      	beq.n	800492c <_realloc_r+0x1c>
 8004946:	4631      	mov	r1, r6
 8004948:	4622      	mov	r2, r4
 800494a:	f7ff ffad 	bl	80048a8 <memcpy>
 800494e:	4631      	mov	r1, r6
 8004950:	4638      	mov	r0, r7
 8004952:	f7fe ffb5 	bl	80038c0 <_free_r>
 8004956:	e7e9      	b.n	800492c <_realloc_r+0x1c>
 8004958:	4635      	mov	r5, r6
 800495a:	e7e7      	b.n	800492c <_realloc_r+0x1c>

0800495c <_raise_r>:
 800495c:	291f      	cmp	r1, #31
 800495e:	b538      	push	{r3, r4, r5, lr}
 8004960:	4604      	mov	r4, r0
 8004962:	460d      	mov	r5, r1
 8004964:	d904      	bls.n	8004970 <_raise_r+0x14>
 8004966:	2316      	movs	r3, #22
 8004968:	6003      	str	r3, [r0, #0]
 800496a:	f04f 30ff 	mov.w	r0, #4294967295
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004972:	b112      	cbz	r2, 800497a <_raise_r+0x1e>
 8004974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004978:	b94b      	cbnz	r3, 800498e <_raise_r+0x32>
 800497a:	4620      	mov	r0, r4
 800497c:	f000 f830 	bl	80049e0 <_getpid_r>
 8004980:	462a      	mov	r2, r5
 8004982:	4601      	mov	r1, r0
 8004984:	4620      	mov	r0, r4
 8004986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498a:	f000 b817 	b.w	80049bc <_kill_r>
 800498e:	2b01      	cmp	r3, #1
 8004990:	d00a      	beq.n	80049a8 <_raise_r+0x4c>
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	d103      	bne.n	800499e <_raise_r+0x42>
 8004996:	2316      	movs	r3, #22
 8004998:	6003      	str	r3, [r0, #0]
 800499a:	2001      	movs	r0, #1
 800499c:	e7e7      	b.n	800496e <_raise_r+0x12>
 800499e:	2400      	movs	r4, #0
 80049a0:	4628      	mov	r0, r5
 80049a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049a6:	4798      	blx	r3
 80049a8:	2000      	movs	r0, #0
 80049aa:	e7e0      	b.n	800496e <_raise_r+0x12>

080049ac <raise>:
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <raise+0xc>)
 80049ae:	4601      	mov	r1, r0
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	f7ff bfd3 	b.w	800495c <_raise_r>
 80049b6:	bf00      	nop
 80049b8:	2000000c 	.word	0x2000000c

080049bc <_kill_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	2300      	movs	r3, #0
 80049c0:	4d06      	ldr	r5, [pc, #24]	; (80049dc <_kill_r+0x20>)
 80049c2:	4604      	mov	r4, r0
 80049c4:	4608      	mov	r0, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	f7fb fefe 	bl	80007ca <_kill>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	d102      	bne.n	80049d8 <_kill_r+0x1c>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	b103      	cbz	r3, 80049d8 <_kill_r+0x1c>
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
 80049da:	bf00      	nop
 80049dc:	2000026c 	.word	0x2000026c

080049e0 <_getpid_r>:
 80049e0:	f7fb beec 	b.w	80007bc <_getpid>

080049e4 <__sread>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	460c      	mov	r4, r1
 80049e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ec:	f000 f89c 	bl	8004b28 <_read_r>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	bfab      	itete	ge
 80049f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049f6:	89a3      	ldrhlt	r3, [r4, #12]
 80049f8:	181b      	addge	r3, r3, r0
 80049fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049fe:	bfac      	ite	ge
 8004a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a02:	81a3      	strhlt	r3, [r4, #12]
 8004a04:	bd10      	pop	{r4, pc}

08004a06 <__swrite>:
 8004a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	898b      	ldrh	r3, [r1, #12]
 8004a0e:	4605      	mov	r5, r0
 8004a10:	05db      	lsls	r3, r3, #23
 8004a12:	460c      	mov	r4, r1
 8004a14:	4616      	mov	r6, r2
 8004a16:	d505      	bpl.n	8004a24 <__swrite+0x1e>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a20:	f000 f868 	bl	8004af4 <_lseek_r>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	4632      	mov	r2, r6
 8004a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	4628      	mov	r0, r5
 8004a30:	463b      	mov	r3, r7
 8004a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3a:	f000 b817 	b.w	8004a6c <_write_r>

08004a3e <__sseek>:
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	460c      	mov	r4, r1
 8004a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a46:	f000 f855 	bl	8004af4 <_lseek_r>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	bf15      	itete	ne
 8004a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a5a:	81a3      	strheq	r3, [r4, #12]
 8004a5c:	bf18      	it	ne
 8004a5e:	81a3      	strhne	r3, [r4, #12]
 8004a60:	bd10      	pop	{r4, pc}

08004a62 <__sclose>:
 8004a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a66:	f000 b813 	b.w	8004a90 <_close_r>
	...

08004a6c <_write_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	2200      	movs	r2, #0
 8004a76:	4d05      	ldr	r5, [pc, #20]	; (8004a8c <_write_r+0x20>)
 8004a78:	602a      	str	r2, [r5, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7fb fedc 	bl	8000838 <_write>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_write_r+0x1e>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_write_r+0x1e>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	2000026c 	.word	0x2000026c

08004a90 <_close_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	2300      	movs	r3, #0
 8004a94:	4d05      	ldr	r5, [pc, #20]	; (8004aac <_close_r+0x1c>)
 8004a96:	4604      	mov	r4, r0
 8004a98:	4608      	mov	r0, r1
 8004a9a:	602b      	str	r3, [r5, #0]
 8004a9c:	f7fb fee8 	bl	8000870 <_close>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d102      	bne.n	8004aaa <_close_r+0x1a>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b103      	cbz	r3, 8004aaa <_close_r+0x1a>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	2000026c 	.word	0x2000026c

08004ab0 <_fstat_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4d06      	ldr	r5, [pc, #24]	; (8004ad0 <_fstat_r+0x20>)
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	602b      	str	r3, [r5, #0]
 8004abe:	f7fb fee2 	bl	8000886 <_fstat>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d102      	bne.n	8004acc <_fstat_r+0x1c>
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	b103      	cbz	r3, 8004acc <_fstat_r+0x1c>
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	bd38      	pop	{r3, r4, r5, pc}
 8004ace:	bf00      	nop
 8004ad0:	2000026c 	.word	0x2000026c

08004ad4 <_isatty_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	4d05      	ldr	r5, [pc, #20]	; (8004af0 <_isatty_r+0x1c>)
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	f7fb fee0 	bl	80008a4 <_isatty>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_isatty_r+0x1a>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_isatty_r+0x1a>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	2000026c 	.word	0x2000026c

08004af4 <_lseek_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	2200      	movs	r2, #0
 8004afe:	4d05      	ldr	r5, [pc, #20]	; (8004b14 <_lseek_r+0x20>)
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fb fed8 	bl	80008b8 <_lseek>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_lseek_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_lseek_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	2000026c 	.word	0x2000026c

08004b18 <_malloc_usable_size_r>:
 8004b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1c:	1f18      	subs	r0, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bfbc      	itt	lt
 8004b22:	580b      	ldrlt	r3, [r1, r0]
 8004b24:	18c0      	addlt	r0, r0, r3
 8004b26:	4770      	bx	lr

08004b28 <_read_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	2200      	movs	r2, #0
 8004b32:	4d05      	ldr	r5, [pc, #20]	; (8004b48 <_read_r+0x20>)
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f7fb fe61 	bl	80007fe <_read>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_read_r+0x1e>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_read_r+0x1e>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	2000026c 	.word	0x2000026c

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
